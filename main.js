
(function() {
'use strict';

function F2(fun)
{
  function wrapper(a) { return function(b) { return fun(a,b); }; }
  wrapper.arity = 2;
  wrapper.func = fun;
  return wrapper;
}

function F3(fun)
{
  function wrapper(a) {
    return function(b) { return function(c) { return fun(a, b, c); }; };
  }
  wrapper.arity = 3;
  wrapper.func = fun;
  return wrapper;
}

function F4(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return fun(a, b, c, d); }; }; };
  }
  wrapper.arity = 4;
  wrapper.func = fun;
  return wrapper;
}

function F5(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return fun(a, b, c, d, e); }; }; }; };
  }
  wrapper.arity = 5;
  wrapper.func = fun;
  return wrapper;
}

function F6(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return fun(a, b, c, d, e, f); }; }; }; }; };
  }
  wrapper.arity = 6;
  wrapper.func = fun;
  return wrapper;
}

function F7(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return fun(a, b, c, d, e, f, g); }; }; }; }; }; };
  }
  wrapper.arity = 7;
  wrapper.func = fun;
  return wrapper;
}

function F8(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) {
    return fun(a, b, c, d, e, f, g, h); }; }; }; }; }; }; };
  }
  wrapper.arity = 8;
  wrapper.func = fun;
  return wrapper;
}

function F9(fun)
{
  function wrapper(a) { return function(b) { return function(c) {
    return function(d) { return function(e) { return function(f) {
    return function(g) { return function(h) { return function(i) {
    return fun(a, b, c, d, e, f, g, h, i); }; }; }; }; }; }; }; };
  }
  wrapper.arity = 9;
  wrapper.func = fun;
  return wrapper;
}

function A2(fun, a, b)
{
  return fun.arity === 2
    ? fun.func(a, b)
    : fun(a)(b);
}
function A3(fun, a, b, c)
{
  return fun.arity === 3
    ? fun.func(a, b, c)
    : fun(a)(b)(c);
}
function A4(fun, a, b, c, d)
{
  return fun.arity === 4
    ? fun.func(a, b, c, d)
    : fun(a)(b)(c)(d);
}
function A5(fun, a, b, c, d, e)
{
  return fun.arity === 5
    ? fun.func(a, b, c, d, e)
    : fun(a)(b)(c)(d)(e);
}
function A6(fun, a, b, c, d, e, f)
{
  return fun.arity === 6
    ? fun.func(a, b, c, d, e, f)
    : fun(a)(b)(c)(d)(e)(f);
}
function A7(fun, a, b, c, d, e, f, g)
{
  return fun.arity === 7
    ? fun.func(a, b, c, d, e, f, g)
    : fun(a)(b)(c)(d)(e)(f)(g);
}
function A8(fun, a, b, c, d, e, f, g, h)
{
  return fun.arity === 8
    ? fun.func(a, b, c, d, e, f, g, h)
    : fun(a)(b)(c)(d)(e)(f)(g)(h);
}
function A9(fun, a, b, c, d, e, f, g, h, i)
{
  return fun.arity === 9
    ? fun.func(a, b, c, d, e, f, g, h, i)
    : fun(a)(b)(c)(d)(e)(f)(g)(h)(i);
}

//import Native.Utils //

var _elm_lang$core$Native_Basics = function() {

function div(a, b)
{
	return (a / b) | 0;
}
function rem(a, b)
{
	return a % b;
}
function mod(a, b)
{
	if (b === 0)
	{
		throw new Error('Cannot perform mod 0. Division by zero error.');
	}
	var r = a % b;
	var m = a === 0 ? 0 : (b > 0 ? (a >= 0 ? r : r + b) : -mod(-a, -b));

	return m === b ? 0 : m;
}
function logBase(base, n)
{
	return Math.log(n) / Math.log(base);
}
function negate(n)
{
	return -n;
}
function abs(n)
{
	return n < 0 ? -n : n;
}

function min(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) < 0 ? a : b;
}
function max(a, b)
{
	return _elm_lang$core$Native_Utils.cmp(a, b) > 0 ? a : b;
}
function clamp(lo, hi, n)
{
	return _elm_lang$core$Native_Utils.cmp(n, lo) < 0
		? lo
		: _elm_lang$core$Native_Utils.cmp(n, hi) > 0
			? hi
			: n;
}

var ord = ['LT', 'EQ', 'GT'];

function compare(x, y)
{
	return { ctor: ord[_elm_lang$core$Native_Utils.cmp(x, y) + 1] };
}

function xor(a, b)
{
	return a !== b;
}
function not(b)
{
	return !b;
}
function isInfinite(n)
{
	return n === Infinity || n === -Infinity;
}

function truncate(n)
{
	return n | 0;
}

function degrees(d)
{
	return d * Math.PI / 180;
}
function turns(t)
{
	return 2 * Math.PI * t;
}
function fromPolar(point)
{
	var r = point._0;
	var t = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(r * Math.cos(t), r * Math.sin(t));
}
function toPolar(point)
{
	var x = point._0;
	var y = point._1;
	return _elm_lang$core$Native_Utils.Tuple2(Math.sqrt(x * x + y * y), Math.atan2(y, x));
}

return {
	div: F2(div),
	rem: F2(rem),
	mod: F2(mod),

	pi: Math.PI,
	e: Math.E,
	cos: Math.cos,
	sin: Math.sin,
	tan: Math.tan,
	acos: Math.acos,
	asin: Math.asin,
	atan: Math.atan,
	atan2: F2(Math.atan2),

	degrees: degrees,
	turns: turns,
	fromPolar: fromPolar,
	toPolar: toPolar,

	sqrt: Math.sqrt,
	logBase: F2(logBase),
	negate: negate,
	abs: abs,
	min: F2(min),
	max: F2(max),
	clamp: F3(clamp),
	compare: F2(compare),

	xor: F2(xor),
	not: not,

	truncate: truncate,
	ceiling: Math.ceil,
	floor: Math.floor,
	round: Math.round,
	toFloat: function(x) { return x; },
	isNaN: isNaN,
	isInfinite: isInfinite
};

}();
//import //

var _elm_lang$core$Native_Utils = function() {

// COMPARISONS

function eq(rootX, rootY)
{
	var stack = [{ x: rootX, y: rootY }];
	while (stack.length > 0)
	{
		var front = stack.pop();
		var x = front.x;
		var y = front.y;
		if (x === y)
		{
			continue;
		}
		if (typeof x === 'object')
		{
			var c = 0;
			for (var key in x)
			{
				++c;
				if (!(key in y))
				{
					return false;
				}
				if (key === 'ctor')
				{
					continue;
				}
				stack.push({ x: x[key], y: y[key] });
			}
			if ('ctor' in x)
			{
				stack.push({ x: x.ctor, y: y.ctor});
			}
			if (c !== Object.keys(y).length)
			{
				return false;
			}
		}
		else if (typeof x === 'function')
		{
			throw new Error('Equality error: general function equality is ' +
							'undecidable, and therefore, unsupported');
		}
		else
		{
			return false;
		}
	}
	return true;
}

// Code in Generate/JavaScript.hs, Basics.js, and List.js depends on
// the particular integer values assigned to LT, EQ, and GT.

var LT = -1, EQ = 0, GT = 1;

function cmp(x, y)
{
	var ord;
	if (typeof x !== 'object')
	{
		return x === y ? EQ : x < y ? LT : GT;
	}
	else if (x instanceof String)
	{
		var a = x.valueOf();
		var b = y.valueOf();
		return a === b
			? EQ
			: a < b
				? LT
				: GT;
	}
	else if (x.ctor === '::' || x.ctor === '[]')
	{
		while (true)
		{
			if (x.ctor === '[]' && y.ctor === '[]')
			{
				return EQ;
			}
			if (x.ctor !== y.ctor)
			{
				return x.ctor === '[]' ? LT : GT;
			}
			ord = cmp(x._0, y._0);
			if (ord !== EQ)
			{
				return ord;
			}
			x = x._1;
			y = y._1;
		}
	}
	else if (x.ctor.slice(0, 6) === '_Tuple')
	{
		var n = x.ctor.slice(6) - 0;
		var err = 'cannot compare tuples with more than 6 elements.';
		if (n === 0) return EQ;
		if (n >= 1) { ord = cmp(x._0, y._0); if (ord !== EQ) return ord;
		if (n >= 2) { ord = cmp(x._1, y._1); if (ord !== EQ) return ord;
		if (n >= 3) { ord = cmp(x._2, y._2); if (ord !== EQ) return ord;
		if (n >= 4) { ord = cmp(x._3, y._3); if (ord !== EQ) return ord;
		if (n >= 5) { ord = cmp(x._4, y._4); if (ord !== EQ) return ord;
		if (n >= 6) { ord = cmp(x._5, y._5); if (ord !== EQ) return ord;
		if (n >= 7) throw new Error('Comparison error: ' + err); } } } } } }
		return EQ;
	}
	else
	{
		throw new Error('Comparison error: comparison is only defined on ints, ' +
						'floats, times, chars, strings, lists of comparable values, ' +
						'and tuples of comparable values.');
	}
}


// COMMON VALUES

var Tuple0 = {
	ctor: '_Tuple0'
};

function Tuple2(x, y)
{
	return {
		ctor: '_Tuple2',
		_0: x,
		_1: y
	};
}

function chr(c)
{
	return new String(c);
}


// GUID

var count = 0;
function guid(_)
{
	return count++;
}


// RECORDS

function update(oldRecord, updatedFields)
{
	var newRecord = {};
	for (var key in oldRecord)
	{
		var value = (key in updatedFields) ? updatedFields[key] : oldRecord[key];
		newRecord[key] = value;
	}
	return newRecord;
}


//// LIST STUFF ////

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return {
		ctor: '::',
		_0: hd,
		_1: tl
	};
}

function append(xs, ys)
{
	// append Strings
	if (typeof xs === 'string')
	{
		return xs + ys;
	}

	// append Lists
	if (xs.ctor === '[]')
	{
		return ys;
	}
	var root = Cons(xs._0, Nil);
	var curr = root;
	xs = xs._1;
	while (xs.ctor !== '[]')
	{
		curr._1 = Cons(xs._0, Nil);
		xs = xs._1;
		curr = curr._1;
	}
	curr._1 = ys;
	return root;
}


// CRASHES

function crash(moduleName, region)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '` ' + regionToString(region) + '\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function crashCase(moduleName, region, value)
{
	return function(message) {
		throw new Error(
			'Ran into a `Debug.crash` in module `' + moduleName + '`\n\n'
			+ 'This was caused by the `case` expression ' + regionToString(region) + '.\n'
			+ 'One of the branches ended with a crash and the following value got through:\n\n    ' + toString(value) + '\n\n'
			+ 'The message provided by the code author is:\n\n    '
			+ message
		);
	};
}

function regionToString(region)
{
	if (region.start.line == region.end.line)
	{
		return 'on line ' + region.start.line;
	}
	return 'between lines ' + region.start.line + ' and ' + region.end.line;
}


// TO STRING

function toString(v)
{
	var type = typeof v;
	if (type === 'function')
	{
		var name = v.func ? v.func.name : v.name;
		return '<function' + (name === '' ? '' : ':') + name + '>';
	}

	if (type === 'boolean')
	{
		return v ? 'True' : 'False';
	}

	if (type === 'number')
	{
		return v + '';
	}

	if (v instanceof String)
	{
		return '\'' + addSlashes(v, true) + '\'';
	}

	if (type === 'string')
	{
		return '"' + addSlashes(v, false) + '"';
	}

	if (v === null)
	{
		return 'null';
	}

	if (type === 'object' && 'ctor' in v)
	{
		var ctorStarter = v.ctor.substring(0, 5);

		if (ctorStarter === '_Tupl')
		{
			var output = [];
			for (var k in v)
			{
				if (k === 'ctor') continue;
				output.push(toString(v[k]));
			}
			return '(' + output.join(',') + ')';
		}

		if (ctorStarter === '_Task')
		{
			return '<task>'
		}

		if (v.ctor === '_Array')
		{
			var list = _elm_lang$core$Array$toList(v);
			return 'Array.fromList ' + toString(list);
		}

		if (v.ctor === '<decoder>')
		{
			return '<decoder>';
		}

		if (v.ctor === '_Process')
		{
			return '<process:' + v.id + '>';
		}

		if (v.ctor === '::')
		{
			var output = '[' + toString(v._0);
			v = v._1;
			while (v.ctor === '::')
			{
				output += ',' + toString(v._0);
				v = v._1;
			}
			return output + ']';
		}

		if (v.ctor === '[]')
		{
			return '[]';
		}

		if (v.ctor === 'RBNode_elm_builtin' || v.ctor === 'RBEmpty_elm_builtin' || v.ctor === 'Set_elm_builtin')
		{
			var name, list;
			if (v.ctor === 'Set_elm_builtin')
			{
				name = 'Set';
				list = A2(
					_elm_lang$core$List$map,
					function(x) {return x._0; },
					_elm_lang$core$Dict$toList(v._0)
				);
			}
			else
			{
				name = 'Dict';
				list = _elm_lang$core$Dict$toList(v);
			}
			return name + '.fromList ' + toString(list);
		}

		var output = '';
		for (var i in v)
		{
			if (i === 'ctor') continue;
			var str = toString(v[i]);
			var c0 = str[0];
			var parenless = c0 === '{' || c0 === '(' || c0 === '<' || c0 === '"' || str.indexOf(' ') < 0;
			output += ' ' + (parenless ? str : '(' + str + ')');
		}
		return v.ctor + output;
	}

	if (type === 'object')
	{
		var output = [];
		for (var k in v)
		{
			output.push(k + ' = ' + toString(v[k]));
		}
		if (output.length === 0)
		{
			return '{}';
		}
		return '{ ' + output.join(', ') + ' }';
	}

	return '<internal structure>';
}

function addSlashes(str, isChar)
{
	var s = str.replace(/\\/g, '\\\\')
			  .replace(/\n/g, '\\n')
			  .replace(/\t/g, '\\t')
			  .replace(/\r/g, '\\r')
			  .replace(/\v/g, '\\v')
			  .replace(/\0/g, '\\0');
	if (isChar)
	{
		return s.replace(/\'/g, '\\\'');
	}
	else
	{
		return s.replace(/\"/g, '\\"');
	}
}


return {
	eq: eq,
	cmp: cmp,
	Tuple0: Tuple0,
	Tuple2: Tuple2,
	chr: chr,
	update: update,
	guid: guid,

	append: F2(append),

	crash: crash,
	crashCase: crashCase,

	toString: toString
};

}();
var _elm_lang$core$Basics$uncurry = F2(
	function (f, _p0) {
		var _p1 = _p0;
		return A2(f, _p1._0, _p1._1);
	});
var _elm_lang$core$Basics$curry = F3(
	function (f, a, b) {
		return f(
			{ctor: '_Tuple2', _0: a, _1: b});
	});
var _elm_lang$core$Basics$flip = F3(
	function (f, b, a) {
		return A2(f, a, b);
	});
var _elm_lang$core$Basics$snd = function (_p2) {
	var _p3 = _p2;
	return _p3._1;
};
var _elm_lang$core$Basics$fst = function (_p4) {
	var _p5 = _p4;
	return _p5._0;
};
var _elm_lang$core$Basics$always = F2(
	function (a, _p6) {
		return a;
	});
var _elm_lang$core$Basics$identity = function (x) {
	return x;
};
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<|'] = F2(
	function (f, x) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['|>'] = F2(
	function (x, f) {
		return f(x);
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>>'] = F3(
	function (f, g, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<<'] = F3(
	function (g, f, x) {
		return g(
			f(x));
	});
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['++'] = _elm_lang$core$Native_Utils.append;
var _elm_lang$core$Basics$toString = _elm_lang$core$Native_Utils.toString;
var _elm_lang$core$Basics$isInfinite = _elm_lang$core$Native_Basics.isInfinite;
var _elm_lang$core$Basics$isNaN = _elm_lang$core$Native_Basics.isNaN;
var _elm_lang$core$Basics$toFloat = _elm_lang$core$Native_Basics.toFloat;
var _elm_lang$core$Basics$ceiling = _elm_lang$core$Native_Basics.ceiling;
var _elm_lang$core$Basics$floor = _elm_lang$core$Native_Basics.floor;
var _elm_lang$core$Basics$truncate = _elm_lang$core$Native_Basics.truncate;
var _elm_lang$core$Basics$round = _elm_lang$core$Native_Basics.round;
var _elm_lang$core$Basics$not = _elm_lang$core$Native_Basics.not;
var _elm_lang$core$Basics$xor = _elm_lang$core$Native_Basics.xor;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['||'] = _elm_lang$core$Native_Basics.or;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['&&'] = _elm_lang$core$Native_Basics.and;
var _elm_lang$core$Basics$max = _elm_lang$core$Native_Basics.max;
var _elm_lang$core$Basics$min = _elm_lang$core$Native_Basics.min;
var _elm_lang$core$Basics$compare = _elm_lang$core$Native_Basics.compare;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>='] = _elm_lang$core$Native_Basics.ge;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<='] = _elm_lang$core$Native_Basics.le;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['>'] = _elm_lang$core$Native_Basics.gt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['<'] = _elm_lang$core$Native_Basics.lt;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/='] = _elm_lang$core$Native_Basics.neq;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['=='] = _elm_lang$core$Native_Basics.eq;
var _elm_lang$core$Basics$e = _elm_lang$core$Native_Basics.e;
var _elm_lang$core$Basics$pi = _elm_lang$core$Native_Basics.pi;
var _elm_lang$core$Basics$clamp = _elm_lang$core$Native_Basics.clamp;
var _elm_lang$core$Basics$logBase = _elm_lang$core$Native_Basics.logBase;
var _elm_lang$core$Basics$abs = _elm_lang$core$Native_Basics.abs;
var _elm_lang$core$Basics$negate = _elm_lang$core$Native_Basics.negate;
var _elm_lang$core$Basics$sqrt = _elm_lang$core$Native_Basics.sqrt;
var _elm_lang$core$Basics$atan2 = _elm_lang$core$Native_Basics.atan2;
var _elm_lang$core$Basics$atan = _elm_lang$core$Native_Basics.atan;
var _elm_lang$core$Basics$asin = _elm_lang$core$Native_Basics.asin;
var _elm_lang$core$Basics$acos = _elm_lang$core$Native_Basics.acos;
var _elm_lang$core$Basics$tan = _elm_lang$core$Native_Basics.tan;
var _elm_lang$core$Basics$sin = _elm_lang$core$Native_Basics.sin;
var _elm_lang$core$Basics$cos = _elm_lang$core$Native_Basics.cos;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['^'] = _elm_lang$core$Native_Basics.exp;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['%'] = _elm_lang$core$Native_Basics.mod;
var _elm_lang$core$Basics$rem = _elm_lang$core$Native_Basics.rem;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['//'] = _elm_lang$core$Native_Basics.div;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['/'] = _elm_lang$core$Native_Basics.floatDiv;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['*'] = _elm_lang$core$Native_Basics.mul;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['-'] = _elm_lang$core$Native_Basics.sub;
var _elm_lang$core$Basics_ops = _elm_lang$core$Basics_ops || {};
_elm_lang$core$Basics_ops['+'] = _elm_lang$core$Native_Basics.add;
var _elm_lang$core$Basics$toPolar = _elm_lang$core$Native_Basics.toPolar;
var _elm_lang$core$Basics$fromPolar = _elm_lang$core$Native_Basics.fromPolar;
var _elm_lang$core$Basics$turns = _elm_lang$core$Native_Basics.turns;
var _elm_lang$core$Basics$degrees = _elm_lang$core$Native_Basics.degrees;
var _elm_lang$core$Basics$radians = function (t) {
	return t;
};
var _elm_lang$core$Basics$GT = {ctor: 'GT'};
var _elm_lang$core$Basics$EQ = {ctor: 'EQ'};
var _elm_lang$core$Basics$LT = {ctor: 'LT'};
var _elm_lang$core$Basics$Never = function (a) {
	return {ctor: 'Never', _0: a};
};

//import Native.Utils //

var _elm_lang$core$Native_Debug = function() {

function log(tag, value)
{
	var msg = tag + ': ' + _elm_lang$core$Native_Utils.toString(value);
	var process = process || {};
	if (process.stdout)
	{
		process.stdout.write(msg);
	}
	else
	{
		console.log(msg);
	}
	return value;
}

function crash(message)
{
	throw new Error(message);
}

return {
	crash: crash,
	log: F2(log)
};

}();
var _elm_lang$core$Debug$crash = _elm_lang$core$Native_Debug.crash;
var _elm_lang$core$Debug$log = _elm_lang$core$Native_Debug.log;

var _elm_lang$core$Maybe$withDefault = F2(
	function ($default, maybe) {
		var _p0 = maybe;
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return $default;
		}
	});
var _elm_lang$core$Maybe$Nothing = {ctor: 'Nothing'};
var _elm_lang$core$Maybe$oneOf = function (maybes) {
	oneOf:
	while (true) {
		var _p1 = maybes;
		if (_p1.ctor === '[]') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p3 = _p1._0;
			var _p2 = _p3;
			if (_p2.ctor === 'Nothing') {
				var _v3 = _p1._1;
				maybes = _v3;
				continue oneOf;
			} else {
				return _p3;
			}
		}
	}
};
var _elm_lang$core$Maybe$andThen = F2(
	function (maybeValue, callback) {
		var _p4 = maybeValue;
		if (_p4.ctor === 'Just') {
			return callback(_p4._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$Just = function (a) {
	return {ctor: 'Just', _0: a};
};
var _elm_lang$core$Maybe$map = F2(
	function (f, maybe) {
		var _p5 = maybe;
		if (_p5.ctor === 'Just') {
			return _elm_lang$core$Maybe$Just(
				f(_p5._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map2 = F3(
	function (func, ma, mb) {
		var _p6 = {ctor: '_Tuple2', _0: ma, _1: mb};
		if (((_p6.ctor === '_Tuple2') && (_p6._0.ctor === 'Just')) && (_p6._1.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A2(func, _p6._0._0, _p6._1._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map3 = F4(
	function (func, ma, mb, mc) {
		var _p7 = {ctor: '_Tuple3', _0: ma, _1: mb, _2: mc};
		if ((((_p7.ctor === '_Tuple3') && (_p7._0.ctor === 'Just')) && (_p7._1.ctor === 'Just')) && (_p7._2.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A3(func, _p7._0._0, _p7._1._0, _p7._2._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map4 = F5(
	function (func, ma, mb, mc, md) {
		var _p8 = {ctor: '_Tuple4', _0: ma, _1: mb, _2: mc, _3: md};
		if (((((_p8.ctor === '_Tuple4') && (_p8._0.ctor === 'Just')) && (_p8._1.ctor === 'Just')) && (_p8._2.ctor === 'Just')) && (_p8._3.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A4(func, _p8._0._0, _p8._1._0, _p8._2._0, _p8._3._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _elm_lang$core$Maybe$map5 = F6(
	function (func, ma, mb, mc, md, me) {
		var _p9 = {ctor: '_Tuple5', _0: ma, _1: mb, _2: mc, _3: md, _4: me};
		if ((((((_p9.ctor === '_Tuple5') && (_p9._0.ctor === 'Just')) && (_p9._1.ctor === 'Just')) && (_p9._2.ctor === 'Just')) && (_p9._3.ctor === 'Just')) && (_p9._4.ctor === 'Just')) {
			return _elm_lang$core$Maybe$Just(
				A5(func, _p9._0._0, _p9._1._0, _p9._2._0, _p9._3._0, _p9._4._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});

//import Native.Utils //

var _elm_lang$core$Native_List = function() {

var Nil = { ctor: '[]' };

function Cons(hd, tl)
{
	return { ctor: '::', _0: hd, _1: tl };
}

function fromArray(arr)
{
	var out = Nil;
	for (var i = arr.length; i--; )
	{
		out = Cons(arr[i], out);
	}
	return out;
}

function toArray(xs)
{
	var out = [];
	while (xs.ctor !== '[]')
	{
		out.push(xs._0);
		xs = xs._1;
	}
	return out;
}


function range(lo, hi)
{
	var list = Nil;
	if (lo <= hi)
	{
		do
		{
			list = Cons(hi, list);
		}
		while (hi-- > lo);
	}
	return list;
}

function foldr(f, b, xs)
{
	var arr = toArray(xs);
	var acc = b;
	for (var i = arr.length; i--; )
	{
		acc = A2(f, arr[i], acc);
	}
	return acc;
}

function map2(f, xs, ys)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]')
	{
		arr.push(A2(f, xs._0, ys._0));
		xs = xs._1;
		ys = ys._1;
	}
	return fromArray(arr);
}

function map3(f, xs, ys, zs)
{
	var arr = [];
	while (xs.ctor !== '[]' && ys.ctor !== '[]' && zs.ctor !== '[]')
	{
		arr.push(A3(f, xs._0, ys._0, zs._0));
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map4(f, ws, xs, ys, zs)
{
	var arr = [];
	while (   ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A4(f, ws._0, xs._0, ys._0, zs._0));
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function map5(f, vs, ws, xs, ys, zs)
{
	var arr = [];
	while (   vs.ctor !== '[]'
		   && ws.ctor !== '[]'
		   && xs.ctor !== '[]'
		   && ys.ctor !== '[]'
		   && zs.ctor !== '[]')
	{
		arr.push(A5(f, vs._0, ws._0, xs._0, ys._0, zs._0));
		vs = vs._1;
		ws = ws._1;
		xs = xs._1;
		ys = ys._1;
		zs = zs._1;
	}
	return fromArray(arr);
}

function sortBy(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		return _elm_lang$core$Native_Utils.cmp(f(a), f(b));
	}));
}

function sortWith(f, xs)
{
	return fromArray(toArray(xs).sort(function(a, b) {
		var ord = f(a)(b).ctor;
		return ord === 'EQ' ? 0 : ord === 'LT' ? -1 : 1;
	}));
}

return {
	Nil: Nil,
	Cons: Cons,
	cons: F2(Cons),
	toArray: toArray,
	fromArray: fromArray,
	range: range,

	foldr: F3(foldr),

	map2: F3(map2),
	map3: F4(map3),
	map4: F5(map4),
	map5: F6(map5),
	sortBy: F2(sortBy),
	sortWith: F2(sortWith)
};

}();
var _elm_lang$core$List$sortWith = _elm_lang$core$Native_List.sortWith;
var _elm_lang$core$List$sortBy = _elm_lang$core$Native_List.sortBy;
var _elm_lang$core$List$sort = function (xs) {
	return A2(_elm_lang$core$List$sortBy, _elm_lang$core$Basics$identity, xs);
};
var _elm_lang$core$List$drop = F2(
	function (n, list) {
		drop:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return list;
			} else {
				var _p0 = list;
				if (_p0.ctor === '[]') {
					return list;
				} else {
					var _v1 = n - 1,
						_v2 = _p0._1;
					n = _v1;
					list = _v2;
					continue drop;
				}
			}
		}
	});
var _elm_lang$core$List$map5 = _elm_lang$core$Native_List.map5;
var _elm_lang$core$List$map4 = _elm_lang$core$Native_List.map4;
var _elm_lang$core$List$map3 = _elm_lang$core$Native_List.map3;
var _elm_lang$core$List$map2 = _elm_lang$core$Native_List.map2;
var _elm_lang$core$List$any = F2(
	function (isOkay, list) {
		any:
		while (true) {
			var _p1 = list;
			if (_p1.ctor === '[]') {
				return false;
			} else {
				if (isOkay(_p1._0)) {
					return true;
				} else {
					var _v4 = isOkay,
						_v5 = _p1._1;
					isOkay = _v4;
					list = _v5;
					continue any;
				}
			}
		}
	});
var _elm_lang$core$List$all = F2(
	function (isOkay, list) {
		return _elm_lang$core$Basics$not(
			A2(
				_elm_lang$core$List$any,
				function (_p2) {
					return _elm_lang$core$Basics$not(
						isOkay(_p2));
				},
				list));
	});
var _elm_lang$core$List$foldr = _elm_lang$core$Native_List.foldr;
var _elm_lang$core$List$foldl = F3(
	function (func, acc, list) {
		foldl:
		while (true) {
			var _p3 = list;
			if (_p3.ctor === '[]') {
				return acc;
			} else {
				var _v7 = func,
					_v8 = A2(func, _p3._0, acc),
					_v9 = _p3._1;
				func = _v7;
				acc = _v8;
				list = _v9;
				continue foldl;
			}
		}
	});
var _elm_lang$core$List$length = function (xs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p4, i) {
				return i + 1;
			}),
		0,
		xs);
};
var _elm_lang$core$List$sum = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x + y;
			}),
		0,
		numbers);
};
var _elm_lang$core$List$product = function (numbers) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return x * y;
			}),
		1,
		numbers);
};
var _elm_lang$core$List$maximum = function (list) {
	var _p5 = list;
	if (_p5.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$max, _p5._0, _p5._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$minimum = function (list) {
	var _p6 = list;
	if (_p6.ctor === '::') {
		return _elm_lang$core$Maybe$Just(
			A3(_elm_lang$core$List$foldl, _elm_lang$core$Basics$min, _p6._0, _p6._1));
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$indexedMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$map2,
			f,
			_elm_lang$core$Native_List.range(
				0,
				_elm_lang$core$List$length(xs) - 1),
			xs);
	});
var _elm_lang$core$List$member = F2(
	function (x, xs) {
		return A2(
			_elm_lang$core$List$any,
			function (a) {
				return _elm_lang$core$Native_Utils.eq(a, x);
			},
			xs);
	});
var _elm_lang$core$List$isEmpty = function (xs) {
	var _p7 = xs;
	if (_p7.ctor === '[]') {
		return true;
	} else {
		return false;
	}
};
var _elm_lang$core$List$tail = function (list) {
	var _p8 = list;
	if (_p8.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p8._1);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List$head = function (list) {
	var _p9 = list;
	if (_p9.ctor === '::') {
		return _elm_lang$core$Maybe$Just(_p9._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$List_ops = _elm_lang$core$List_ops || {};
_elm_lang$core$List_ops['::'] = _elm_lang$core$Native_List.cons;
var _elm_lang$core$List$map = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, acc) {
					return A2(
						_elm_lang$core$List_ops['::'],
						f(x),
						acc);
				}),
			_elm_lang$core$Native_List.fromArray(
				[]),
			xs);
	});
var _elm_lang$core$List$filter = F2(
	function (pred, xs) {
		var conditionalCons = F2(
			function (x, xs$) {
				return pred(x) ? A2(_elm_lang$core$List_ops['::'], x, xs$) : xs$;
			});
		return A3(
			_elm_lang$core$List$foldr,
			conditionalCons,
			_elm_lang$core$Native_List.fromArray(
				[]),
			xs);
	});
var _elm_lang$core$List$maybeCons = F3(
	function (f, mx, xs) {
		var _p10 = f(mx);
		if (_p10.ctor === 'Just') {
			return A2(_elm_lang$core$List_ops['::'], _p10._0, xs);
		} else {
			return xs;
		}
	});
var _elm_lang$core$List$filterMap = F2(
	function (f, xs) {
		return A3(
			_elm_lang$core$List$foldr,
			_elm_lang$core$List$maybeCons(f),
			_elm_lang$core$Native_List.fromArray(
				[]),
			xs);
	});
var _elm_lang$core$List$reverse = function (list) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (x, y) {
				return A2(_elm_lang$core$List_ops['::'], x, y);
			}),
		_elm_lang$core$Native_List.fromArray(
			[]),
		list);
};
var _elm_lang$core$List$scanl = F3(
	function (f, b, xs) {
		var scan1 = F2(
			function (x, accAcc) {
				var _p11 = accAcc;
				if (_p11.ctor === '::') {
					return A2(
						_elm_lang$core$List_ops['::'],
						A2(f, x, _p11._0),
						accAcc);
				} else {
					return _elm_lang$core$Native_List.fromArray(
						[]);
				}
			});
		return _elm_lang$core$List$reverse(
			A3(
				_elm_lang$core$List$foldl,
				scan1,
				_elm_lang$core$Native_List.fromArray(
					[b]),
				xs));
	});
var _elm_lang$core$List$append = F2(
	function (xs, ys) {
		var _p12 = ys;
		if (_p12.ctor === '[]') {
			return xs;
		} else {
			return A3(
				_elm_lang$core$List$foldr,
				F2(
					function (x, y) {
						return A2(_elm_lang$core$List_ops['::'], x, y);
					}),
				ys,
				xs);
		}
	});
var _elm_lang$core$List$concat = function (lists) {
	return A3(
		_elm_lang$core$List$foldr,
		_elm_lang$core$List$append,
		_elm_lang$core$Native_List.fromArray(
			[]),
		lists);
};
var _elm_lang$core$List$concatMap = F2(
	function (f, list) {
		return _elm_lang$core$List$concat(
			A2(_elm_lang$core$List$map, f, list));
	});
var _elm_lang$core$List$partition = F2(
	function (pred, list) {
		var step = F2(
			function (x, _p13) {
				var _p14 = _p13;
				var _p16 = _p14._0;
				var _p15 = _p14._1;
				return pred(x) ? {
					ctor: '_Tuple2',
					_0: A2(_elm_lang$core$List_ops['::'], x, _p16),
					_1: _p15
				} : {
					ctor: '_Tuple2',
					_0: _p16,
					_1: A2(_elm_lang$core$List_ops['::'], x, _p15)
				};
			});
		return A3(
			_elm_lang$core$List$foldr,
			step,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_List.fromArray(
					[]),
				_1: _elm_lang$core$Native_List.fromArray(
					[])
			},
			list);
	});
var _elm_lang$core$List$unzip = function (pairs) {
	var step = F2(
		function (_p18, _p17) {
			var _p19 = _p18;
			var _p20 = _p17;
			return {
				ctor: '_Tuple2',
				_0: A2(_elm_lang$core$List_ops['::'], _p19._0, _p20._0),
				_1: A2(_elm_lang$core$List_ops['::'], _p19._1, _p20._1)
			};
		});
	return A3(
		_elm_lang$core$List$foldr,
		step,
		{
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_List.fromArray(
				[]),
			_1: _elm_lang$core$Native_List.fromArray(
				[])
		},
		pairs);
};
var _elm_lang$core$List$intersperse = F2(
	function (sep, xs) {
		var _p21 = xs;
		if (_p21.ctor === '[]') {
			return _elm_lang$core$Native_List.fromArray(
				[]);
		} else {
			var step = F2(
				function (x, rest) {
					return A2(
						_elm_lang$core$List_ops['::'],
						sep,
						A2(_elm_lang$core$List_ops['::'], x, rest));
				});
			var spersed = A3(
				_elm_lang$core$List$foldr,
				step,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_p21._1);
			return A2(_elm_lang$core$List_ops['::'], _p21._0, spersed);
		}
	});
var _elm_lang$core$List$take = F2(
	function (n, list) {
		if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
			return _elm_lang$core$Native_List.fromArray(
				[]);
		} else {
			var _p22 = list;
			if (_p22.ctor === '[]') {
				return list;
			} else {
				return A2(
					_elm_lang$core$List_ops['::'],
					_p22._0,
					A2(_elm_lang$core$List$take, n - 1, _p22._1));
			}
		}
	});
var _elm_lang$core$List$repeatHelp = F3(
	function (result, n, value) {
		repeatHelp:
		while (true) {
			if (_elm_lang$core$Native_Utils.cmp(n, 0) < 1) {
				return result;
			} else {
				var _v23 = A2(_elm_lang$core$List_ops['::'], value, result),
					_v24 = n - 1,
					_v25 = value;
				result = _v23;
				n = _v24;
				value = _v25;
				continue repeatHelp;
			}
		}
	});
var _elm_lang$core$List$repeat = F2(
	function (n, value) {
		return A3(
			_elm_lang$core$List$repeatHelp,
			_elm_lang$core$Native_List.fromArray(
				[]),
			n,
			value);
	});

var _elm_lang$core$Result$toMaybe = function (result) {
	var _p0 = result;
	if (_p0.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _elm_lang$core$Result$withDefault = F2(
	function (def, result) {
		var _p1 = result;
		if (_p1.ctor === 'Ok') {
			return _p1._0;
		} else {
			return def;
		}
	});
var _elm_lang$core$Result$Err = function (a) {
	return {ctor: 'Err', _0: a};
};
var _elm_lang$core$Result$andThen = F2(
	function (result, callback) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return callback(_p2._0);
		} else {
			return _elm_lang$core$Result$Err(_p2._0);
		}
	});
var _elm_lang$core$Result$Ok = function (a) {
	return {ctor: 'Ok', _0: a};
};
var _elm_lang$core$Result$map = F2(
	function (func, ra) {
		var _p3 = ra;
		if (_p3.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(
				func(_p3._0));
		} else {
			return _elm_lang$core$Result$Err(_p3._0);
		}
	});
var _elm_lang$core$Result$map2 = F3(
	function (func, ra, rb) {
		var _p4 = {ctor: '_Tuple2', _0: ra, _1: rb};
		if (_p4._0.ctor === 'Ok') {
			if (_p4._1.ctor === 'Ok') {
				return _elm_lang$core$Result$Ok(
					A2(func, _p4._0._0, _p4._1._0));
			} else {
				return _elm_lang$core$Result$Err(_p4._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p4._0._0);
		}
	});
var _elm_lang$core$Result$map3 = F4(
	function (func, ra, rb, rc) {
		var _p5 = {ctor: '_Tuple3', _0: ra, _1: rb, _2: rc};
		if (_p5._0.ctor === 'Ok') {
			if (_p5._1.ctor === 'Ok') {
				if (_p5._2.ctor === 'Ok') {
					return _elm_lang$core$Result$Ok(
						A3(func, _p5._0._0, _p5._1._0, _p5._2._0));
				} else {
					return _elm_lang$core$Result$Err(_p5._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p5._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p5._0._0);
		}
	});
var _elm_lang$core$Result$map4 = F5(
	function (func, ra, rb, rc, rd) {
		var _p6 = {ctor: '_Tuple4', _0: ra, _1: rb, _2: rc, _3: rd};
		if (_p6._0.ctor === 'Ok') {
			if (_p6._1.ctor === 'Ok') {
				if (_p6._2.ctor === 'Ok') {
					if (_p6._3.ctor === 'Ok') {
						return _elm_lang$core$Result$Ok(
							A4(func, _p6._0._0, _p6._1._0, _p6._2._0, _p6._3._0));
					} else {
						return _elm_lang$core$Result$Err(_p6._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p6._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p6._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p6._0._0);
		}
	});
var _elm_lang$core$Result$map5 = F6(
	function (func, ra, rb, rc, rd, re) {
		var _p7 = {ctor: '_Tuple5', _0: ra, _1: rb, _2: rc, _3: rd, _4: re};
		if (_p7._0.ctor === 'Ok') {
			if (_p7._1.ctor === 'Ok') {
				if (_p7._2.ctor === 'Ok') {
					if (_p7._3.ctor === 'Ok') {
						if (_p7._4.ctor === 'Ok') {
							return _elm_lang$core$Result$Ok(
								A5(func, _p7._0._0, _p7._1._0, _p7._2._0, _p7._3._0, _p7._4._0));
						} else {
							return _elm_lang$core$Result$Err(_p7._4._0);
						}
					} else {
						return _elm_lang$core$Result$Err(_p7._3._0);
					}
				} else {
					return _elm_lang$core$Result$Err(_p7._2._0);
				}
			} else {
				return _elm_lang$core$Result$Err(_p7._1._0);
			}
		} else {
			return _elm_lang$core$Result$Err(_p7._0._0);
		}
	});
var _elm_lang$core$Result$formatError = F2(
	function (f, result) {
		var _p8 = result;
		if (_p8.ctor === 'Ok') {
			return _elm_lang$core$Result$Ok(_p8._0);
		} else {
			return _elm_lang$core$Result$Err(
				f(_p8._0));
		}
	});
var _elm_lang$core$Result$fromMaybe = F2(
	function (err, maybe) {
		var _p9 = maybe;
		if (_p9.ctor === 'Just') {
			return _elm_lang$core$Result$Ok(_p9._0);
		} else {
			return _elm_lang$core$Result$Err(err);
		}
	});

//import //

var _elm_lang$core$Native_Platform = function() {


// PROGRAMS

function addPublicModule(object, name, main)
{
	var init = main ? makeEmbed(name, main) : mainIsUndefined(name);

	object['worker'] = function worker(flags)
	{
		return init(undefined, flags, false);
	}

	object['embed'] = function embed(domNode, flags)
	{
		return init(domNode, flags, true);
	}

	object['fullscreen'] = function fullscreen(flags)
	{
		return init(document.body, flags, true);
	};
}


// PROGRAM FAIL

function mainIsUndefined(name)
{
	return function(domNode)
	{
		var message = 'Cannot initialize module `' + name +
			'` because it has no `main` value!\nWhat should I show on screen?';
		domNode.innerHTML = errorHtml(message);
		throw new Error(message);
	};
}

function errorHtml(message)
{
	return '<div style="padding-left:1em;">'
		+ '<h2 style="font-weight:normal;"><b>Oops!</b> Something went wrong when starting your Elm program.</h2>'
		+ '<pre style="padding-left:1em;">' + message + '</pre>'
		+ '</div>';
}


// PROGRAM SUCCESS

function makeEmbed(moduleName, main)
{
	return function embed(rootDomNode, flags, withRenderer)
	{
		try
		{
			var program = mainToProgram(moduleName, main);
			if (!withRenderer)
			{
				program.renderer = dummyRenderer;
			}
			return makeEmbedHelp(moduleName, program, rootDomNode, flags);
		}
		catch (e)
		{
			rootDomNode.innerHTML = errorHtml(e.message);
			throw e;
		}
	};
}

function dummyRenderer()
{
	return { update: function() {} };
}


// MAIN TO PROGRAM

function mainToProgram(moduleName, wrappedMain)
{
	var main = wrappedMain.main;

	if (typeof main.init === 'undefined')
	{
		var emptyBag = batch(_elm_lang$core$Native_List.Nil);
		var noChange = _elm_lang$core$Native_Utils.Tuple2(
			_elm_lang$core$Native_Utils.Tuple0,
			emptyBag
		);

		return _elm_lang$virtual_dom$VirtualDom$programWithFlags({
			init: function() { return noChange; },
			view: function() { return main; },
			update: F2(function() { return noChange; }),
			subscriptions: function () { return emptyBag; }
		});
	}

	var flags = wrappedMain.flags;
	var init = flags
		? initWithFlags(moduleName, main.init, flags)
		: initWithoutFlags(moduleName, main.init);

	return _elm_lang$virtual_dom$VirtualDom$programWithFlags({
		init: init,
		view: main.view,
		update: main.update,
		subscriptions: main.subscriptions,
	});
}

function initWithoutFlags(moduleName, realInit)
{
	return function init(flags)
	{
		if (typeof flags !== 'undefined')
		{
			throw new Error(
				'You are giving module `' + moduleName + '` an argument in JavaScript.\n'
				+ 'This module does not take arguments though! You probably need to change the\n'
				+ 'initialization code to something like `Elm.' + moduleName + '.fullscreen()`'
			);
		}
		return realInit();
	};
}

function initWithFlags(moduleName, realInit, flagDecoder)
{
	return function init(flags)
	{
		var result = A2(_elm_lang$core$Native_Json.run, flagDecoder, flags);
		if (result.ctor === 'Err')
		{
			throw new Error(
				'You are trying to initialize module `' + moduleName + '` with an unexpected argument.\n'
				+ 'When trying to convert it to a usable Elm value, I run into this problem:\n\n'
				+ result._0
			);
		}
		return realInit(result._0);
	};
}


// SETUP RUNTIME SYSTEM

function makeEmbedHelp(moduleName, program, rootDomNode, flags)
{
	var init = program.init;
	var update = program.update;
	var subscriptions = program.subscriptions;
	var view = program.view;
	var makeRenderer = program.renderer;

	// ambient state
	var managers = {};
	var renderer;

	// init and update state in main process
	var initApp = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var results = init(flags);
		var model = results._0;
		renderer = makeRenderer(rootDomNode, enqueue, view(model));
		var cmds = results._1;
		var subs = subscriptions(model);
		dispatchEffects(managers, cmds, subs);
		callback(_elm_lang$core$Native_Scheduler.succeed(model));
	});

	function onMessage(msg, model)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
			var results = A2(update, msg, model);
			model = results._0;
			renderer.update(view(model));
			var cmds = results._1;
			var subs = subscriptions(model);
			dispatchEffects(managers, cmds, subs);
			callback(_elm_lang$core$Native_Scheduler.succeed(model));
		});
	}

	var mainProcess = spawnLoop(initApp, onMessage);

	function enqueue(msg)
	{
		_elm_lang$core$Native_Scheduler.rawSend(mainProcess, msg);
	}

	var ports = setupEffects(managers, enqueue);

	return ports ? { ports: ports } : {};
}


// EFFECT MANAGERS

var effectManagers = {};

function setupEffects(managers, callback)
{
	var ports;

	// setup all necessary effect managers
	for (var key in effectManagers)
	{
		var manager = effectManagers[key];

		if (manager.isForeign)
		{
			ports = ports || {};
			ports[key] = manager.tag === 'cmd'
				? setupOutgoingPort(key)
				: setupIncomingPort(key, callback);
		}

		managers[key] = makeManager(manager, callback);
	}

	return ports;
}

function makeManager(info, callback)
{
	var router = {
		main: callback,
		self: undefined
	};

	var tag = info.tag;
	var onEffects = info.onEffects;
	var onSelfMsg = info.onSelfMsg;

	function onMessage(msg, state)
	{
		if (msg.ctor === 'self')
		{
			return A3(onSelfMsg, router, msg._0, state);
		}

		var fx = msg._0;
		switch (tag)
		{
			case 'cmd':
				return A3(onEffects, router, fx.cmds, state);

			case 'sub':
				return A3(onEffects, router, fx.subs, state);

			case 'fx':
				return A4(onEffects, router, fx.cmds, fx.subs, state);
		}
	}

	var process = spawnLoop(info.init, onMessage);
	router.self = process;
	return process;
}

function sendToApp(router, msg)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		router.main(msg);
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sendToSelf(router, msg)
{
	return A2(_elm_lang$core$Native_Scheduler.send, router.self, {
		ctor: 'self',
		_0: msg
	});
}


// HELPER for STATEFUL LOOPS

function spawnLoop(init, onMessage)
{
	var andThen = _elm_lang$core$Native_Scheduler.andThen;

	function loop(state)
	{
		var handleMsg = _elm_lang$core$Native_Scheduler.receive(function(msg) {
			return onMessage(msg, state);
		});
		return A2(andThen, handleMsg, loop);
	}

	var task = A2(andThen, init, loop);

	return _elm_lang$core$Native_Scheduler.rawSpawn(task);
}


// BAGS

function leaf(home)
{
	return function(value)
	{
		return {
			type: 'leaf',
			home: home,
			value: value
		};
	};
}

function batch(list)
{
	return {
		type: 'node',
		branches: list
	};
}

function map(tagger, bag)
{
	return {
		type: 'map',
		tagger: tagger,
		tree: bag
	}
}


// PIPE BAGS INTO EFFECT MANAGERS

function dispatchEffects(managers, cmdBag, subBag)
{
	var effectsDict = {};
	gatherEffects(true, cmdBag, effectsDict, null);
	gatherEffects(false, subBag, effectsDict, null);

	for (var home in managers)
	{
		var fx = home in effectsDict
			? effectsDict[home]
			: {
				cmds: _elm_lang$core$Native_List.Nil,
				subs: _elm_lang$core$Native_List.Nil
			};

		_elm_lang$core$Native_Scheduler.rawSend(managers[home], { ctor: 'fx', _0: fx });
	}
}

function gatherEffects(isCmd, bag, effectsDict, taggers)
{
	switch (bag.type)
	{
		case 'leaf':
			var home = bag.home;
			var effect = toEffect(isCmd, home, taggers, bag.value);
			effectsDict[home] = insert(isCmd, effect, effectsDict[home]);
			return;

		case 'node':
			var list = bag.branches;
			while (list.ctor !== '[]')
			{
				gatherEffects(isCmd, list._0, effectsDict, taggers);
				list = list._1;
			}
			return;

		case 'map':
			gatherEffects(isCmd, bag.tree, effectsDict, {
				tagger: bag.tagger,
				rest: taggers
			});
			return;
	}
}

function toEffect(isCmd, home, taggers, value)
{
	function applyTaggers(x)
	{
		var temp = taggers;
		while (temp)
		{
			x = temp.tagger(x);
			temp = temp.rest;
		}
		return x;
	}

	var map = isCmd
		? effectManagers[home].cmdMap
		: effectManagers[home].subMap;

	return A2(map, applyTaggers, value)
}

function insert(isCmd, newEffect, effects)
{
	effects = effects || {
		cmds: _elm_lang$core$Native_List.Nil,
		subs: _elm_lang$core$Native_List.Nil
	};
	if (isCmd)
	{
		effects.cmds = _elm_lang$core$Native_List.Cons(newEffect, effects.cmds);
		return effects;
	}
	effects.subs = _elm_lang$core$Native_List.Cons(newEffect, effects.subs);
	return effects;
}


// PORTS

function checkPortName(name)
{
	if (name in effectManagers)
	{
		throw new Error('There can only be one port named `' + name + '`, but your program has multiple.');
	}
}


// OUTGOING PORTS

function outgoingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'cmd',
		cmdMap: outgoingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var outgoingPortMap = F2(function cmdMap(tagger, value) {
	return value;
});

function setupOutgoingPort(name)
{
	var subs = [];
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, cmdList, state)
	{
		while (cmdList.ctor !== '[]')
		{
			var value = converter(cmdList._0);
			for (var i = 0; i < subs.length; i++)
			{
				subs[i](value);
			}
			cmdList = cmdList._1;
		}
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function subscribe(callback)
	{
		subs.push(callback);
	}

	function unsubscribe(callback)
	{
		var index = subs.indexOf(callback);
		if (index >= 0)
		{
			subs.splice(index, 1);
		}
	}

	return {
		subscribe: subscribe,
		unsubscribe: unsubscribe
	};
}


// INCOMING PORTS

function incomingPort(name, converter)
{
	checkPortName(name);
	effectManagers[name] = {
		tag: 'sub',
		subMap: incomingPortMap,
		converter: converter,
		isForeign: true
	};
	return leaf(name);
}

var incomingPortMap = F2(function subMap(tagger, finalTagger)
{
	return function(value)
	{
		return tagger(finalTagger(value));
	};
});

function setupIncomingPort(name, callback)
{
	var subs = _elm_lang$core$Native_List.Nil;
	var converter = effectManagers[name].converter;

	// CREATE MANAGER

	var init = _elm_lang$core$Native_Scheduler.succeed(null);

	function onEffects(router, subList, state)
	{
		subs = subList;
		return init;
	}

	effectManagers[name].init = init;
	effectManagers[name].onEffects = F3(onEffects);

	// PUBLIC API

	function send(value)
	{
		var result = A2(_elm_lang$core$Json_Decode$decodeValue, converter, value);
		if (result.ctor === 'Err')
		{
			throw new Error('Trying to send an unexpected type of value through port `' + name + '`:\n' + result._0);
		}

		var value = result._0;
		var temp = subs;
		while (temp.ctor !== '[]')
		{
			callback(temp._0(value));
			temp = temp._1;
		}
	}

	return { send: send };
}

return {
	// routers
	sendToApp: F2(sendToApp),
	sendToSelf: F2(sendToSelf),

	// global setup
	mainToProgram: mainToProgram,
	effectManagers: effectManagers,
	outgoingPort: outgoingPort,
	incomingPort: incomingPort,
	addPublicModule: addPublicModule,

	// effect bags
	leaf: leaf,
	batch: batch,
	map: F2(map)
};

}();
//import Native.Utils //

var _elm_lang$core$Native_Scheduler = function() {

var MAX_STEPS = 10000;


// TASKS

function succeed(value)
{
	return {
		ctor: '_Task_succeed',
		value: value
	};
}

function fail(error)
{
	return {
		ctor: '_Task_fail',
		value: error
	};
}

function nativeBinding(callback)
{
	return {
		ctor: '_Task_nativeBinding',
		callback: callback,
		cancel: null
	};
}

function andThen(task, callback)
{
	return {
		ctor: '_Task_andThen',
		task: task,
		callback: callback
	};
}

function onError(task, callback)
{
	return {
		ctor: '_Task_onError',
		task: task,
		callback: callback
	};
}

function receive(callback)
{
	return {
		ctor: '_Task_receive',
		callback: callback
	};
}


// PROCESSES

function rawSpawn(task)
{
	var process = {
		ctor: '_Process',
		id: _elm_lang$core$Native_Utils.guid(),
		root: task,
		stack: null,
		mailbox: []
	};

	enqueue(process);

	return process;
}

function spawn(task)
{
	return nativeBinding(function(callback) {
		var process = rawSpawn(task);
		callback(succeed(process));
	});
}

function rawSend(process, msg)
{
	process.mailbox.push(msg);
	enqueue(process);
}

function send(process, msg)
{
	return nativeBinding(function(callback) {
		rawSend(process, msg);
		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function kill(process)
{
	return nativeBinding(function(callback) {
		var root = process.root;
		if (root.ctor === '_Task_nativeBinding' && root.cancel)
		{
			root.cancel();
		}

		process.root = null;

		callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function sleep(time)
{
	return nativeBinding(function(callback) {
		var id = setTimeout(function() {
			callback(succeed(_elm_lang$core$Native_Utils.Tuple0));
		}, time);

		return function() { clearTimeout(id); };
	});
}


// STEP PROCESSES

function step(numSteps, process)
{
	while (numSteps < MAX_STEPS)
	{
		var ctor = process.root.ctor;

		if (ctor === '_Task_succeed')
		{
			while (process.stack && process.stack.ctor === '_Task_onError')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_fail')
		{
			while (process.stack && process.stack.ctor === '_Task_andThen')
			{
				process.stack = process.stack.rest;
			}
			if (process.stack === null)
			{
				break;
			}
			process.root = process.stack.callback(process.root.value);
			process.stack = process.stack.rest;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_andThen')
		{
			process.stack = {
				ctor: '_Task_andThen',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_onError')
		{
			process.stack = {
				ctor: '_Task_onError',
				callback: process.root.callback,
				rest: process.stack
			};
			process.root = process.root.task;
			++numSteps;
			continue;
		}

		if (ctor === '_Task_nativeBinding')
		{
			process.root.cancel = process.root.callback(function(newRoot) {
				process.root = newRoot;
				enqueue(process);
			});

			break;
		}

		if (ctor === '_Task_receive')
		{
			var mailbox = process.mailbox;
			if (mailbox.length === 0)
			{
				break;
			}

			process.root = process.root.callback(mailbox.shift());
			++numSteps;
			continue;
		}

		throw new Error(ctor);
	}

	if (numSteps < MAX_STEPS)
	{
		return numSteps + 1;
	}
	enqueue(process);

	return numSteps;
}


// WORK QUEUE

var working = false;
var workQueue = [];

function enqueue(process)
{
	workQueue.push(process);

	if (!working)
	{
		setTimeout(work, 0);
		working = true;
	}
}

function work()
{
	var numSteps = 0;
	var process;
	while (numSteps < MAX_STEPS && (process = workQueue.shift()))
	{
		numSteps = step(numSteps, process);
	}
	if (!process)
	{
		working = false;
		return;
	}
	setTimeout(work, 0);
}


return {
	succeed: succeed,
	fail: fail,
	nativeBinding: nativeBinding,
	andThen: F2(andThen),
	onError: F2(onError),
	receive: receive,

	spawn: spawn,
	kill: kill,
	sleep: sleep,
	send: F2(send),

	rawSpawn: rawSpawn,
	rawSend: rawSend
};

}();
var _elm_lang$core$Platform$hack = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Platform$sendToSelf = _elm_lang$core$Native_Platform.sendToSelf;
var _elm_lang$core$Platform$sendToApp = _elm_lang$core$Native_Platform.sendToApp;
var _elm_lang$core$Platform$Program = {ctor: 'Program'};
var _elm_lang$core$Platform$Task = {ctor: 'Task'};
var _elm_lang$core$Platform$ProcessId = {ctor: 'ProcessId'};
var _elm_lang$core$Platform$Router = {ctor: 'Router'};

var _elm_lang$core$Platform_Cmd$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Cmd$none = _elm_lang$core$Platform_Cmd$batch(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _elm_lang$core$Platform_Cmd_ops = _elm_lang$core$Platform_Cmd_ops || {};
_elm_lang$core$Platform_Cmd_ops['!'] = F2(
	function (model, commands) {
		return {
			ctor: '_Tuple2',
			_0: model,
			_1: _elm_lang$core$Platform_Cmd$batch(commands)
		};
	});
var _elm_lang$core$Platform_Cmd$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Cmd$Cmd = {ctor: 'Cmd'};

var _elm_lang$core$Platform_Sub$batch = _elm_lang$core$Native_Platform.batch;
var _elm_lang$core$Platform_Sub$none = _elm_lang$core$Platform_Sub$batch(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _elm_lang$core$Platform_Sub$map = _elm_lang$core$Native_Platform.map;
var _elm_lang$core$Platform_Sub$Sub = {ctor: 'Sub'};

var _elm_lang$lazy$Native_Lazy = function() {

function memoize(thunk)
{
    var value;
    var isForced = false;
    return function(tuple0) {
        if (!isForced) {
            value = thunk(tuple0);
            isForced = true;
        }
        return value;
    };
}

return {
    memoize: memoize
};

}();

var _elm_lang$lazy$Lazy$force = function (_p0) {
	var _p1 = _p0;
	return _p1._0(
		{ctor: '_Tuple0'});
};
var _elm_lang$lazy$Lazy$Lazy = function (a) {
	return {ctor: 'Lazy', _0: a};
};
var _elm_lang$lazy$Lazy$lazy = function (thunk) {
	return _elm_lang$lazy$Lazy$Lazy(
		_elm_lang$lazy$Native_Lazy.memoize(thunk));
};
var _elm_lang$lazy$Lazy$map = F2(
	function (f, a) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p2) {
				var _p3 = _p2;
				return f(
					_elm_lang$lazy$Lazy$force(a));
			});
	});
var _elm_lang$lazy$Lazy$map2 = F3(
	function (f, a, b) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p4) {
				var _p5 = _p4;
				return A2(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b));
			});
	});
var _elm_lang$lazy$Lazy$map3 = F4(
	function (f, a, b, c) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p6) {
				var _p7 = _p6;
				return A3(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c));
			});
	});
var _elm_lang$lazy$Lazy$map4 = F5(
	function (f, a, b, c, d) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p8) {
				var _p9 = _p8;
				return A4(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d));
			});
	});
var _elm_lang$lazy$Lazy$map5 = F6(
	function (f, a, b, c, d, e) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p10) {
				var _p11 = _p10;
				return A5(
					f,
					_elm_lang$lazy$Lazy$force(a),
					_elm_lang$lazy$Lazy$force(b),
					_elm_lang$lazy$Lazy$force(c),
					_elm_lang$lazy$Lazy$force(d),
					_elm_lang$lazy$Lazy$force(e));
			});
	});
var _elm_lang$lazy$Lazy$apply = F2(
	function (f, x) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p12) {
				var _p13 = _p12;
				return A2(
					_elm_lang$lazy$Lazy$force,
					f,
					_elm_lang$lazy$Lazy$force(x));
			});
	});
var _elm_lang$lazy$Lazy$andThen = F2(
	function (a, callback) {
		return _elm_lang$lazy$Lazy$lazy(
			function (_p14) {
				var _p15 = _p14;
				return _elm_lang$lazy$Lazy$force(
					callback(
						_elm_lang$lazy$Lazy$force(a)));
			});
	});

//import Maybe, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_String = function() {

function isEmpty(str)
{
	return str.length === 0;
}
function cons(chr, str)
{
	return chr + str;
}
function uncons(str)
{
	var hd = str[0];
	if (hd)
	{
		return _elm_lang$core$Maybe$Just(_elm_lang$core$Native_Utils.Tuple2(_elm_lang$core$Native_Utils.chr(hd), str.slice(1)));
	}
	return _elm_lang$core$Maybe$Nothing;
}
function append(a, b)
{
	return a + b;
}
function concat(strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join('');
}
function length(str)
{
	return str.length;
}
function map(f, str)
{
	var out = str.split('');
	for (var i = out.length; i--; )
	{
		out[i] = f(_elm_lang$core$Native_Utils.chr(out[i]));
	}
	return out.join('');
}
function filter(pred, str)
{
	return str.split('').map(_elm_lang$core$Native_Utils.chr).filter(pred).join('');
}
function reverse(str)
{
	return str.split('').reverse().join('');
}
function foldl(f, b, str)
{
	var len = str.length;
	for (var i = 0; i < len; ++i)
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function foldr(f, b, str)
{
	for (var i = str.length; i--; )
	{
		b = A2(f, _elm_lang$core$Native_Utils.chr(str[i]), b);
	}
	return b;
}
function split(sep, str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(sep));
}
function join(sep, strs)
{
	return _elm_lang$core$Native_List.toArray(strs).join(sep);
}
function repeat(n, str)
{
	var result = '';
	while (n > 0)
	{
		if (n & 1)
		{
			result += str;
		}
		n >>= 1, str += str;
	}
	return result;
}
function slice(start, end, str)
{
	return str.slice(start, end);
}
function left(n, str)
{
	return n < 1 ? '' : str.slice(0, n);
}
function right(n, str)
{
	return n < 1 ? '' : str.slice(-n);
}
function dropLeft(n, str)
{
	return n < 1 ? str : str.slice(n);
}
function dropRight(n, str)
{
	return n < 1 ? str : str.slice(0, -n);
}
function pad(n, chr, str)
{
	var half = (n - str.length) / 2;
	return repeat(Math.ceil(half), chr) + str + repeat(half | 0, chr);
}
function padRight(n, chr, str)
{
	return str + repeat(n - str.length, chr);
}
function padLeft(n, chr, str)
{
	return repeat(n - str.length, chr) + str;
}

function trim(str)
{
	return str.trim();
}
function trimLeft(str)
{
	return str.replace(/^\s+/, '');
}
function trimRight(str)
{
	return str.replace(/\s+$/, '');
}

function words(str)
{
	return _elm_lang$core$Native_List.fromArray(str.trim().split(/\s+/g));
}
function lines(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split(/\r\n|\r|\n/g));
}

function toUpper(str)
{
	return str.toUpperCase();
}
function toLower(str)
{
	return str.toLowerCase();
}

function any(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return true;
		}
	}
	return false;
}
function all(pred, str)
{
	for (var i = str.length; i--; )
	{
		if (!pred(_elm_lang$core$Native_Utils.chr(str[i])))
		{
			return false;
		}
	}
	return true;
}

function contains(sub, str)
{
	return str.indexOf(sub) > -1;
}
function startsWith(sub, str)
{
	return str.indexOf(sub) === 0;
}
function endsWith(sub, str)
{
	return str.length >= sub.length &&
		str.lastIndexOf(sub) === str.length - sub.length;
}
function indexes(sub, str)
{
	var subLen = sub.length;
	var i = 0;
	var is = [];
	while ((i = str.indexOf(sub, i)) > -1)
	{
		is.push(i);
		i = i + subLen;
	}
	return _elm_lang$core$Native_List.fromArray(is);
}

function toInt(s)
{
	var len = s.length;
	if (len === 0)
	{
		return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int" );
	}
	var start = 0;
	if (s[0] === '-')
	{
		if (len === 1)
		{
			return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int" );
		}
		start = 1;
	}
	for (var i = start; i < len; ++i)
	{
		var c = s[i];
		if (c < '0' || '9' < c)
		{
			return _elm_lang$core$Result$Err("could not convert string '" + s + "' to an Int" );
		}
	}
	return _elm_lang$core$Result$Ok(parseInt(s, 10));
}

function toFloat(s)
{
	var len = s.length;
	if (len === 0)
	{
		return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float" );
	}
	var start = 0;
	if (s[0] === '-')
	{
		if (len === 1)
		{
			return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float" );
		}
		start = 1;
	}
	var dotCount = 0;
	for (var i = start; i < len; ++i)
	{
		var c = s[i];
		if ('0' <= c && c <= '9')
		{
			continue;
		}
		if (c === '.')
		{
			dotCount += 1;
			if (dotCount <= 1)
			{
				continue;
			}
		}
		return _elm_lang$core$Result$Err("could not convert string '" + s + "' to a Float" );
	}
	return _elm_lang$core$Result$Ok(parseFloat(s));
}

function toList(str)
{
	return _elm_lang$core$Native_List.fromArray(str.split('').map(_elm_lang$core$Native_Utils.chr));
}
function fromList(chars)
{
	return _elm_lang$core$Native_List.toArray(chars).join('');
}

return {
	isEmpty: isEmpty,
	cons: F2(cons),
	uncons: uncons,
	append: F2(append),
	concat: concat,
	length: length,
	map: F2(map),
	filter: F2(filter),
	reverse: reverse,
	foldl: F3(foldl),
	foldr: F3(foldr),

	split: F2(split),
	join: F2(join),
	repeat: F2(repeat),

	slice: F3(slice),
	left: F2(left),
	right: F2(right),
	dropLeft: F2(dropLeft),
	dropRight: F2(dropRight),

	pad: F3(pad),
	padLeft: F3(padLeft),
	padRight: F3(padRight),

	trim: trim,
	trimLeft: trimLeft,
	trimRight: trimRight,

	words: words,
	lines: lines,

	toUpper: toUpper,
	toLower: toLower,

	any: F2(any),
	all: F2(all),

	contains: F2(contains),
	startsWith: F2(startsWith),
	endsWith: F2(endsWith),
	indexes: F2(indexes),

	toInt: toInt,
	toFloat: toFloat,
	toList: toList,
	fromList: fromList
};

}();
//import Native.Utils //

var _elm_lang$core$Native_Char = function() {

return {
	fromCode: function(c) { return _elm_lang$core$Native_Utils.chr(String.fromCharCode(c)); },
	toCode: function(c) { return c.charCodeAt(0); },
	toUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toUpperCase()); },
	toLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLowerCase()); },
	toLocaleUpper: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleUpperCase()); },
	toLocaleLower: function(c) { return _elm_lang$core$Native_Utils.chr(c.toLocaleLowerCase()); }
};

}();
var _elm_lang$core$Char$fromCode = _elm_lang$core$Native_Char.fromCode;
var _elm_lang$core$Char$toCode = _elm_lang$core$Native_Char.toCode;
var _elm_lang$core$Char$toLocaleLower = _elm_lang$core$Native_Char.toLocaleLower;
var _elm_lang$core$Char$toLocaleUpper = _elm_lang$core$Native_Char.toLocaleUpper;
var _elm_lang$core$Char$toLower = _elm_lang$core$Native_Char.toLower;
var _elm_lang$core$Char$toUpper = _elm_lang$core$Native_Char.toUpper;
var _elm_lang$core$Char$isBetween = F3(
	function (low, high, $char) {
		var code = _elm_lang$core$Char$toCode($char);
		return (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(low)) > -1) && (_elm_lang$core$Native_Utils.cmp(
			code,
			_elm_lang$core$Char$toCode(high)) < 1);
	});
var _elm_lang$core$Char$isUpper = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('A'),
	_elm_lang$core$Native_Utils.chr('Z'));
var _elm_lang$core$Char$isLower = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('a'),
	_elm_lang$core$Native_Utils.chr('z'));
var _elm_lang$core$Char$isDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('9'));
var _elm_lang$core$Char$isOctDigit = A2(
	_elm_lang$core$Char$isBetween,
	_elm_lang$core$Native_Utils.chr('0'),
	_elm_lang$core$Native_Utils.chr('7'));
var _elm_lang$core$Char$isHexDigit = function ($char) {
	return _elm_lang$core$Char$isDigit($char) || (A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('a'),
		_elm_lang$core$Native_Utils.chr('f'),
		$char) || A3(
		_elm_lang$core$Char$isBetween,
		_elm_lang$core$Native_Utils.chr('A'),
		_elm_lang$core$Native_Utils.chr('F'),
		$char));
};

var _elm_lang$core$String$fromList = _elm_lang$core$Native_String.fromList;
var _elm_lang$core$String$toList = _elm_lang$core$Native_String.toList;
var _elm_lang$core$String$toFloat = _elm_lang$core$Native_String.toFloat;
var _elm_lang$core$String$toInt = _elm_lang$core$Native_String.toInt;
var _elm_lang$core$String$indices = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$indexes = _elm_lang$core$Native_String.indexes;
var _elm_lang$core$String$endsWith = _elm_lang$core$Native_String.endsWith;
var _elm_lang$core$String$startsWith = _elm_lang$core$Native_String.startsWith;
var _elm_lang$core$String$contains = _elm_lang$core$Native_String.contains;
var _elm_lang$core$String$all = _elm_lang$core$Native_String.all;
var _elm_lang$core$String$any = _elm_lang$core$Native_String.any;
var _elm_lang$core$String$toLower = _elm_lang$core$Native_String.toLower;
var _elm_lang$core$String$toUpper = _elm_lang$core$Native_String.toUpper;
var _elm_lang$core$String$lines = _elm_lang$core$Native_String.lines;
var _elm_lang$core$String$words = _elm_lang$core$Native_String.words;
var _elm_lang$core$String$trimRight = _elm_lang$core$Native_String.trimRight;
var _elm_lang$core$String$trimLeft = _elm_lang$core$Native_String.trimLeft;
var _elm_lang$core$String$trim = _elm_lang$core$Native_String.trim;
var _elm_lang$core$String$padRight = _elm_lang$core$Native_String.padRight;
var _elm_lang$core$String$padLeft = _elm_lang$core$Native_String.padLeft;
var _elm_lang$core$String$pad = _elm_lang$core$Native_String.pad;
var _elm_lang$core$String$dropRight = _elm_lang$core$Native_String.dropRight;
var _elm_lang$core$String$dropLeft = _elm_lang$core$Native_String.dropLeft;
var _elm_lang$core$String$right = _elm_lang$core$Native_String.right;
var _elm_lang$core$String$left = _elm_lang$core$Native_String.left;
var _elm_lang$core$String$slice = _elm_lang$core$Native_String.slice;
var _elm_lang$core$String$repeat = _elm_lang$core$Native_String.repeat;
var _elm_lang$core$String$join = _elm_lang$core$Native_String.join;
var _elm_lang$core$String$split = _elm_lang$core$Native_String.split;
var _elm_lang$core$String$foldr = _elm_lang$core$Native_String.foldr;
var _elm_lang$core$String$foldl = _elm_lang$core$Native_String.foldl;
var _elm_lang$core$String$reverse = _elm_lang$core$Native_String.reverse;
var _elm_lang$core$String$filter = _elm_lang$core$Native_String.filter;
var _elm_lang$core$String$map = _elm_lang$core$Native_String.map;
var _elm_lang$core$String$length = _elm_lang$core$Native_String.length;
var _elm_lang$core$String$concat = _elm_lang$core$Native_String.concat;
var _elm_lang$core$String$append = _elm_lang$core$Native_String.append;
var _elm_lang$core$String$uncons = _elm_lang$core$Native_String.uncons;
var _elm_lang$core$String$cons = _elm_lang$core$Native_String.cons;
var _elm_lang$core$String$fromChar = function ($char) {
	return A2(_elm_lang$core$String$cons, $char, '');
};
var _elm_lang$core$String$isEmpty = _elm_lang$core$Native_String.isEmpty;

//import Maybe, Native.List //

var _elm_lang$core$Native_Regex = function() {

function escape(str)
{
	return str.replace(/[-\/\\^$*+?.()|[\]{}]/g, '\\$&');
}
function caseInsensitive(re)
{
	return new RegExp(re.source, 'gi');
}
function regex(raw)
{
	return new RegExp(raw, 'g');
}

function contains(re, string)
{
	return string.match(re) !== null;
}

function find(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var out = [];
	var number = 0;
	var string = str;
	var lastIndex = re.lastIndex;
	var prevLastIndex = -1;
	var result;
	while (number++ < n && (result = re.exec(string)))
	{
		if (prevLastIndex === re.lastIndex) break;
		var i = result.length - 1;
		var subs = new Array(i);
		while (i > 0)
		{
			var submatch = result[i];
			subs[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		out.push({
			match: result[0],
			submatches: _elm_lang$core$Native_List.fromArray(subs),
			index: result.index,
			number: number
		});
		prevLastIndex = re.lastIndex;
	}
	re.lastIndex = lastIndex;
	return _elm_lang$core$Native_List.fromArray(out);
}

function replace(n, re, replacer, string)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	var count = 0;
	function jsReplacer(match)
	{
		if (count++ >= n)
		{
			return match;
		}
		var i = arguments.length - 3;
		var submatches = new Array(i);
		while (i > 0)
		{
			var submatch = arguments[i];
			submatches[--i] = submatch === undefined
				? _elm_lang$core$Maybe$Nothing
				: _elm_lang$core$Maybe$Just(submatch);
		}
		return replacer({
			match: match,
			submatches: _elm_lang$core$Native_List.fromArray(submatches),
			index: arguments[i - 1],
			number: count
		});
	}
	return string.replace(re, jsReplacer);
}

function split(n, re, str)
{
	n = n.ctor === 'All' ? Infinity : n._0;
	if (n === Infinity)
	{
		return _elm_lang$core$Native_List.fromArray(str.split(re));
	}
	var string = str;
	var result;
	var out = [];
	var start = re.lastIndex;
	while (n--)
	{
		if (!(result = re.exec(string))) break;
		out.push(string.slice(start, result.index));
		start = re.lastIndex;
	}
	out.push(string.slice(start));
	return _elm_lang$core$Native_List.fromArray(out);
}

return {
	regex: regex,
	caseInsensitive: caseInsensitive,
	escape: escape,

	contains: F2(contains),
	find: F3(find),
	replace: F4(replace),
	split: F3(split)
};

}();

var _elm_lang$core$Regex$split = _elm_lang$core$Native_Regex.split;
var _elm_lang$core$Regex$replace = _elm_lang$core$Native_Regex.replace;
var _elm_lang$core$Regex$find = _elm_lang$core$Native_Regex.find;
var _elm_lang$core$Regex$contains = _elm_lang$core$Native_Regex.contains;
var _elm_lang$core$Regex$caseInsensitive = _elm_lang$core$Native_Regex.caseInsensitive;
var _elm_lang$core$Regex$regex = _elm_lang$core$Native_Regex.regex;
var _elm_lang$core$Regex$escape = _elm_lang$core$Native_Regex.escape;
var _elm_lang$core$Regex$Match = F4(
	function (a, b, c, d) {
		return {match: a, submatches: b, index: c, number: d};
	});
var _elm_lang$core$Regex$Regex = {ctor: 'Regex'};
var _elm_lang$core$Regex$AtMost = function (a) {
	return {ctor: 'AtMost', _0: a};
};
var _elm_lang$core$Regex$All = {ctor: 'All'};

var _Bogdanp$elm_combine$Combine$app = function (p) {
	var _p0 = p;
	if (_p0.ctor === 'Parser') {
		return _p0._0;
	} else {
		return _elm_lang$lazy$Lazy$force(_p0._0);
	}
};
var _Bogdanp$elm_combine$Combine$parse = F2(
	function (p, input) {
		return A2(
			_Bogdanp$elm_combine$Combine$app,
			p,
			{input: input, position: 0});
	});
var _Bogdanp$elm_combine$Combine$Context = F2(
	function (a, b) {
		return {input: a, position: b};
	});
var _Bogdanp$elm_combine$Combine$RecursiveParser = function (a) {
	return {ctor: 'RecursiveParser', _0: a};
};
var _Bogdanp$elm_combine$Combine$rec = function (t) {
	return _Bogdanp$elm_combine$Combine$RecursiveParser(
		_elm_lang$lazy$Lazy$lazy(
			function (_p1) {
				var _p2 = _p1;
				return _Bogdanp$elm_combine$Combine$app(
					t(
						{ctor: '_Tuple0'}));
			}));
};
var _Bogdanp$elm_combine$Combine$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _Bogdanp$elm_combine$Combine$primitive = _Bogdanp$elm_combine$Combine$Parser;
var _Bogdanp$elm_combine$Combine$bimap = F3(
	function (fok, ferr, p) {
		return _Bogdanp$elm_combine$Combine$Parser(
			function (cx) {
				var _p3 = A2(_Bogdanp$elm_combine$Combine$app, p, cx);
				if (_p3._0.ctor === 'Ok') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Result$Ok(
							fok(_p3._0._0)),
						_1: _p3._1
					};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Result$Err(
							ferr(_p3._0._0)),
						_1: _p3._1
					};
				}
			});
	});
var _Bogdanp$elm_combine$Combine$map = F2(
	function (f, p) {
		return A3(_Bogdanp$elm_combine$Combine$bimap, f, _elm_lang$core$Basics$identity, p);
	});
var _Bogdanp$elm_combine$Combine$mapError = _Bogdanp$elm_combine$Combine$bimap(_elm_lang$core$Basics$identity);
var _Bogdanp$elm_combine$Combine$andThen = F2(
	function (p, f) {
		return _Bogdanp$elm_combine$Combine$Parser(
			function (cx) {
				var _p4 = A2(_Bogdanp$elm_combine$Combine$app, p, cx);
				if (_p4._0.ctor === 'Ok') {
					return A2(
						_Bogdanp$elm_combine$Combine$app,
						f(_p4._0._0),
						_p4._1);
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Result$Err(_p4._0._0),
						_1: _p4._1
					};
				}
			});
	});
var _Bogdanp$elm_combine$Combine$sequence = function (ps) {
	var accumulate = F3(
		function (acc, ps, cx) {
			accumulate:
			while (true) {
				var _p5 = ps;
				if (_p5.ctor === '[]') {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Result$Ok(
							_elm_lang$core$List$reverse(acc)),
						_1: cx
					};
				} else {
					var _p6 = A2(_Bogdanp$elm_combine$Combine$app, _p5._0, cx);
					if (_p6._0.ctor === 'Ok') {
						var _v6 = A2(_elm_lang$core$List_ops['::'], _p6._0._0, acc),
							_v7 = _p5._1,
							_v8 = _p6._1;
						acc = _v6;
						ps = _v7;
						cx = _v8;
						continue accumulate;
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Result$Err(_p6._0._0),
							_1: _p6._1
						};
					}
				}
			}
		});
	return _Bogdanp$elm_combine$Combine$Parser(
		function (cx) {
			return A3(
				accumulate,
				_elm_lang$core$Native_List.fromArray(
					[]),
				ps,
				cx);
		});
};
var _Bogdanp$elm_combine$Combine$fail = function (ms) {
	return _Bogdanp$elm_combine$Combine$Parser(
		function (cx) {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Result$Err(ms),
				_1: cx
			};
		});
};
var _Bogdanp$elm_combine$Combine$succeed = function (r) {
	return _Bogdanp$elm_combine$Combine$Parser(
		function (cx) {
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Result$Ok(r),
				_1: cx
			};
		});
};
var _Bogdanp$elm_combine$Combine$andMap = F2(
	function (lp, rp) {
		return A2(
			_Bogdanp$elm_combine$Combine$andThen,
			lp,
			function (f) {
				return A2(
					_Bogdanp$elm_combine$Combine$andThen,
					rp,
					function (x) {
						return _Bogdanp$elm_combine$Combine$succeed(
							f(x));
					});
			});
	});
var _Bogdanp$elm_combine$Combine$between = F3(
	function (lp, rp, p) {
		return A2(
			_Bogdanp$elm_combine$Combine$andMap,
			A2(
				_Bogdanp$elm_combine$Combine$andMap,
				A2(
					_Bogdanp$elm_combine$Combine$map,
					_elm_lang$core$Basics$flip(
						function (_p7) {
							return _elm_lang$core$Basics$always(
								_elm_lang$core$Basics$always(_p7));
						}),
					lp),
				p),
			rp);
	});
var _Bogdanp$elm_combine$Combine$skip = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine$andThen,
		p,
		_elm_lang$core$Basics$always(
			_Bogdanp$elm_combine$Combine$succeed(
				{ctor: '_Tuple0'})));
};
var _Bogdanp$elm_combine$Combine$count = F2(
	function (n, p) {
		var accumulate = F2(
			function (x, acc) {
				return (_elm_lang$core$Native_Utils.cmp(x, 0) < 1) ? _Bogdanp$elm_combine$Combine$succeed(
					_elm_lang$core$List$reverse(acc)) : A2(
					_Bogdanp$elm_combine$Combine$andThen,
					p,
					function (res) {
						return A2(
							accumulate,
							x - 1,
							A2(_elm_lang$core$List_ops['::'], res, acc));
					});
			});
		return A2(
			accumulate,
			n,
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _Bogdanp$elm_combine$Combine$string = function (s) {
	return _Bogdanp$elm_combine$Combine$Parser(
		function (cx) {
			if (A2(_elm_lang$core$String$startsWith, s, cx.input)) {
				var len = _elm_lang$core$String$length(s);
				var rem = A2(_elm_lang$core$String$dropLeft, len, cx.input);
				var pos = cx.position + len;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Result$Ok(s),
					_1: _elm_lang$core$Native_Utils.update(
						cx,
						{input: rem, position: pos})
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Result$Err(
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$core$Basics_ops['++'],
								'expected ',
								_elm_lang$core$Basics$toString(s))
							])),
					_1: cx
				};
			}
		});
};
var _Bogdanp$elm_combine$Combine$parens = A2(
	_Bogdanp$elm_combine$Combine$between,
	_Bogdanp$elm_combine$Combine$string('('),
	_Bogdanp$elm_combine$Combine$string(')'));
var _Bogdanp$elm_combine$Combine$braces = A2(
	_Bogdanp$elm_combine$Combine$between,
	_Bogdanp$elm_combine$Combine$string('{'),
	_Bogdanp$elm_combine$Combine$string('}'));
var _Bogdanp$elm_combine$Combine$brackets = A2(
	_Bogdanp$elm_combine$Combine$between,
	_Bogdanp$elm_combine$Combine$string('['),
	_Bogdanp$elm_combine$Combine$string(']'));
var _Bogdanp$elm_combine$Combine$regex = function (pattern) {
	var pattern$ = A2(_elm_lang$core$String$startsWith, '^', pattern) ? pattern : A2(_elm_lang$core$Basics_ops['++'], '^', pattern);
	return _Bogdanp$elm_combine$Combine$Parser(
		function (cx) {
			var _p8 = A3(
				_elm_lang$core$Regex$find,
				_elm_lang$core$Regex$AtMost(1),
				_elm_lang$core$Regex$regex(pattern$),
				cx.input);
			if ((_p8.ctor === '::') && (_p8._1.ctor === '[]')) {
				var _p9 = _p8._0;
				var len = _elm_lang$core$String$length(_p9.match);
				var rem = A2(_elm_lang$core$String$dropLeft, len, cx.input);
				var pos = cx.position + len;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Result$Ok(_p9.match),
					_1: _elm_lang$core$Native_Utils.update(
						cx,
						{input: rem, position: pos})
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Result$Err(
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$core$Basics_ops['++'],
								'expected input matching Regexp /',
								A2(_elm_lang$core$Basics_ops['++'], pattern$, '/'))
							])),
					_1: cx
				};
			}
		});
};
var _Bogdanp$elm_combine$Combine$while = function (pred) {
	var accumulate = F2(
		function (acc, cx) {
			accumulate:
			while (true) {
				var _p10 = _elm_lang$core$String$uncons(cx.input);
				if (_p10.ctor === 'Just') {
					var _p11 = _p10._0._0;
					if (pred(_p11)) {
						var pos = cx.position + 1;
						var c = A2(_elm_lang$core$String$cons, _p11, '');
						var _v11 = A2(_elm_lang$core$Basics_ops['++'], acc, c),
							_v12 = _elm_lang$core$Native_Utils.update(
							cx,
							{input: _p10._0._1, position: pos});
						acc = _v11;
						cx = _v12;
						continue accumulate;
					} else {
						return {ctor: '_Tuple2', _0: acc, _1: cx};
					}
				} else {
					return {ctor: '_Tuple2', _0: acc, _1: cx};
				}
			}
		});
	return _Bogdanp$elm_combine$Combine$Parser(
		function (cx) {
			var _p12 = A2(accumulate, '', cx);
			var res = _p12._0;
			var cx$ = _p12._1;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Result$Ok(res),
				_1: cx$
			};
		});
};
var _Bogdanp$elm_combine$Combine$end = _Bogdanp$elm_combine$Combine$Parser(
	function (cx) {
		return _elm_lang$core$Native_Utils.eq(cx.input, '') ? {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Result$Ok(
				{ctor: '_Tuple0'}),
			_1: cx
		} : {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Result$Err(
				_elm_lang$core$Native_List.fromArray(
					['expected end of input'])),
			_1: cx
		};
	});
var _Bogdanp$elm_combine$Combine$or = F2(
	function (lp, rp) {
		return _Bogdanp$elm_combine$Combine$Parser(
			function (cx) {
				var res = A2(_Bogdanp$elm_combine$Combine$app, lp, cx);
				var _p13 = res;
				if (_p13._0.ctor === 'Ok') {
					return res;
				} else {
					var res$ = A2(_Bogdanp$elm_combine$Combine$app, rp, cx);
					var _p14 = res$;
					if (_p14._0.ctor === 'Ok') {
						return res$;
					} else {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Result$Err(
								A2(_elm_lang$core$Basics_ops['++'], _p13._0._0, _p14._0._0)),
							_1: cx
						};
					}
				}
			});
	});
var _Bogdanp$elm_combine$Combine$choice = function (xs) {
	return A3(
		_elm_lang$core$List$foldr,
		_Bogdanp$elm_combine$Combine$or,
		_Bogdanp$elm_combine$Combine$fail(
			_elm_lang$core$Native_List.fromArray(
				[])),
		xs);
};
var _Bogdanp$elm_combine$Combine$optional = F2(
	function (res, p) {
		return A2(
			_Bogdanp$elm_combine$Combine$or,
			p,
			_Bogdanp$elm_combine$Combine$succeed(res));
	});
var _Bogdanp$elm_combine$Combine$chainl = F2(
	function (p, op) {
		var accumulate = function (x) {
			return A2(
				_Bogdanp$elm_combine$Combine$or,
				A2(
					_Bogdanp$elm_combine$Combine$andThen,
					op,
					function (f) {
						return A2(
							_Bogdanp$elm_combine$Combine$andThen,
							p,
							function (y) {
								return accumulate(
									A2(f, x, y));
							});
					}),
				_Bogdanp$elm_combine$Combine$succeed(x));
		};
		return A2(_Bogdanp$elm_combine$Combine$andThen, p, accumulate);
	});
var _Bogdanp$elm_combine$Combine$chainr = F2(
	function (p, op) {
		var accumulate = function (x) {
			return A2(
				_Bogdanp$elm_combine$Combine$or,
				A2(
					_Bogdanp$elm_combine$Combine$andThen,
					op,
					function (f) {
						return A2(
							_Bogdanp$elm_combine$Combine$andThen,
							A2(_Bogdanp$elm_combine$Combine$andThen, p, accumulate),
							function (y) {
								return _Bogdanp$elm_combine$Combine$succeed(
									A2(f, x, y));
							});
					}),
				_Bogdanp$elm_combine$Combine$succeed(x));
		};
		return A2(_Bogdanp$elm_combine$Combine$andThen, p, accumulate);
	});
var _Bogdanp$elm_combine$Combine$maybe = function (p) {
	return _Bogdanp$elm_combine$Combine$Parser(
		function (cx) {
			var _p15 = A2(_Bogdanp$elm_combine$Combine$app, p, cx);
			if ((_p15.ctor === '_Tuple2') && (_p15._0.ctor === 'Ok')) {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Result$Ok(
						_elm_lang$core$Maybe$Just(_p15._0._0)),
					_1: _p15._1
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing),
					_1: cx
				};
			}
		});
};
var _Bogdanp$elm_combine$Combine$many = function (p) {
	var accumulate = F2(
		function (acc, cx) {
			accumulate:
			while (true) {
				var _p16 = A2(_Bogdanp$elm_combine$Combine$app, p, cx);
				if ((_p16.ctor === '_Tuple2') && (_p16._0.ctor === 'Ok')) {
					var _p17 = _p16._1;
					if (_elm_lang$core$Native_Utils.eq(cx, _p17)) {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$List$reverse(acc),
							_1: cx
						};
					} else {
						var _v17 = A2(_elm_lang$core$List_ops['::'], _p16._0._0, acc),
							_v18 = _p17;
						acc = _v17;
						cx = _v18;
						continue accumulate;
					}
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$List$reverse(acc),
						_1: cx
					};
				}
			}
		});
	return _Bogdanp$elm_combine$Combine$Parser(
		function (cx) {
			var _p18 = A2(
				accumulate,
				_elm_lang$core$Native_List.fromArray(
					[]),
				cx);
			var res = _p18._0;
			var cx$ = _p18._1;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Result$Ok(res),
				_1: cx$
			};
		});
};
var _Bogdanp$elm_combine$Combine$many1 = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine$andMap,
		A2(
			_Bogdanp$elm_combine$Combine$map,
			F2(
				function (x, y) {
					return A2(_elm_lang$core$List_ops['::'], x, y);
				}),
			p),
		_Bogdanp$elm_combine$Combine$many(p));
};
var _Bogdanp$elm_combine$Combine$skipMany1 = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine$andThen,
		_Bogdanp$elm_combine$Combine$many1(
			_Bogdanp$elm_combine$Combine$skip(p)),
		_elm_lang$core$Basics$always(
			_Bogdanp$elm_combine$Combine$succeed(
				{ctor: '_Tuple0'})));
};
var _Bogdanp$elm_combine$Combine$sepBy1 = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine$andMap,
			A2(
				_Bogdanp$elm_combine$Combine$map,
				F2(
					function (x, y) {
						return A2(_elm_lang$core$List_ops['::'], x, y);
					}),
				p),
			_Bogdanp$elm_combine$Combine$many(
				A2(
					_Bogdanp$elm_combine$Combine$andMap,
					A2(
						_Bogdanp$elm_combine$Combine$map,
						_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always),
						sep),
					p)));
	});
var _Bogdanp$elm_combine$Combine$sepBy = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine$or,
			A2(_Bogdanp$elm_combine$Combine$sepBy1, sep, p),
			_Bogdanp$elm_combine$Combine$succeed(
				_elm_lang$core$Native_List.fromArray(
					[])));
	});
var _Bogdanp$elm_combine$Combine$sepEndBy1 = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine$andMap,
			A2(
				_Bogdanp$elm_combine$Combine$map,
				_elm_lang$core$Basics$always,
				A2(_Bogdanp$elm_combine$Combine$sepBy1, sep, p)),
			_Bogdanp$elm_combine$Combine$maybe(sep));
	});
var _Bogdanp$elm_combine$Combine$sepEndBy = F2(
	function (sep, p) {
		return A2(
			_Bogdanp$elm_combine$Combine$or,
			A2(_Bogdanp$elm_combine$Combine$sepEndBy1, sep, p),
			_Bogdanp$elm_combine$Combine$succeed(
				_elm_lang$core$Native_List.fromArray(
					[])));
	});
var _Bogdanp$elm_combine$Combine$skipMany = function (p) {
	return A2(
		_Bogdanp$elm_combine$Combine$andThen,
		_Bogdanp$elm_combine$Combine$many(
			_Bogdanp$elm_combine$Combine$skip(p)),
		_elm_lang$core$Basics$always(
			_Bogdanp$elm_combine$Combine$succeed(
				{ctor: '_Tuple0'})));
};
var _Bogdanp$elm_combine$Combine$manyTill = F2(
	function (p, end) {
		var accumulate = F2(
			function (acc, cx) {
				accumulate:
				while (true) {
					var _p19 = A2(_Bogdanp$elm_combine$Combine$app, end, cx);
					if (_p19._0.ctor === 'Ok') {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Result$Ok(
								_elm_lang$core$List$reverse(acc)),
							_1: _p19._1
						};
					} else {
						var _p20 = A2(_Bogdanp$elm_combine$Combine$app, p, cx);
						if ((_p20.ctor === '_Tuple2') && (_p20._0.ctor === 'Ok')) {
							var _v21 = A2(_elm_lang$core$List_ops['::'], _p20._0._0, acc),
								_v22 = _p20._1;
							acc = _v21;
							cx = _v22;
							continue accumulate;
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Result$Err(_p19._0._0),
								_1: _p19._1
							};
						}
					}
				}
			});
		return _Bogdanp$elm_combine$Combine$Parser(
			accumulate(
				_elm_lang$core$Native_List.fromArray(
					[])));
	});

var _Bogdanp$elm_combine$Combine_Infix_ops = _Bogdanp$elm_combine$Combine_Infix_ops || {};
_Bogdanp$elm_combine$Combine_Infix_ops['<|>'] = _Bogdanp$elm_combine$Combine$or;
var _Bogdanp$elm_combine$Combine_Infix_ops = _Bogdanp$elm_combine$Combine_Infix_ops || {};
_Bogdanp$elm_combine$Combine_Infix_ops['*>'] = F2(
	function (lp, rp) {
		return A2(
			_Bogdanp$elm_combine$Combine$andMap,
			A2(
				_Bogdanp$elm_combine$Combine$map,
				_elm_lang$core$Basics$flip(_elm_lang$core$Basics$always),
				lp),
			rp);
	});
var _Bogdanp$elm_combine$Combine_Infix_ops = _Bogdanp$elm_combine$Combine_Infix_ops || {};
_Bogdanp$elm_combine$Combine_Infix_ops['<*'] = F2(
	function (lp, rp) {
		return A2(
			_Bogdanp$elm_combine$Combine$andMap,
			A2(_Bogdanp$elm_combine$Combine$map, _elm_lang$core$Basics$always, lp),
			rp);
	});
var _Bogdanp$elm_combine$Combine_Infix_ops = _Bogdanp$elm_combine$Combine_Infix_ops || {};
_Bogdanp$elm_combine$Combine_Infix_ops['<?>'] = F2(
	function (p, m) {
		return A2(
			_Bogdanp$elm_combine$Combine$mapError,
			function (_p0) {
				return _elm_lang$core$Native_List.fromArray(
					[m]);
			},
			p);
	});
var _Bogdanp$elm_combine$Combine_Infix_ops = _Bogdanp$elm_combine$Combine_Infix_ops || {};
_Bogdanp$elm_combine$Combine_Infix_ops['<$'] = function (res) {
	return _Bogdanp$elm_combine$Combine$map(
		function (_p1) {
			return res;
		});
};
var _Bogdanp$elm_combine$Combine_Infix_ops = _Bogdanp$elm_combine$Combine_Infix_ops || {};
_Bogdanp$elm_combine$Combine_Infix_ops['<*>'] = _Bogdanp$elm_combine$Combine$andMap;
var _Bogdanp$elm_combine$Combine_Infix_ops = _Bogdanp$elm_combine$Combine_Infix_ops || {};
_Bogdanp$elm_combine$Combine_Infix_ops['<$>'] = _Bogdanp$elm_combine$Combine$map;

var _Bogdanp$elm_combine$Combine_Char$crlf = A2(
	_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
	A2(
		_Bogdanp$elm_combine$Combine_Infix_ops['<$'],
		_elm_lang$core$Native_Utils.chr('\n'),
		_Bogdanp$elm_combine$Combine$regex('\r\n')),
	'expected crlf');
var _Bogdanp$elm_combine$Combine_Char$satisfy = function (pred) {
	return _Bogdanp$elm_combine$Combine$primitive(
		function (cx) {
			var message = 'could not satisfy predicate';
			var _p0 = _elm_lang$core$String$uncons(cx.input);
			if (_p0.ctor === 'Just') {
				var _p1 = _p0._0._0;
				return pred(_p1) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Result$Ok(_p1),
					_1: _elm_lang$core$Native_Utils.update(
						cx,
						{input: _p0._0._1, position: cx.position + 1})
				} : {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Result$Err(
						_elm_lang$core$Native_List.fromArray(
							[message])),
					_1: cx
				};
			} else {
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Result$Err(
						_elm_lang$core$Native_List.fromArray(
							[message])),
					_1: cx
				};
			}
		});
};
var _Bogdanp$elm_combine$Combine_Char$char = function (c) {
	return A2(
		_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
		_Bogdanp$elm_combine$Combine_Char$satisfy(
			F2(
				function (x, y) {
					return _elm_lang$core$Native_Utils.eq(x, y);
				})(c)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected ',
			_elm_lang$core$Basics$toString(c)));
};
var _Bogdanp$elm_combine$Combine_Char$anyChar = A2(
	_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		_elm_lang$core$Basics$always(true)),
	'expected any character');
var _Bogdanp$elm_combine$Combine_Char$oneOf = function (cs) {
	return A2(
		_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
		_Bogdanp$elm_combine$Combine_Char$satisfy(
			A2(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, cs)),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected one of ',
			_elm_lang$core$Basics$toString(cs)));
};
var _Bogdanp$elm_combine$Combine_Char$noneOf = function (cs) {
	return A2(
		_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
		_Bogdanp$elm_combine$Combine_Char$satisfy(
			function (_p2) {
				return _elm_lang$core$Basics$not(
					A3(_elm_lang$core$Basics$flip, _elm_lang$core$List$member, cs, _p2));
			}),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'expected none of ',
			_elm_lang$core$Basics$toString(cs)));
};
var _Bogdanp$elm_combine$Combine_Char$space = A2(
	_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr(' '))),
	'expected space');
var _Bogdanp$elm_combine$Combine_Char$tab = A2(
	_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr('\t'))),
	'expected tab');
var _Bogdanp$elm_combine$Combine_Char$newline = A2(
	_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(
		F2(
			function (x, y) {
				return _elm_lang$core$Native_Utils.eq(x, y);
			})(
			_elm_lang$core$Native_Utils.chr('\n'))),
	'expected newline');
var _Bogdanp$elm_combine$Combine_Char$eol = A2(_Bogdanp$elm_combine$Combine_Infix_ops['<|>'], _Bogdanp$elm_combine$Combine_Char$newline, _Bogdanp$elm_combine$Combine_Char$crlf);
var _Bogdanp$elm_combine$Combine_Char$lower = A2(
	_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isLower),
	'expected a lowercase character');
var _Bogdanp$elm_combine$Combine_Char$upper = A2(
	_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isUpper),
	'expected an uppercase character');
var _Bogdanp$elm_combine$Combine_Char$digit = A2(
	_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isDigit),
	'expected a digit');
var _Bogdanp$elm_combine$Combine_Char$octDigit = A2(
	_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isOctDigit),
	'expected an octal digit');
var _Bogdanp$elm_combine$Combine_Char$hexDigit = A2(
	_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
	_Bogdanp$elm_combine$Combine_Char$satisfy(_elm_lang$core$Char$isHexDigit),
	'expected a hexadecimal digit');

var _Bogdanp$elm_combine$Combine_Num$digit = function () {
	var toDigit = function (c) {
		return _elm_lang$core$Char$toCode(c) - _elm_lang$core$Char$toCode(
			_elm_lang$core$Native_Utils.chr('0'));
	};
	return A2(
		_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
		A2(_Bogdanp$elm_combine$Combine_Infix_ops['<$>'], toDigit, _Bogdanp$elm_combine$Combine_Char$digit),
		'expected a digit');
}();
var _Bogdanp$elm_combine$Combine_Num$sign = A2(
	_Bogdanp$elm_combine$Combine$optional,
	1,
	_Bogdanp$elm_combine$Combine$choice(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_Bogdanp$elm_combine$Combine_Infix_ops['<$'],
				1,
				_Bogdanp$elm_combine$Combine$string('+')),
				A2(
				_Bogdanp$elm_combine$Combine_Infix_ops['<$'],
				-1,
				_Bogdanp$elm_combine$Combine$string('-'))
			])));
var _Bogdanp$elm_combine$Combine_Num$unwrap = F2(
	function (f, s) {
		var _p0 = f(s);
		if (_p0.ctor === 'Ok') {
			return _p0._0;
		} else {
			return _elm_lang$core$Native_Utils.crashCase(
				'Combine.Num',
				{
					start: {line: 19, column: 3},
					end: {line: 24, column: 73}
				},
				_p0)(
				A2(
					_elm_lang$core$Basics_ops['++'],
					'impossible state in Combine.Num.unwrap: ',
					_elm_lang$core$Basics$toString(_p0._0)));
		}
	});
var _Bogdanp$elm_combine$Combine_Num$toInt = _Bogdanp$elm_combine$Combine_Num$unwrap(_elm_lang$core$String$toInt);
var _Bogdanp$elm_combine$Combine_Num$int = A2(
	_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
	A2(
		_Bogdanp$elm_combine$Combine$andMap,
		A2(
			_Bogdanp$elm_combine$Combine$map,
			F2(
				function (x, y) {
					return x * y;
				}),
			_Bogdanp$elm_combine$Combine_Num$sign),
		A2(
			_Bogdanp$elm_combine$Combine_Infix_ops['<$>'],
			_Bogdanp$elm_combine$Combine_Num$toInt,
			_Bogdanp$elm_combine$Combine$regex('(0|[1-9][0-9]*)'))),
	'expected an integer');
var _Bogdanp$elm_combine$Combine_Num$toFloat = _Bogdanp$elm_combine$Combine_Num$unwrap(_elm_lang$core$String$toFloat);
var _Bogdanp$elm_combine$Combine_Num$float = A2(
	_Bogdanp$elm_combine$Combine_Infix_ops['<?>'],
	A2(
		_Bogdanp$elm_combine$Combine$andMap,
		A2(
			_Bogdanp$elm_combine$Combine$map,
			function (_p2) {
				return F2(
					function (x, y) {
						return x * y;
					})(
					_elm_lang$core$Basics$toFloat(_p2));
			},
			_Bogdanp$elm_combine$Combine_Num$sign),
		A2(
			_Bogdanp$elm_combine$Combine_Infix_ops['<$>'],
			_Bogdanp$elm_combine$Combine_Num$toFloat,
			_Bogdanp$elm_combine$Combine$regex('(0|[1-9][0-9]*)(\\.[0-9]+)'))),
	'expected a float');

//import Native.List //

var _elm_lang$core$Native_Array = function() {

// A RRB-Tree has two distinct data types.
// Leaf -> "height"  is always 0
//         "table"   is an array of elements
// Node -> "height"  is always greater than 0
//         "table"   is an array of child nodes
//         "lengths" is an array of accumulated lengths of the child nodes

// M is the maximal table size. 32 seems fast. E is the allowed increase
// of search steps when concatting to find an index. Lower values will
// decrease balancing, but will increase search steps.
var M = 32;
var E = 2;

// An empty array.
var empty = {
	ctor: '_Array',
	height: 0,
	table: []
};


function get(i, array)
{
	if (i < 0 || i >= length(array))
	{
		throw new Error(
			'Index ' + i + ' is out of range. Check the length of ' +
			'your array first or use getMaybe or getWithDefault.');
	}
	return unsafeGet(i, array);
}


function unsafeGet(i, array)
{
	for (var x = array.height; x > 0; x--)
	{
		var slot = i >> (x * 5);
		while (array.lengths[slot] <= i)
		{
			slot++;
		}
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array = array.table[slot];
	}
	return array.table[i];
}


// Sets the value at the index i. Only the nodes leading to i will get
// copied and updated.
function set(i, item, array)
{
	if (i < 0 || length(array) <= i)
	{
		return array;
	}
	return unsafeSet(i, item, array);
}


function unsafeSet(i, item, array)
{
	array = nodeCopy(array);

	if (array.height === 0)
	{
		array.table[i] = item;
	}
	else
	{
		var slot = getSlot(i, array);
		if (slot > 0)
		{
			i -= array.lengths[slot - 1];
		}
		array.table[slot] = unsafeSet(i, item, array.table[slot]);
	}
	return array;
}


function initialize(len, f)
{
	if (len <= 0)
	{
		return empty;
	}
	var h = Math.floor( Math.log(len) / Math.log(M) );
	return initialize_(f, h, 0, len);
}

function initialize_(f, h, from, to)
{
	if (h === 0)
	{
		var table = new Array((to - from) % (M + 1));
		for (var i = 0; i < table.length; i++)
		{
		  table[i] = f(from + i);
		}
		return {
			ctor: '_Array',
			height: 0,
			table: table
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = initialize_(f, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i-1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

function fromList(list)
{
	if (list.ctor === '[]')
	{
		return empty;
	}

	// Allocate M sized blocks (table) and write list elements to it.
	var table = new Array(M);
	var nodes = [];
	var i = 0;

	while (list.ctor !== '[]')
	{
		table[i] = list._0;
		list = list._1;
		i++;

		// table is full, so we can push a leaf containing it into the
		// next node.
		if (i === M)
		{
			var leaf = {
				ctor: '_Array',
				height: 0,
				table: table
			};
			fromListPush(leaf, nodes);
			table = new Array(M);
			i = 0;
		}
	}

	// Maybe there is something left on the table.
	if (i > 0)
	{
		var leaf = {
			ctor: '_Array',
			height: 0,
			table: table.splice(0, i)
		};
		fromListPush(leaf, nodes);
	}

	// Go through all of the nodes and eventually push them into higher nodes.
	for (var h = 0; h < nodes.length - 1; h++)
	{
		if (nodes[h].table.length > 0)
		{
			fromListPush(nodes[h], nodes);
		}
	}

	var head = nodes[nodes.length - 1];
	if (head.height > 0 && head.table.length === 1)
	{
		return head.table[0];
	}
	else
	{
		return head;
	}
}

// Push a node into a higher node as a child.
function fromListPush(toPush, nodes)
{
	var h = toPush.height;

	// Maybe the node on this height does not exist.
	if (nodes.length === h)
	{
		var node = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
		nodes.push(node);
	}

	nodes[h].table.push(toPush);
	var len = length(toPush);
	if (nodes[h].lengths.length > 0)
	{
		len += nodes[h].lengths[nodes[h].lengths.length - 1];
	}
	nodes[h].lengths.push(len);

	if (nodes[h].table.length === M)
	{
		fromListPush(nodes[h], nodes);
		nodes[h] = {
			ctor: '_Array',
			height: h + 1,
			table: [],
			lengths: []
		};
	}
}

// Pushes an item via push_ to the bottom right of a tree.
function push(item, a)
{
	var pushed = push_(item, a);
	if (pushed !== null)
	{
		return pushed;
	}

	var newTree = create(item, a.height);
	return siblise(a, newTree);
}

// Recursively tries to push an item to the bottom-right most
// tree possible. If there is no space left for the item,
// null will be returned.
function push_(item, a)
{
	// Handle resursion stop at leaf level.
	if (a.height === 0)
	{
		if (a.table.length < M)
		{
			var newA = {
				ctor: '_Array',
				height: 0,
				table: a.table.slice()
			};
			newA.table.push(item);
			return newA;
		}
		else
		{
		  return null;
		}
	}

	// Recursively push
	var pushed = push_(item, botRight(a));

	// There was space in the bottom right tree, so the slot will
	// be updated.
	if (pushed !== null)
	{
		var newA = nodeCopy(a);
		newA.table[newA.table.length - 1] = pushed;
		newA.lengths[newA.lengths.length - 1]++;
		return newA;
	}

	// When there was no space left, check if there is space left
	// for a new slot with a tree which contains only the item
	// at the bottom.
	if (a.table.length < M)
	{
		var newSlot = create(item, a.height - 1);
		var newA = nodeCopy(a);
		newA.table.push(newSlot);
		newA.lengths.push(newA.lengths[newA.lengths.length - 1] + length(newSlot));
		return newA;
	}
	else
	{
		return null;
	}
}

// Converts an array into a list of elements.
function toList(a)
{
	return toList_(_elm_lang$core$Native_List.Nil, a);
}

function toList_(list, a)
{
	for (var i = a.table.length - 1; i >= 0; i--)
	{
		list =
			a.height === 0
				? _elm_lang$core$Native_List.Cons(a.table[i], list)
				: toList_(list, a.table[i]);
	}
	return list;
}

// Maps a function over the elements of an array.
function map(f, a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? f(a.table[i])
				: map(f, a.table[i]);
	}
	return newA;
}

// Maps a function over the elements with their index as first argument.
function indexedMap(f, a)
{
	return indexedMap_(f, a, 0);
}

function indexedMap_(f, a, from)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: new Array(a.table.length)
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths;
	}
	for (var i = 0; i < a.table.length; i++)
	{
		newA.table[i] =
			a.height === 0
				? A2(f, from + i, a.table[i])
				: indexedMap_(f, a.table[i], i == 0 ? from : from + a.lengths[i - 1]);
	}
	return newA;
}

function foldl(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = 0; i < a.table.length; i++)
		{
			b = foldl(f, b, a.table[i]);
		}
	}
	return b;
}

function foldr(f, b, a)
{
	if (a.height === 0)
	{
		for (var i = a.table.length; i--; )
		{
			b = A2(f, a.table[i], b);
		}
	}
	else
	{
		for (var i = a.table.length; i--; )
		{
			b = foldr(f, b, a.table[i]);
		}
	}
	return b;
}

// TODO: currently, it slices the right, then the left. This can be
// optimized.
function slice(from, to, a)
{
	if (from < 0)
	{
		from += length(a);
	}
	if (to < 0)
	{
		to += length(a);
	}
	return sliceLeft(from, sliceRight(to, a));
}

function sliceRight(to, a)
{
	if (to === length(a))
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(0, to);
		return newA;
	}

	// Slice the right recursively.
	var right = getSlot(to, a);
	var sliced = sliceRight(to - (right > 0 ? a.lengths[right - 1] : 0), a.table[right]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (right === 0)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(0, right),
		lengths: a.lengths.slice(0, right)
	};
	if (sliced.table.length > 0)
	{
		newA.table[right] = sliced;
		newA.lengths[right] = length(sliced) + (right > 0 ? newA.lengths[right - 1] : 0);
	}
	return newA;
}

function sliceLeft(from, a)
{
	if (from === 0)
	{
		return a;
	}

	// Handle leaf level.
	if (a.height === 0)
	{
		var newA = { ctor:'_Array', height:0 };
		newA.table = a.table.slice(from, a.table.length + 1);
		return newA;
	}

	// Slice the left recursively.
	var left = getSlot(from, a);
	var sliced = sliceLeft(from - (left > 0 ? a.lengths[left - 1] : 0), a.table[left]);

	// Maybe the a node is not even needed, as sliced contains the whole slice.
	if (left === a.table.length - 1)
	{
		return sliced;
	}

	// Create new node.
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice(left, a.table.length + 1),
		lengths: new Array(a.table.length - left)
	};
	newA.table[0] = sliced;
	var len = 0;
	for (var i = 0; i < newA.table.length; i++)
	{
		len += length(newA.table[i]);
		newA.lengths[i] = len;
	}

	return newA;
}

// Appends two trees.
function append(a,b)
{
	if (a.table.length === 0)
	{
		return b;
	}
	if (b.table.length === 0)
	{
		return a;
	}

	var c = append_(a, b);

	// Check if both nodes can be crunshed together.
	if (c[0].table.length + c[1].table.length <= M)
	{
		if (c[0].table.length === 0)
		{
			return c[1];
		}
		if (c[1].table.length === 0)
		{
			return c[0];
		}

		// Adjust .table and .lengths
		c[0].table = c[0].table.concat(c[1].table);
		if (c[0].height > 0)
		{
			var len = length(c[0]);
			for (var i = 0; i < c[1].lengths.length; i++)
			{
				c[1].lengths[i] += len;
			}
			c[0].lengths = c[0].lengths.concat(c[1].lengths);
		}

		return c[0];
	}

	if (c[0].height > 0)
	{
		var toRemove = calcToRemove(a, b);
		if (toRemove > E)
		{
			c = shuffle(c[0], c[1], toRemove);
		}
	}

	return siblise(c[0], c[1]);
}

// Returns an array of two nodes; right and left. One node _may_ be empty.
function append_(a, b)
{
	if (a.height === 0 && b.height === 0)
	{
		return [a, b];
	}

	if (a.height !== 1 || b.height !== 1)
	{
		if (a.height === b.height)
		{
			a = nodeCopy(a);
			b = nodeCopy(b);
			var appended = append_(botRight(a), botLeft(b));

			insertRight(a, appended[1]);
			insertLeft(b, appended[0]);
		}
		else if (a.height > b.height)
		{
			a = nodeCopy(a);
			var appended = append_(botRight(a), b);

			insertRight(a, appended[0]);
			b = parentise(appended[1], appended[1].height + 1);
		}
		else
		{
			b = nodeCopy(b);
			var appended = append_(a, botLeft(b));

			var left = appended[0].table.length === 0 ? 0 : 1;
			var right = left === 0 ? 1 : 0;
			insertLeft(b, appended[left]);
			a = parentise(appended[right], appended[right].height + 1);
		}
	}

	// Check if balancing is needed and return based on that.
	if (a.table.length === 0 || b.table.length === 0)
	{
		return [a, b];
	}

	var toRemove = calcToRemove(a, b);
	if (toRemove <= E)
	{
		return [a, b];
	}
	return shuffle(a, b, toRemove);
}

// Helperfunctions for append_. Replaces a child node at the side of the parent.
function insertRight(parent, node)
{
	var index = parent.table.length - 1;
	parent.table[index] = node;
	parent.lengths[index] = length(node);
	parent.lengths[index] += index > 0 ? parent.lengths[index - 1] : 0;
}

function insertLeft(parent, node)
{
	if (node.table.length > 0)
	{
		parent.table[0] = node;
		parent.lengths[0] = length(node);

		var len = length(parent.table[0]);
		for (var i = 1; i < parent.lengths.length; i++)
		{
			len += length(parent.table[i]);
			parent.lengths[i] = len;
		}
	}
	else
	{
		parent.table.shift();
		for (var i = 1; i < parent.lengths.length; i++)
		{
			parent.lengths[i] = parent.lengths[i] - parent.lengths[0];
		}
		parent.lengths.shift();
	}
}

// Returns the extra search steps for E. Refer to the paper.
function calcToRemove(a, b)
{
	var subLengths = 0;
	for (var i = 0; i < a.table.length; i++)
	{
		subLengths += a.table[i].table.length;
	}
	for (var i = 0; i < b.table.length; i++)
	{
		subLengths += b.table[i].table.length;
	}

	var toRemove = a.table.length + b.table.length;
	return toRemove - (Math.floor((subLengths - 1) / M) + 1);
}

// get2, set2 and saveSlot are helpers for accessing elements over two arrays.
function get2(a, b, index)
{
	return index < a.length
		? a[index]
		: b[index - a.length];
}

function set2(a, b, index, value)
{
	if (index < a.length)
	{
		a[index] = value;
	}
	else
	{
		b[index - a.length] = value;
	}
}

function saveSlot(a, b, index, slot)
{
	set2(a.table, b.table, index, slot);

	var l = (index === 0 || index === a.lengths.length)
		? 0
		: get2(a.lengths, a.lengths, index - 1);

	set2(a.lengths, b.lengths, index, l + length(slot));
}

// Creates a node or leaf with a given length at their arrays for perfomance.
// Is only used by shuffle.
function createNode(h, length)
{
	if (length < 0)
	{
		length = 0;
	}
	var a = {
		ctor: '_Array',
		height: h,
		table: new Array(length)
	};
	if (h > 0)
	{
		a.lengths = new Array(length);
	}
	return a;
}

// Returns an array of two balanced nodes.
function shuffle(a, b, toRemove)
{
	var newA = createNode(a.height, Math.min(M, a.table.length + b.table.length - toRemove));
	var newB = createNode(a.height, newA.table.length - (a.table.length + b.table.length - toRemove));

	// Skip the slots with size M. More precise: copy the slot references
	// to the new node
	var read = 0;
	while (get2(a.table, b.table, read).table.length % M === 0)
	{
		set2(newA.table, newB.table, read, get2(a.table, b.table, read));
		set2(newA.lengths, newB.lengths, read, get2(a.lengths, b.lengths, read));
		read++;
	}

	// Pulling items from left to right, caching in a slot before writing
	// it into the new nodes.
	var write = read;
	var slot = new createNode(a.height - 1, 0);
	var from = 0;

	// If the current slot is still containing data, then there will be at
	// least one more write, so we do not break this loop yet.
	while (read - write - (slot.table.length > 0 ? 1 : 0) < toRemove)
	{
		// Find out the max possible items for copying.
		var source = get2(a.table, b.table, read);
		var to = Math.min(M - slot.table.length, source.table.length);

		// Copy and adjust size table.
		slot.table = slot.table.concat(source.table.slice(from, to));
		if (slot.height > 0)
		{
			var len = slot.lengths.length;
			for (var i = len; i < len + to - from; i++)
			{
				slot.lengths[i] = length(slot.table[i]);
				slot.lengths[i] += (i > 0 ? slot.lengths[i - 1] : 0);
			}
		}

		from += to;

		// Only proceed to next slots[i] if the current one was
		// fully copied.
		if (source.table.length <= to)
		{
			read++; from = 0;
		}

		// Only create a new slot if the current one is filled up.
		if (slot.table.length === M)
		{
			saveSlot(newA, newB, write, slot);
			slot = createNode(a.height - 1, 0);
			write++;
		}
	}

	// Cleanup after the loop. Copy the last slot into the new nodes.
	if (slot.table.length > 0)
	{
		saveSlot(newA, newB, write, slot);
		write++;
	}

	// Shift the untouched slots to the left
	while (read < a.table.length + b.table.length )
	{
		saveSlot(newA, newB, write, get2(a.table, b.table, read));
		read++;
		write++;
	}

	return [newA, newB];
}

// Navigation functions
function botRight(a)
{
	return a.table[a.table.length - 1];
}
function botLeft(a)
{
	return a.table[0];
}

// Copies a node for updating. Note that you should not use this if
// only updating only one of "table" or "lengths" for performance reasons.
function nodeCopy(a)
{
	var newA = {
		ctor: '_Array',
		height: a.height,
		table: a.table.slice()
	};
	if (a.height > 0)
	{
		newA.lengths = a.lengths.slice();
	}
	return newA;
}

// Returns how many items are in the tree.
function length(array)
{
	if (array.height === 0)
	{
		return array.table.length;
	}
	else
	{
		return array.lengths[array.lengths.length - 1];
	}
}

// Calculates in which slot of "table" the item probably is, then
// find the exact slot via forward searching in  "lengths". Returns the index.
function getSlot(i, a)
{
	var slot = i >> (5 * a.height);
	while (a.lengths[slot] <= i)
	{
		slot++;
	}
	return slot;
}

// Recursively creates a tree with a given height containing
// only the given item.
function create(item, h)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: [item]
		};
	}
	return {
		ctor: '_Array',
		height: h,
		table: [create(item, h - 1)],
		lengths: [1]
	};
}

// Recursively creates a tree that contains the given tree.
function parentise(tree, h)
{
	if (h === tree.height)
	{
		return tree;
	}

	return {
		ctor: '_Array',
		height: h,
		table: [parentise(tree, h - 1)],
		lengths: [length(tree)]
	};
}

// Emphasizes blood brotherhood beneath two trees.
function siblise(a, b)
{
	return {
		ctor: '_Array',
		height: a.height + 1,
		table: [a, b],
		lengths: [length(a), length(a) + length(b)]
	};
}

function toJSArray(a)
{
	var jsArray = new Array(length(a));
	toJSArray_(jsArray, 0, a);
	return jsArray;
}

function toJSArray_(jsArray, i, a)
{
	for (var t = 0; t < a.table.length; t++)
	{
		if (a.height === 0)
		{
			jsArray[i + t] = a.table[t];
		}
		else
		{
			var inc = t === 0 ? 0 : a.lengths[t - 1];
			toJSArray_(jsArray, i + inc, a.table[t]);
		}
	}
}

function fromJSArray(jsArray)
{
	if (jsArray.length === 0)
	{
		return empty;
	}
	var h = Math.floor(Math.log(jsArray.length) / Math.log(M));
	return fromJSArray_(jsArray, h, 0, jsArray.length);
}

function fromJSArray_(jsArray, h, from, to)
{
	if (h === 0)
	{
		return {
			ctor: '_Array',
			height: 0,
			table: jsArray.slice(from, to)
		};
	}

	var step = Math.pow(M, h);
	var table = new Array(Math.ceil((to - from) / step));
	var lengths = new Array(table.length);
	for (var i = 0; i < table.length; i++)
	{
		table[i] = fromJSArray_(jsArray, h - 1, from + (i * step), Math.min(from + ((i + 1) * step), to));
		lengths[i] = length(table[i]) + (i > 0 ? lengths[i - 1] : 0);
	}
	return {
		ctor: '_Array',
		height: h,
		table: table,
		lengths: lengths
	};
}

return {
	empty: empty,
	fromList: fromList,
	toList: toList,
	initialize: F2(initialize),
	append: F2(append),
	push: F2(push),
	slice: F3(slice),
	get: F2(get),
	set: F3(set),
	map: F2(map),
	indexedMap: F2(indexedMap),
	foldl: F3(foldl),
	foldr: F3(foldr),
	length: length,

	toJSArray: toJSArray,
	fromJSArray: fromJSArray
};

}();
var _elm_lang$core$Array$append = _elm_lang$core$Native_Array.append;
var _elm_lang$core$Array$length = _elm_lang$core$Native_Array.length;
var _elm_lang$core$Array$isEmpty = function (array) {
	return _elm_lang$core$Native_Utils.eq(
		_elm_lang$core$Array$length(array),
		0);
};
var _elm_lang$core$Array$slice = _elm_lang$core$Native_Array.slice;
var _elm_lang$core$Array$set = _elm_lang$core$Native_Array.set;
var _elm_lang$core$Array$get = F2(
	function (i, array) {
		return ((_elm_lang$core$Native_Utils.cmp(0, i) < 1) && (_elm_lang$core$Native_Utils.cmp(
			i,
			_elm_lang$core$Native_Array.length(array)) < 0)) ? _elm_lang$core$Maybe$Just(
			A2(_elm_lang$core$Native_Array.get, i, array)) : _elm_lang$core$Maybe$Nothing;
	});
var _elm_lang$core$Array$push = _elm_lang$core$Native_Array.push;
var _elm_lang$core$Array$empty = _elm_lang$core$Native_Array.empty;
var _elm_lang$core$Array$filter = F2(
	function (isOkay, arr) {
		var update = F2(
			function (x, xs) {
				return isOkay(x) ? A2(_elm_lang$core$Native_Array.push, x, xs) : xs;
			});
		return A3(_elm_lang$core$Native_Array.foldl, update, _elm_lang$core$Native_Array.empty, arr);
	});
var _elm_lang$core$Array$foldr = _elm_lang$core$Native_Array.foldr;
var _elm_lang$core$Array$foldl = _elm_lang$core$Native_Array.foldl;
var _elm_lang$core$Array$indexedMap = _elm_lang$core$Native_Array.indexedMap;
var _elm_lang$core$Array$map = _elm_lang$core$Native_Array.map;
var _elm_lang$core$Array$toIndexedList = function (array) {
	return A3(
		_elm_lang$core$List$map2,
		F2(
			function (v0, v1) {
				return {ctor: '_Tuple2', _0: v0, _1: v1};
			}),
		_elm_lang$core$Native_List.range(
			0,
			_elm_lang$core$Native_Array.length(array) - 1),
		_elm_lang$core$Native_Array.toList(array));
};
var _elm_lang$core$Array$toList = _elm_lang$core$Native_Array.toList;
var _elm_lang$core$Array$fromList = _elm_lang$core$Native_Array.fromList;
var _elm_lang$core$Array$initialize = _elm_lang$core$Native_Array.initialize;
var _elm_lang$core$Array$repeat = F2(
	function (n, e) {
		return A2(
			_elm_lang$core$Array$initialize,
			n,
			_elm_lang$core$Basics$always(e));
	});
var _elm_lang$core$Array$Array = {ctor: 'Array'};

var _elm_lang$core$Dict$foldr = F3(
	function (f, acc, t) {
		foldr:
		while (true) {
			var _p0 = t;
			if (_p0.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v1 = f,
					_v2 = A3(
					f,
					_p0._1,
					_p0._2,
					A3(_elm_lang$core$Dict$foldr, f, acc, _p0._4)),
					_v3 = _p0._3;
				f = _v1;
				acc = _v2;
				t = _v3;
				continue foldr;
			}
		}
	});
var _elm_lang$core$Dict$keys = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, keyList) {
				return A2(_elm_lang$core$List_ops['::'], key, keyList);
			}),
		_elm_lang$core$Native_List.fromArray(
			[]),
		dict);
};
var _elm_lang$core$Dict$values = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, valueList) {
				return A2(_elm_lang$core$List_ops['::'], value, valueList);
			}),
		_elm_lang$core$Native_List.fromArray(
			[]),
		dict);
};
var _elm_lang$core$Dict$toList = function (dict) {
	return A3(
		_elm_lang$core$Dict$foldr,
		F3(
			function (key, value, list) {
				return A2(
					_elm_lang$core$List_ops['::'],
					{ctor: '_Tuple2', _0: key, _1: value},
					list);
			}),
		_elm_lang$core$Native_List.fromArray(
			[]),
		dict);
};
var _elm_lang$core$Dict$foldl = F3(
	function (f, acc, dict) {
		foldl:
		while (true) {
			var _p1 = dict;
			if (_p1.ctor === 'RBEmpty_elm_builtin') {
				return acc;
			} else {
				var _v5 = f,
					_v6 = A3(
					f,
					_p1._1,
					_p1._2,
					A3(_elm_lang$core$Dict$foldl, f, acc, _p1._3)),
					_v7 = _p1._4;
				f = _v5;
				acc = _v6;
				dict = _v7;
				continue foldl;
			}
		}
	});
var _elm_lang$core$Dict$merge = F6(
	function (leftStep, bothStep, rightStep, leftDict, rightDict, initialResult) {
		var stepState = F3(
			function (rKey, rValue, _p2) {
				var _p3 = _p2;
				var _p9 = _p3._1;
				var _p8 = _p3._0;
				var _p4 = _p8;
				if (_p4.ctor === '[]') {
					return {
						ctor: '_Tuple2',
						_0: _p8,
						_1: A3(rightStep, rKey, rValue, _p9)
					};
				} else {
					var _p7 = _p4._1;
					var _p6 = _p4._0._1;
					var _p5 = _p4._0._0;
					return (_elm_lang$core$Native_Utils.cmp(_p5, rKey) < 0) ? {
						ctor: '_Tuple2',
						_0: _p7,
						_1: A3(leftStep, _p5, _p6, _p9)
					} : ((_elm_lang$core$Native_Utils.cmp(_p5, rKey) > 0) ? {
						ctor: '_Tuple2',
						_0: _p8,
						_1: A3(rightStep, rKey, rValue, _p9)
					} : {
						ctor: '_Tuple2',
						_0: _p7,
						_1: A4(bothStep, _p5, _p6, rValue, _p9)
					});
				}
			});
		var _p10 = A3(
			_elm_lang$core$Dict$foldl,
			stepState,
			{
				ctor: '_Tuple2',
				_0: _elm_lang$core$Dict$toList(leftDict),
				_1: initialResult
			},
			rightDict);
		var leftovers = _p10._0;
		var intermediateResult = _p10._1;
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (_p11, result) {
					var _p12 = _p11;
					return A3(leftStep, _p12._0, _p12._1, result);
				}),
			intermediateResult,
			leftovers);
	});
var _elm_lang$core$Dict$reportRemBug = F4(
	function (msg, c, lgot, rgot) {
		return _elm_lang$core$Native_Debug.crash(
			_elm_lang$core$String$concat(
				_elm_lang$core$Native_List.fromArray(
					[
						'Internal red-black tree invariant violated, expected ',
						msg,
						' and got ',
						_elm_lang$core$Basics$toString(c),
						'/',
						lgot,
						'/',
						rgot,
						'\nPlease report this bug to <https://github.com/elm-lang/core/issues>'
					])));
	});
var _elm_lang$core$Dict$isBBlack = function (dict) {
	var _p13 = dict;
	_v11_2:
	do {
		if (_p13.ctor === 'RBNode_elm_builtin') {
			if (_p13._0.ctor === 'BBlack') {
				return true;
			} else {
				break _v11_2;
			}
		} else {
			if (_p13._0.ctor === 'LBBlack') {
				return true;
			} else {
				break _v11_2;
			}
		}
	} while(false);
	return false;
};
var _elm_lang$core$Dict$sizeHelp = F2(
	function (n, dict) {
		sizeHelp:
		while (true) {
			var _p14 = dict;
			if (_p14.ctor === 'RBEmpty_elm_builtin') {
				return n;
			} else {
				var _v13 = A2(_elm_lang$core$Dict$sizeHelp, n + 1, _p14._4),
					_v14 = _p14._3;
				n = _v13;
				dict = _v14;
				continue sizeHelp;
			}
		}
	});
var _elm_lang$core$Dict$size = function (dict) {
	return A2(_elm_lang$core$Dict$sizeHelp, 0, dict);
};
var _elm_lang$core$Dict$get = F2(
	function (targetKey, dict) {
		get:
		while (true) {
			var _p15 = dict;
			if (_p15.ctor === 'RBEmpty_elm_builtin') {
				return _elm_lang$core$Maybe$Nothing;
			} else {
				var _p16 = A2(_elm_lang$core$Basics$compare, targetKey, _p15._1);
				switch (_p16.ctor) {
					case 'LT':
						var _v17 = targetKey,
							_v18 = _p15._3;
						targetKey = _v17;
						dict = _v18;
						continue get;
					case 'EQ':
						return _elm_lang$core$Maybe$Just(_p15._2);
					default:
						var _v19 = targetKey,
							_v20 = _p15._4;
						targetKey = _v19;
						dict = _v20;
						continue get;
				}
			}
		}
	});
var _elm_lang$core$Dict$member = F2(
	function (key, dict) {
		var _p17 = A2(_elm_lang$core$Dict$get, key, dict);
		if (_p17.ctor === 'Just') {
			return true;
		} else {
			return false;
		}
	});
var _elm_lang$core$Dict$maxWithDefault = F3(
	function (k, v, r) {
		maxWithDefault:
		while (true) {
			var _p18 = r;
			if (_p18.ctor === 'RBEmpty_elm_builtin') {
				return {ctor: '_Tuple2', _0: k, _1: v};
			} else {
				var _v23 = _p18._1,
					_v24 = _p18._2,
					_v25 = _p18._4;
				k = _v23;
				v = _v24;
				r = _v25;
				continue maxWithDefault;
			}
		}
	});
var _elm_lang$core$Dict$NBlack = {ctor: 'NBlack'};
var _elm_lang$core$Dict$BBlack = {ctor: 'BBlack'};
var _elm_lang$core$Dict$Black = {ctor: 'Black'};
var _elm_lang$core$Dict$blackish = function (t) {
	var _p19 = t;
	if (_p19.ctor === 'RBNode_elm_builtin') {
		var _p20 = _p19._0;
		return _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$Black) || _elm_lang$core$Native_Utils.eq(_p20, _elm_lang$core$Dict$BBlack);
	} else {
		return true;
	}
};
var _elm_lang$core$Dict$Red = {ctor: 'Red'};
var _elm_lang$core$Dict$moreBlack = function (color) {
	var _p21 = color;
	switch (_p21.ctor) {
		case 'Black':
			return _elm_lang$core$Dict$BBlack;
		case 'Red':
			return _elm_lang$core$Dict$Black;
		case 'NBlack':
			return _elm_lang$core$Dict$Red;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a double black node more black!');
	}
};
var _elm_lang$core$Dict$lessBlack = function (color) {
	var _p22 = color;
	switch (_p22.ctor) {
		case 'BBlack':
			return _elm_lang$core$Dict$Black;
		case 'Black':
			return _elm_lang$core$Dict$Red;
		case 'Red':
			return _elm_lang$core$Dict$NBlack;
		default:
			return _elm_lang$core$Native_Debug.crash('Can\'t make a negative black node less black!');
	}
};
var _elm_lang$core$Dict$LBBlack = {ctor: 'LBBlack'};
var _elm_lang$core$Dict$LBlack = {ctor: 'LBlack'};
var _elm_lang$core$Dict$RBEmpty_elm_builtin = function (a) {
	return {ctor: 'RBEmpty_elm_builtin', _0: a};
};
var _elm_lang$core$Dict$empty = _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
var _elm_lang$core$Dict$isEmpty = function (dict) {
	return _elm_lang$core$Native_Utils.eq(dict, _elm_lang$core$Dict$empty);
};
var _elm_lang$core$Dict$RBNode_elm_builtin = F5(
	function (a, b, c, d, e) {
		return {ctor: 'RBNode_elm_builtin', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Dict$ensureBlackRoot = function (dict) {
	var _p23 = dict;
	if ((_p23.ctor === 'RBNode_elm_builtin') && (_p23._0.ctor === 'Red')) {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p23._1, _p23._2, _p23._3, _p23._4);
	} else {
		return dict;
	}
};
var _elm_lang$core$Dict$lessBlackTree = function (dict) {
	var _p24 = dict;
	if (_p24.ctor === 'RBNode_elm_builtin') {
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$lessBlack(_p24._0),
			_p24._1,
			_p24._2,
			_p24._3,
			_p24._4);
	} else {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	}
};
var _elm_lang$core$Dict$balancedTree = function (col) {
	return function (xk) {
		return function (xv) {
			return function (yk) {
				return function (yv) {
					return function (zk) {
						return function (zv) {
							return function (a) {
								return function (b) {
									return function (c) {
										return function (d) {
											return A5(
												_elm_lang$core$Dict$RBNode_elm_builtin,
												_elm_lang$core$Dict$lessBlack(col),
												yk,
												yv,
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, xk, xv, a, b),
												A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, zk, zv, c, d));
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$core$Dict$blacken = function (t) {
	var _p25 = t;
	if (_p25.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p25._1, _p25._2, _p25._3, _p25._4);
	}
};
var _elm_lang$core$Dict$redden = function (t) {
	var _p26 = t;
	if (_p26.ctor === 'RBEmpty_elm_builtin') {
		return _elm_lang$core$Native_Debug.crash('can\'t make a Leaf red');
	} else {
		return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, _p26._1, _p26._2, _p26._3, _p26._4);
	}
};
var _elm_lang$core$Dict$balanceHelp = function (tree) {
	var _p27 = tree;
	_v33_6:
	do {
		_v33_5:
		do {
			_v33_4:
			do {
				_v33_3:
				do {
					_v33_2:
					do {
						_v33_1:
						do {
							_v33_0:
							do {
								if (_p27.ctor === 'RBNode_elm_builtin') {
									if (_p27._3.ctor === 'RBNode_elm_builtin') {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._3._0.ctor) {
												case 'Red':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v33_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v33_1;
																} else {
																	if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																		break _v33_2;
																	} else {
																		if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																			break _v33_3;
																		} else {
																			break _v33_6;
																		}
																	}
																}
															}
														case 'NBlack':
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v33_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v33_1;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																		break _v33_4;
																	} else {
																		break _v33_6;
																	}
																}
															}
														default:
															if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
																break _v33_0;
															} else {
																if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
																	break _v33_1;
																} else {
																	break _v33_6;
																}
															}
													}
												case 'NBlack':
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v33_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v33_3;
																} else {
																	if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v33_5;
																	} else {
																		break _v33_6;
																	}
																}
															}
														case 'NBlack':
															if (_p27._0.ctor === 'BBlack') {
																if ((((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																	break _v33_4;
																} else {
																	if ((((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																		break _v33_5;
																	} else {
																		break _v33_6;
																	}
																}
															} else {
																break _v33_6;
															}
														default:
															if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
																break _v33_5;
															} else {
																break _v33_6;
															}
													}
												default:
													switch (_p27._4._0.ctor) {
														case 'Red':
															if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
																break _v33_2;
															} else {
																if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
																	break _v33_3;
																} else {
																	break _v33_6;
																}
															}
														case 'NBlack':
															if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
																break _v33_4;
															} else {
																break _v33_6;
															}
														default:
															break _v33_6;
													}
											}
										} else {
											switch (_p27._3._0.ctor) {
												case 'Red':
													if ((_p27._3._3.ctor === 'RBNode_elm_builtin') && (_p27._3._3._0.ctor === 'Red')) {
														break _v33_0;
													} else {
														if ((_p27._3._4.ctor === 'RBNode_elm_builtin') && (_p27._3._4._0.ctor === 'Red')) {
															break _v33_1;
														} else {
															break _v33_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._3._3.ctor === 'RBNode_elm_builtin')) && (_p27._3._3._0.ctor === 'Black')) && (_p27._3._4.ctor === 'RBNode_elm_builtin')) && (_p27._3._4._0.ctor === 'Black')) {
														break _v33_5;
													} else {
														break _v33_6;
													}
												default:
													break _v33_6;
											}
										}
									} else {
										if (_p27._4.ctor === 'RBNode_elm_builtin') {
											switch (_p27._4._0.ctor) {
												case 'Red':
													if ((_p27._4._3.ctor === 'RBNode_elm_builtin') && (_p27._4._3._0.ctor === 'Red')) {
														break _v33_2;
													} else {
														if ((_p27._4._4.ctor === 'RBNode_elm_builtin') && (_p27._4._4._0.ctor === 'Red')) {
															break _v33_3;
														} else {
															break _v33_6;
														}
													}
												case 'NBlack':
													if (((((_p27._0.ctor === 'BBlack') && (_p27._4._3.ctor === 'RBNode_elm_builtin')) && (_p27._4._3._0.ctor === 'Black')) && (_p27._4._4.ctor === 'RBNode_elm_builtin')) && (_p27._4._4._0.ctor === 'Black')) {
														break _v33_4;
													} else {
														break _v33_6;
													}
												default:
													break _v33_6;
											}
										} else {
											break _v33_6;
										}
									}
								} else {
									break _v33_6;
								}
							} while(false);
							return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._3._1)(_p27._3._3._2)(_p27._3._1)(_p27._3._2)(_p27._1)(_p27._2)(_p27._3._3._3)(_p27._3._3._4)(_p27._3._4)(_p27._4);
						} while(false);
						return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._3._1)(_p27._3._2)(_p27._3._4._1)(_p27._3._4._2)(_p27._1)(_p27._2)(_p27._3._3)(_p27._3._4._3)(_p27._3._4._4)(_p27._4);
					} while(false);
					return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._3._1)(_p27._4._3._2)(_p27._4._1)(_p27._4._2)(_p27._3)(_p27._4._3._3)(_p27._4._3._4)(_p27._4._4);
				} while(false);
				return _elm_lang$core$Dict$balancedTree(_p27._0)(_p27._1)(_p27._2)(_p27._4._1)(_p27._4._2)(_p27._4._4._1)(_p27._4._4._2)(_p27._3)(_p27._4._3)(_p27._4._4._3)(_p27._4._4._4);
			} while(false);
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_elm_lang$core$Dict$Black,
				_p27._4._3._1,
				_p27._4._3._2,
				A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3, _p27._4._3._3),
				A5(
					_elm_lang$core$Dict$balance,
					_elm_lang$core$Dict$Black,
					_p27._4._1,
					_p27._4._2,
					_p27._4._3._4,
					_elm_lang$core$Dict$redden(_p27._4._4)));
		} while(false);
		return A5(
			_elm_lang$core$Dict$RBNode_elm_builtin,
			_elm_lang$core$Dict$Black,
			_p27._3._4._1,
			_p27._3._4._2,
			A5(
				_elm_lang$core$Dict$balance,
				_elm_lang$core$Dict$Black,
				_p27._3._1,
				_p27._3._2,
				_elm_lang$core$Dict$redden(_p27._3._3),
				_p27._3._4._3),
			A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p27._1, _p27._2, _p27._3._4._4, _p27._4));
	} while(false);
	return tree;
};
var _elm_lang$core$Dict$balance = F5(
	function (c, k, v, l, r) {
		var tree = A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
		return _elm_lang$core$Dict$blackish(tree) ? _elm_lang$core$Dict$balanceHelp(tree) : tree;
	});
var _elm_lang$core$Dict$bubble = F5(
	function (c, k, v, l, r) {
		return (_elm_lang$core$Dict$isBBlack(l) || _elm_lang$core$Dict$isBBlack(r)) ? A5(
			_elm_lang$core$Dict$balance,
			_elm_lang$core$Dict$moreBlack(c),
			k,
			v,
			_elm_lang$core$Dict$lessBlackTree(l),
			_elm_lang$core$Dict$lessBlackTree(r)) : A5(_elm_lang$core$Dict$RBNode_elm_builtin, c, k, v, l, r);
	});
var _elm_lang$core$Dict$removeMax = F5(
	function (c, k, v, l, r) {
		var _p28 = r;
		if (_p28.ctor === 'RBEmpty_elm_builtin') {
			return A3(_elm_lang$core$Dict$rem, c, l, r);
		} else {
			return A5(
				_elm_lang$core$Dict$bubble,
				c,
				k,
				v,
				l,
				A5(_elm_lang$core$Dict$removeMax, _p28._0, _p28._1, _p28._2, _p28._3, _p28._4));
		}
	});
var _elm_lang$core$Dict$rem = F3(
	function (c, l, r) {
		var _p29 = {ctor: '_Tuple2', _0: l, _1: r};
		if (_p29._0.ctor === 'RBEmpty_elm_builtin') {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p30 = c;
				switch (_p30.ctor) {
					case 'Red':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
					case 'Black':
						return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBBlack);
					default:
						return _elm_lang$core$Native_Debug.crash('cannot have bblack or nblack nodes at this point');
				}
			} else {
				var _p33 = _p29._1._0;
				var _p32 = _p29._0._0;
				var _p31 = {ctor: '_Tuple3', _0: c, _1: _p32, _2: _p33};
				if ((((_p31.ctor === '_Tuple3') && (_p31._0.ctor === 'Black')) && (_p31._1.ctor === 'LBlack')) && (_p31._2.ctor === 'Red')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._1._1, _p29._1._2, _p29._1._3, _p29._1._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/LBlack/Red',
						c,
						_elm_lang$core$Basics$toString(_p32),
						_elm_lang$core$Basics$toString(_p33));
				}
			}
		} else {
			if (_p29._1.ctor === 'RBEmpty_elm_builtin') {
				var _p36 = _p29._1._0;
				var _p35 = _p29._0._0;
				var _p34 = {ctor: '_Tuple3', _0: c, _1: _p35, _2: _p36};
				if ((((_p34.ctor === '_Tuple3') && (_p34._0.ctor === 'Black')) && (_p34._1.ctor === 'Red')) && (_p34._2.ctor === 'LBlack')) {
					return A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Black, _p29._0._1, _p29._0._2, _p29._0._3, _p29._0._4);
				} else {
					return A4(
						_elm_lang$core$Dict$reportRemBug,
						'Black/Red/LBlack',
						c,
						_elm_lang$core$Basics$toString(_p35),
						_elm_lang$core$Basics$toString(_p36));
				}
			} else {
				var _p40 = _p29._0._2;
				var _p39 = _p29._0._4;
				var _p38 = _p29._0._1;
				var l$ = A5(_elm_lang$core$Dict$removeMax, _p29._0._0, _p38, _p40, _p29._0._3, _p39);
				var _p37 = A3(_elm_lang$core$Dict$maxWithDefault, _p38, _p40, _p39);
				var k = _p37._0;
				var v = _p37._1;
				return A5(_elm_lang$core$Dict$bubble, c, k, v, l$, r);
			}
		}
	});
var _elm_lang$core$Dict$map = F2(
	function (f, dict) {
		var _p41 = dict;
		if (_p41.ctor === 'RBEmpty_elm_builtin') {
			return _elm_lang$core$Dict$RBEmpty_elm_builtin(_elm_lang$core$Dict$LBlack);
		} else {
			var _p42 = _p41._1;
			return A5(
				_elm_lang$core$Dict$RBNode_elm_builtin,
				_p41._0,
				_p42,
				A2(f, _p42, _p41._2),
				A2(_elm_lang$core$Dict$map, f, _p41._3),
				A2(_elm_lang$core$Dict$map, f, _p41._4));
		}
	});
var _elm_lang$core$Dict$Same = {ctor: 'Same'};
var _elm_lang$core$Dict$Remove = {ctor: 'Remove'};
var _elm_lang$core$Dict$Insert = {ctor: 'Insert'};
var _elm_lang$core$Dict$update = F3(
	function (k, alter, dict) {
		var up = function (dict) {
			var _p43 = dict;
			if (_p43.ctor === 'RBEmpty_elm_builtin') {
				var _p44 = alter(_elm_lang$core$Maybe$Nothing);
				if (_p44.ctor === 'Nothing') {
					return {ctor: '_Tuple2', _0: _elm_lang$core$Dict$Same, _1: _elm_lang$core$Dict$empty};
				} else {
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Dict$Insert,
						_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _elm_lang$core$Dict$Red, k, _p44._0, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty)
					};
				}
			} else {
				var _p55 = _p43._2;
				var _p54 = _p43._4;
				var _p53 = _p43._3;
				var _p52 = _p43._1;
				var _p51 = _p43._0;
				var _p45 = A2(_elm_lang$core$Basics$compare, k, _p52);
				switch (_p45.ctor) {
					case 'EQ':
						var _p46 = alter(
							_elm_lang$core$Maybe$Just(_p55));
						if (_p46.ctor === 'Nothing') {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Remove,
								_1: A3(_elm_lang$core$Dict$rem, _p51, _p53, _p54)
							};
						} else {
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Dict$Same,
								_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p46._0, _p53, _p54)
							};
						}
					case 'LT':
						var _p47 = up(_p53);
						var flag = _p47._0;
						var newLeft = _p47._1;
						var _p48 = flag;
						switch (_p48.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, newLeft, _p54)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, newLeft, _p54)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, newLeft, _p54)
								};
						}
					default:
						var _p49 = up(_p54);
						var flag = _p49._0;
						var newRight = _p49._1;
						var _p50 = flag;
						switch (_p50.ctor) {
							case 'Same':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Same,
									_1: A5(_elm_lang$core$Dict$RBNode_elm_builtin, _p51, _p52, _p55, _p53, newRight)
								};
							case 'Insert':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Insert,
									_1: A5(_elm_lang$core$Dict$balance, _p51, _p52, _p55, _p53, newRight)
								};
							default:
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Dict$Remove,
									_1: A5(_elm_lang$core$Dict$bubble, _p51, _p52, _p55, _p53, newRight)
								};
						}
				}
			}
		};
		var _p56 = up(dict);
		var flag = _p56._0;
		var updatedDict = _p56._1;
		var _p57 = flag;
		switch (_p57.ctor) {
			case 'Same':
				return updatedDict;
			case 'Insert':
				return _elm_lang$core$Dict$ensureBlackRoot(updatedDict);
			default:
				return _elm_lang$core$Dict$blacken(updatedDict);
		}
	});
var _elm_lang$core$Dict$insert = F3(
	function (key, value, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(
				_elm_lang$core$Maybe$Just(value)),
			dict);
	});
var _elm_lang$core$Dict$singleton = F2(
	function (key, value) {
		return A3(_elm_lang$core$Dict$insert, key, value, _elm_lang$core$Dict$empty);
	});
var _elm_lang$core$Dict$union = F2(
	function (t1, t2) {
		return A3(_elm_lang$core$Dict$foldl, _elm_lang$core$Dict$insert, t2, t1);
	});
var _elm_lang$core$Dict$filter = F2(
	function (predicate, dictionary) {
		var add = F3(
			function (key, value, dict) {
				return A2(predicate, key, value) ? A3(_elm_lang$core$Dict$insert, key, value, dict) : dict;
			});
		return A3(_elm_lang$core$Dict$foldl, add, _elm_lang$core$Dict$empty, dictionary);
	});
var _elm_lang$core$Dict$intersect = F2(
	function (t1, t2) {
		return A2(
			_elm_lang$core$Dict$filter,
			F2(
				function (k, _p58) {
					return A2(_elm_lang$core$Dict$member, k, t2);
				}),
			t1);
	});
var _elm_lang$core$Dict$partition = F2(
	function (predicate, dict) {
		var add = F3(
			function (key, value, _p59) {
				var _p60 = _p59;
				var _p62 = _p60._1;
				var _p61 = _p60._0;
				return A2(predicate, key, value) ? {
					ctor: '_Tuple2',
					_0: A3(_elm_lang$core$Dict$insert, key, value, _p61),
					_1: _p62
				} : {
					ctor: '_Tuple2',
					_0: _p61,
					_1: A3(_elm_lang$core$Dict$insert, key, value, _p62)
				};
			});
		return A3(
			_elm_lang$core$Dict$foldl,
			add,
			{ctor: '_Tuple2', _0: _elm_lang$core$Dict$empty, _1: _elm_lang$core$Dict$empty},
			dict);
	});
var _elm_lang$core$Dict$fromList = function (assocs) {
	return A3(
		_elm_lang$core$List$foldl,
		F2(
			function (_p63, dict) {
				var _p64 = _p63;
				return A3(_elm_lang$core$Dict$insert, _p64._0, _p64._1, dict);
			}),
		_elm_lang$core$Dict$empty,
		assocs);
};
var _elm_lang$core$Dict$remove = F2(
	function (key, dict) {
		return A3(
			_elm_lang$core$Dict$update,
			key,
			_elm_lang$core$Basics$always(_elm_lang$core$Maybe$Nothing),
			dict);
	});
var _elm_lang$core$Dict$diff = F2(
	function (t1, t2) {
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, v, t) {
					return A2(_elm_lang$core$Dict$remove, k, t);
				}),
			t1,
			t2);
	});

//import Maybe, Native.Array, Native.List, Native.Utils, Result //

var _elm_lang$core$Native_Json = function() {


// CORE DECODERS

function succeed(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'succeed',
		msg: msg
	};
}

function fail(msg)
{
	return {
		ctor: '<decoder>',
		tag: 'fail',
		msg: msg
	};
}

function decodePrimitive(tag)
{
	return {
		ctor: '<decoder>',
		tag: tag
	};
}

function decodeContainer(tag, decoder)
{
	return {
		ctor: '<decoder>',
		tag: tag,
		decoder: decoder
	};
}

function decodeNull(value)
{
	return {
		ctor: '<decoder>',
		tag: 'null',
		value: value
	};
}

function decodeField(field, decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'field',
		field: field,
		decoder: decoder
	};
}

function decodeKeyValuePairs(decoder)
{
	return {
		ctor: '<decoder>',
		tag: 'key-value',
		decoder: decoder
	};
}

function decodeObject(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'map-many',
		func: f,
		decoders: decoders
	};
}

function decodeTuple(f, decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'tuple',
		func: f,
		decoders: decoders
	};
}

function andThen(decoder, callback)
{
	return {
		ctor: '<decoder>',
		tag: 'andThen',
		decoder: decoder,
		callback: callback
	};
}

function customAndThen(decoder, callback)
{
	return {
		ctor: '<decoder>',
		tag: 'customAndThen',
		decoder: decoder,
		callback: callback
	};
}

function oneOf(decoders)
{
	return {
		ctor: '<decoder>',
		tag: 'oneOf',
		decoders: decoders
	};
}


// DECODING OBJECTS

function decodeObject1(f, d1)
{
	return decodeObject(f, [d1]);
}

function decodeObject2(f, d1, d2)
{
	return decodeObject(f, [d1, d2]);
}

function decodeObject3(f, d1, d2, d3)
{
	return decodeObject(f, [d1, d2, d3]);
}

function decodeObject4(f, d1, d2, d3, d4)
{
	return decodeObject(f, [d1, d2, d3, d4]);
}

function decodeObject5(f, d1, d2, d3, d4, d5)
{
	return decodeObject(f, [d1, d2, d3, d4, d5]);
}

function decodeObject6(f, d1, d2, d3, d4, d5, d6)
{
	return decodeObject(f, [d1, d2, d3, d4, d5, d6]);
}

function decodeObject7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return decodeObject(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function decodeObject8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return decodeObject(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODING TUPLES

function decodeTuple1(f, d1)
{
	return decodeTuple(f, [d1]);
}

function decodeTuple2(f, d1, d2)
{
	return decodeTuple(f, [d1, d2]);
}

function decodeTuple3(f, d1, d2, d3)
{
	return decodeTuple(f, [d1, d2, d3]);
}

function decodeTuple4(f, d1, d2, d3, d4)
{
	return decodeTuple(f, [d1, d2, d3, d4]);
}

function decodeTuple5(f, d1, d2, d3, d4, d5)
{
	return decodeTuple(f, [d1, d2, d3, d4, d5]);
}

function decodeTuple6(f, d1, d2, d3, d4, d5, d6)
{
	return decodeTuple(f, [d1, d2, d3, d4, d5, d6]);
}

function decodeTuple7(f, d1, d2, d3, d4, d5, d6, d7)
{
	return decodeTuple(f, [d1, d2, d3, d4, d5, d6, d7]);
}

function decodeTuple8(f, d1, d2, d3, d4, d5, d6, d7, d8)
{
	return decodeTuple(f, [d1, d2, d3, d4, d5, d6, d7, d8]);
}


// DECODE HELPERS

function ok(value)
{
	return { tag: 'ok', value: value };
}

function badPrimitive(type, value)
{
	return { tag: 'primitive', type: type, value: value };
}

function badIndex(index, nestedProblems)
{
	return { tag: 'index', index: index, rest: nestedProblems };
}

function badField(field, nestedProblems)
{
	return { tag: 'field', field: field, rest: nestedProblems };
}

function badOneOf(problems)
{
	return { tag: 'oneOf', problems: problems };
}

function bad(msg)
{
	return { tag: 'fail', msg: msg };
}

function badToString(problem)
{
	var context = '_';
	while (problem)
	{
		switch (problem.tag)
		{
			case 'primitive':
				return 'Expecting ' + problem.type
					+ (context === '_' ? '' : ' at ' + context)
					+ ' but instead got: ' + jsToString(problem.value);

			case 'index':
				context += '[' + problem.index + ']';
				problem = problem.rest;
				break;

			case 'field':
				context += '.' + problem.field;
				problem = problem.rest;
				break;

			case 'oneOf':
				var problems = problem.problems;
				for (var i = 0; i < problems.length; i++)
				{
					problems[i] = badToString(problems[i]);
				}
				return 'I ran into the following problems'
					+ (context === '_' ? '' : ' at ' + context)
					+ ':\n\n' + problems.join('\n');

			case 'fail':
				return 'I ran into a `fail` decoder'
					+ (context === '_' ? '' : ' at ' + context)
					+ ': ' + problem.msg;
		}
	}
}

function jsToString(value)
{
	return value === undefined
		? 'undefined'
		: JSON.stringify(value);
}


// DECODE

function runOnString(decoder, string)
{
	var json;
	try
	{
		json = JSON.parse(string);
	}
	catch (e)
	{
		return _elm_lang$core$Result$Err('Given an invalid JSON: ' + e.message);
	}
	return run(decoder, json);
}

function run(decoder, value)
{
	var result = runHelp(decoder, value);
	return (result.tag === 'ok')
		? _elm_lang$core$Result$Ok(result.value)
		: _elm_lang$core$Result$Err(badToString(result));
}

function runHelp(decoder, value)
{
	switch (decoder.tag)
	{
		case 'bool':
			return (typeof value === 'boolean')
				? ok(value)
				: badPrimitive('a Bool', value);

		case 'int':
			if (typeof value !== 'number') {
				return badPrimitive('an Int', value);
			}

			if (-2147483647 < value && value < 2147483647 && (value | 0) === value) {
				return ok(value);
			}

			if (isFinite(value) && !(value % 1)) {
				return ok(value);
			}

			return badPrimitive('an Int', value);

		case 'float':
			return (typeof value === 'number')
				? ok(value)
				: badPrimitive('a Float', value);

		case 'string':
			return (typeof value === 'string')
				? ok(value)
				: (value instanceof String)
					? ok(value + '')
					: badPrimitive('a String', value);

		case 'null':
			return (value === null)
				? ok(decoder.value)
				: badPrimitive('null', value);

		case 'value':
			return ok(value);

		case 'list':
			if (!(value instanceof Array))
			{
				return badPrimitive('a List', value);
			}

			var list = _elm_lang$core$Native_List.Nil;
			for (var i = value.length; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result)
				}
				list = _elm_lang$core$Native_List.Cons(result.value, list);
			}
			return ok(list);

		case 'array':
			if (!(value instanceof Array))
			{
				return badPrimitive('an Array', value);
			}

			var len = value.length;
			var array = new Array(len);
			for (var i = len; i--; )
			{
				var result = runHelp(decoder.decoder, value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				array[i] = result.value;
			}
			return ok(_elm_lang$core$Native_Array.fromJSArray(array));

		case 'maybe':
			var result = runHelp(decoder.decoder, value);
			return (result.tag === 'ok')
				? ok(_elm_lang$core$Maybe$Just(result.value))
				: ok(_elm_lang$core$Maybe$Nothing);

		case 'field':
			var field = decoder.field;
			if (typeof value !== 'object' || value === null || !(field in value))
			{
				return badPrimitive('an object with a field named `' + field + '`', value);
			}

			var result = runHelp(decoder.decoder, value[field]);
			return (result.tag === 'ok')
				? result
				: badField(field, result);

		case 'key-value':
			if (typeof value !== 'object' || value === null || value instanceof Array)
			{
				return badPrimitive('an object', value);
			}

			var keyValuePairs = _elm_lang$core$Native_List.Nil;
			for (var key in value)
			{
				var result = runHelp(decoder.decoder, value[key]);
				if (result.tag !== 'ok')
				{
					return badField(key, result);
				}
				var pair = _elm_lang$core$Native_Utils.Tuple2(key, result.value);
				keyValuePairs = _elm_lang$core$Native_List.Cons(pair, keyValuePairs);
			}
			return ok(keyValuePairs);

		case 'map-many':
			var answer = decoder.func;
			var decoders = decoder.decoders;
			for (var i = 0; i < decoders.length; i++)
			{
				var result = runHelp(decoders[i], value);
				if (result.tag !== 'ok')
				{
					return result;
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'tuple':
			var decoders = decoder.decoders;
			var len = decoders.length;

			if ( !(value instanceof Array) || value.length !== len )
			{
				return badPrimitive('a Tuple with ' + len + ' entries', value);
			}

			var answer = decoder.func;
			for (var i = 0; i < len; i++)
			{
				var result = runHelp(decoders[i], value[i]);
				if (result.tag !== 'ok')
				{
					return badIndex(i, result);
				}
				answer = answer(result.value);
			}
			return ok(answer);

		case 'customAndThen':
			var result = runHelp(decoder.decoder, value);
			if (result.tag !== 'ok')
			{
				return result;
			}
			var realResult = decoder.callback(result.value);
			if (realResult.ctor === 'Err')
			{
				return badPrimitive('something custom', value);
			}
			return ok(realResult._0);

		case 'andThen':
			var result = runHelp(decoder.decoder, value);
			return (result.tag !== 'ok')
				? result
				: runHelp(decoder.callback(result.value), value);

		case 'oneOf':
			var errors = [];
			var temp = decoder.decoders;
			while (temp.ctor !== '[]')
			{
				var result = runHelp(temp._0, value);

				if (result.tag === 'ok')
				{
					return result;
				}

				errors.push(result);

				temp = temp._1;
			}
			return badOneOf(errors);

		case 'fail':
			return bad(decoder.msg);

		case 'succeed':
			return ok(decoder.msg);
	}
}


// EQUALITY

function equality(a, b)
{
	if (a === b)
	{
		return true;
	}

	if (a.tag !== b.tag)
	{
		return false;
	}

	switch (a.tag)
	{
		case 'succeed':
		case 'fail':
			return a.msg === b.msg;

		case 'bool':
		case 'int':
		case 'float':
		case 'string':
		case 'value':
			return true;

		case 'null':
			return a.value === b.value;

		case 'list':
		case 'array':
		case 'maybe':
		case 'key-value':
			return equality(a.decoder, b.decoder);

		case 'field':
			return a.field === b.field && equality(a.decoder, b.decoder);

		case 'map-many':
		case 'tuple':
			if (a.func !== b.func)
			{
				return false;
			}
			return listEquality(a.decoders, b.decoders);

		case 'andThen':
		case 'customAndThen':
			return a.callback === b.callback && equality(a.decoder, b.decoder);

		case 'oneOf':
			return listEquality(a.decoders, b.decoders);
	}
}

function listEquality(aDecoders, bDecoders)
{
	var len = aDecoders.length;
	if (len !== bDecoders.length)
	{
		return false;
	}
	for (var i = 0; i < len; i++)
	{
		if (!equality(aDecoders[i], bDecoders[i]))
		{
			return false;
		}
	}
	return true;
}


// ENCODE

function encode(indentLevel, value)
{
	return JSON.stringify(value, null, indentLevel);
}

function identity(value)
{
	return value;
}

function encodeObject(keyValuePairs)
{
	var obj = {};
	while (keyValuePairs.ctor !== '[]')
	{
		var pair = keyValuePairs._0;
		obj[pair._0] = pair._1;
		keyValuePairs = keyValuePairs._1;
	}
	return obj;
}

return {
	encode: F2(encode),
	runOnString: F2(runOnString),
	run: F2(run),

	decodeNull: decodeNull,
	decodePrimitive: decodePrimitive,
	decodeContainer: F2(decodeContainer),

	decodeField: F2(decodeField),

	decodeObject1: F2(decodeObject1),
	decodeObject2: F3(decodeObject2),
	decodeObject3: F4(decodeObject3),
	decodeObject4: F5(decodeObject4),
	decodeObject5: F6(decodeObject5),
	decodeObject6: F7(decodeObject6),
	decodeObject7: F8(decodeObject7),
	decodeObject8: F9(decodeObject8),
	decodeKeyValuePairs: decodeKeyValuePairs,

	decodeTuple1: F2(decodeTuple1),
	decodeTuple2: F3(decodeTuple2),
	decodeTuple3: F4(decodeTuple3),
	decodeTuple4: F5(decodeTuple4),
	decodeTuple5: F6(decodeTuple5),
	decodeTuple6: F7(decodeTuple6),
	decodeTuple7: F8(decodeTuple7),
	decodeTuple8: F9(decodeTuple8),

	andThen: F2(andThen),
	customAndThen: F2(customAndThen),
	fail: fail,
	succeed: succeed,
	oneOf: oneOf,

	identity: identity,
	encodeNull: null,
	encodeArray: _elm_lang$core$Native_Array.toJSArray,
	encodeList: _elm_lang$core$Native_List.toArray,
	encodeObject: encodeObject,

	equality: equality
};

}();

var _elm_lang$core$Json_Encode$list = _elm_lang$core$Native_Json.encodeList;
var _elm_lang$core$Json_Encode$array = _elm_lang$core$Native_Json.encodeArray;
var _elm_lang$core$Json_Encode$object = _elm_lang$core$Native_Json.encodeObject;
var _elm_lang$core$Json_Encode$null = _elm_lang$core$Native_Json.encodeNull;
var _elm_lang$core$Json_Encode$bool = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$float = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$int = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$string = _elm_lang$core$Native_Json.identity;
var _elm_lang$core$Json_Encode$encode = _elm_lang$core$Native_Json.encode;
var _elm_lang$core$Json_Encode$Value = {ctor: 'Value'};

var _elm_lang$core$Json_Decode$tuple8 = _elm_lang$core$Native_Json.decodeTuple8;
var _elm_lang$core$Json_Decode$tuple7 = _elm_lang$core$Native_Json.decodeTuple7;
var _elm_lang$core$Json_Decode$tuple6 = _elm_lang$core$Native_Json.decodeTuple6;
var _elm_lang$core$Json_Decode$tuple5 = _elm_lang$core$Native_Json.decodeTuple5;
var _elm_lang$core$Json_Decode$tuple4 = _elm_lang$core$Native_Json.decodeTuple4;
var _elm_lang$core$Json_Decode$tuple3 = _elm_lang$core$Native_Json.decodeTuple3;
var _elm_lang$core$Json_Decode$tuple2 = _elm_lang$core$Native_Json.decodeTuple2;
var _elm_lang$core$Json_Decode$tuple1 = _elm_lang$core$Native_Json.decodeTuple1;
var _elm_lang$core$Json_Decode$succeed = _elm_lang$core$Native_Json.succeed;
var _elm_lang$core$Json_Decode$fail = _elm_lang$core$Native_Json.fail;
var _elm_lang$core$Json_Decode$andThen = _elm_lang$core$Native_Json.andThen;
var _elm_lang$core$Json_Decode$customDecoder = _elm_lang$core$Native_Json.customAndThen;
var _elm_lang$core$Json_Decode$decodeValue = _elm_lang$core$Native_Json.run;
var _elm_lang$core$Json_Decode$value = _elm_lang$core$Native_Json.decodePrimitive('value');
var _elm_lang$core$Json_Decode$maybe = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'maybe', decoder);
};
var _elm_lang$core$Json_Decode$null = _elm_lang$core$Native_Json.decodeNull;
var _elm_lang$core$Json_Decode$array = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'array', decoder);
};
var _elm_lang$core$Json_Decode$list = function (decoder) {
	return A2(_elm_lang$core$Native_Json.decodeContainer, 'list', decoder);
};
var _elm_lang$core$Json_Decode$bool = _elm_lang$core$Native_Json.decodePrimitive('bool');
var _elm_lang$core$Json_Decode$int = _elm_lang$core$Native_Json.decodePrimitive('int');
var _elm_lang$core$Json_Decode$float = _elm_lang$core$Native_Json.decodePrimitive('float');
var _elm_lang$core$Json_Decode$string = _elm_lang$core$Native_Json.decodePrimitive('string');
var _elm_lang$core$Json_Decode$oneOf = _elm_lang$core$Native_Json.oneOf;
var _elm_lang$core$Json_Decode$keyValuePairs = _elm_lang$core$Native_Json.decodeKeyValuePairs;
var _elm_lang$core$Json_Decode$object8 = _elm_lang$core$Native_Json.decodeObject8;
var _elm_lang$core$Json_Decode$object7 = _elm_lang$core$Native_Json.decodeObject7;
var _elm_lang$core$Json_Decode$object6 = _elm_lang$core$Native_Json.decodeObject6;
var _elm_lang$core$Json_Decode$object5 = _elm_lang$core$Native_Json.decodeObject5;
var _elm_lang$core$Json_Decode$object4 = _elm_lang$core$Native_Json.decodeObject4;
var _elm_lang$core$Json_Decode$object3 = _elm_lang$core$Native_Json.decodeObject3;
var _elm_lang$core$Json_Decode$object2 = _elm_lang$core$Native_Json.decodeObject2;
var _elm_lang$core$Json_Decode$object1 = _elm_lang$core$Native_Json.decodeObject1;
var _elm_lang$core$Json_Decode_ops = _elm_lang$core$Json_Decode_ops || {};
_elm_lang$core$Json_Decode_ops[':='] = _elm_lang$core$Native_Json.decodeField;
var _elm_lang$core$Json_Decode$at = F2(
	function (fields, decoder) {
		return A3(
			_elm_lang$core$List$foldr,
			F2(
				function (x, y) {
					return A2(_elm_lang$core$Json_Decode_ops[':='], x, y);
				}),
			decoder,
			fields);
	});
var _elm_lang$core$Json_Decode$decodeString = _elm_lang$core$Native_Json.runOnString;
var _elm_lang$core$Json_Decode$map = _elm_lang$core$Native_Json.decodeObject1;
var _elm_lang$core$Json_Decode$dict = function (decoder) {
	return A2(
		_elm_lang$core$Json_Decode$map,
		_elm_lang$core$Dict$fromList,
		_elm_lang$core$Json_Decode$keyValuePairs(decoder));
};
var _elm_lang$core$Json_Decode$Decoder = {ctor: 'Decoder'};

//import Native.Json //

var _elm_lang$virtual_dom$Native_VirtualDom = function() {

var STYLE_KEY = 'STYLE';
var EVENT_KEY = 'EVENT';
var ATTR_KEY = 'ATTR';
var ATTR_NS_KEY = 'ATTR_NS';



////////////  VIRTUAL DOM NODES  ////////////


function text(string)
{
	return {
		type: 'text',
		text: string
	};
}


function node(tag)
{
	return F2(function(factList, kidList) {
		return nodeHelp(tag, factList, kidList);
	});
}


function nodeHelp(tag, factList, kidList)
{
	var organized = organizeFacts(factList);
	var namespace = organized.namespace;
	var facts = organized.facts;

	var children = [];
	var descendantsCount = 0;
	while (kidList.ctor !== '[]')
	{
		var kid = kidList._0;
		descendantsCount += (kid.descendantsCount || 0);
		children.push(kid);
		kidList = kidList._1;
	}
	descendantsCount += children.length;

	return {
		type: 'node',
		tag: tag,
		facts: facts,
		children: children,
		namespace: namespace,
		descendantsCount: descendantsCount
	};
}


function custom(factList, model, impl)
{
	var facts = organizeFacts(factList).facts;

	return {
		type: 'custom',
		facts: facts,
		model: model,
		impl: impl
	};
}


function map(tagger, node)
{
	return {
		type: 'tagger',
		tagger: tagger,
		node: node,
		descendantsCount: 1 + (node.descendantsCount || 0)
	};
}


function thunk(func, args, thunk)
{
	return {
		type: 'thunk',
		func: func,
		args: args,
		thunk: thunk,
		node: null
	};
}

function lazy(fn, a)
{
	return thunk(fn, [a], function() {
		return fn(a);
	});
}

function lazy2(fn, a, b)
{
	return thunk(fn, [a,b], function() {
		return A2(fn, a, b);
	});
}

function lazy3(fn, a, b, c)
{
	return thunk(fn, [a,b,c], function() {
		return A3(fn, a, b, c);
	});
}



// FACTS


function organizeFacts(factList)
{
	var namespace, facts = {};

	while (factList.ctor !== '[]')
	{
		var entry = factList._0;
		var key = entry.key;

		if (key === ATTR_KEY || key === ATTR_NS_KEY || key === EVENT_KEY)
		{
			var subFacts = facts[key] || {};
			subFacts[entry.realKey] = entry.value;
			facts[key] = subFacts;
		}
		else if (key === STYLE_KEY)
		{
			var styles = facts[key] || {};
			var styleList = entry.value;
			while (styleList.ctor !== '[]')
			{
				var style = styleList._0;
				styles[style._0] = style._1;
				styleList = styleList._1;
			}
			facts[key] = styles;
		}
		else if (key === 'namespace')
		{
			namespace = entry.value;
		}
		else
		{
			facts[key] = entry.value;
		}
		factList = factList._1;
	}

	return {
		facts: facts,
		namespace: namespace
	};
}



////////////  PROPERTIES AND ATTRIBUTES  ////////////


function style(value)
{
	return {
		key: STYLE_KEY,
		value: value
	};
}


function property(key, value)
{
	return {
		key: key,
		value: value
	};
}


function attribute(key, value)
{
	return {
		key: ATTR_KEY,
		realKey: key,
		value: value
	};
}


function attributeNS(namespace, key, value)
{
	return {
		key: ATTR_NS_KEY,
		realKey: key,
		value: {
			value: value,
			namespace: namespace
		}
	};
}


function on(name, options, decoder)
{
	return {
		key: EVENT_KEY,
		realKey: name,
		value: {
			options: options,
			decoder: decoder
		}
	};
}


function equalEvents(a, b)
{
	if (!a.options === b.options)
	{
		if (a.stopPropagation !== b.stopPropagation || a.preventDefault !== b.preventDefault)
		{
			return false;
		}
	}
	return _elm_lang$core$Native_Json.equality(a.decoder, b.decoder);
}



////////////  RENDERER  ////////////


function renderer(parent, tagger, initialVirtualNode)
{
	var eventNode = { tagger: tagger, parent: null };

	var domNode = render(initialVirtualNode, eventNode);
	parent.appendChild(domNode);

	var state = 'NO_REQUEST';
	var currentVirtualNode = initialVirtualNode;
	var nextVirtualNode = initialVirtualNode;

	function registerVirtualNode(vNode)
	{
		if (state === 'NO_REQUEST')
		{
			rAF(updateIfNeeded);
		}
		state = 'PENDING_REQUEST';
		nextVirtualNode = vNode;
	}

	function updateIfNeeded()
	{
		switch (state)
		{
			case 'NO_REQUEST':
				throw new Error(
					'Unexpected draw callback.\n' +
					'Please report this to <https://github.com/elm-lang/core/issues>.'
				);

			case 'PENDING_REQUEST':
				rAF(updateIfNeeded);
				state = 'EXTRA_REQUEST';

				var patches = diff(currentVirtualNode, nextVirtualNode);
				domNode = applyPatches(domNode, currentVirtualNode, patches, eventNode);
				currentVirtualNode = nextVirtualNode;

				return;

			case 'EXTRA_REQUEST':
				state = 'NO_REQUEST';
				return;
		}
	}

	return { update: registerVirtualNode };
}


var rAF =
	typeof requestAnimationFrame !== 'undefined'
		? requestAnimationFrame
		: function(cb) { setTimeout(cb, 1000 / 60); };



////////////  RENDER  ////////////


function render(vNode, eventNode)
{
	switch (vNode.type)
	{
		case 'thunk':
			if (!vNode.node)
			{
				vNode.node = vNode.thunk();
			}
			return render(vNode.node, eventNode);

		case 'tagger':
			var subNode = vNode.node;
			var tagger = vNode.tagger;
		
			while (subNode.type === 'tagger')
			{
				typeof tagger !== 'object'
					? tagger = [tagger, subNode.tagger]
					: tagger.push(subNode.tagger);

				subNode = subNode.node;
			}
            
			var subEventRoot = {
				tagger: tagger,
				parent: eventNode
			};
			
			var domNode = render(subNode, subEventRoot);
			domNode.elm_event_node_ref = subEventRoot;
			return domNode;

		case 'text':
			return document.createTextNode(vNode.text);

		case 'node':
			var domNode = vNode.namespace
				? document.createElementNS(vNode.namespace, vNode.tag)
				: document.createElement(vNode.tag);

			applyFacts(domNode, eventNode, vNode.facts);

			var children = vNode.children;

			for (var i = 0; i < children.length; i++)
			{
				domNode.appendChild(render(children[i], eventNode));
			}

			return domNode;

		case 'custom':
			var domNode = vNode.impl.render(vNode.model);
			applyFacts(domNode, eventNode, vNode.facts);
			return domNode;
	}
}



////////////  APPLY FACTS  ////////////


function applyFacts(domNode, eventNode, facts)
{
	for (var key in facts)
	{
		var value = facts[key];

		switch (key)
		{
			case STYLE_KEY:
				applyStyles(domNode, value);
				break;

			case EVENT_KEY:
				applyEvents(domNode, eventNode, value);
				break;

			case ATTR_KEY:
				applyAttrs(domNode, value);
				break;

			case ATTR_NS_KEY:
				applyAttrsNS(domNode, value);
				break;

			case 'value':
				if (domNode[key] !== value)
				{
					domNode[key] = value;
				}
				break;

			default:
				domNode[key] = value;
				break;
		}
	}
}

function applyStyles(domNode, styles)
{
	var domNodeStyle = domNode.style;

	for (var key in styles)
	{
		domNodeStyle[key] = styles[key];
	}
}

function applyEvents(domNode, eventNode, events)
{
	var allHandlers = domNode.elm_handlers || {};

	for (var key in events)
	{
		var handler = allHandlers[key];
		var value = events[key];

		if (typeof value === 'undefined')
		{
			domNode.removeEventListener(key, handler);
			allHandlers[key] = undefined;
		}
		else if (typeof handler === 'undefined')
		{
			var handler = makeEventHandler(eventNode, value);
			domNode.addEventListener(key, handler);
			allHandlers[key] = handler;
		}
		else
		{
			handler.info = value;
		}
	}

	domNode.elm_handlers = allHandlers;
}

function makeEventHandler(eventNode, info)
{
	function eventHandler(event)
	{
		var info = eventHandler.info;

		var value = A2(_elm_lang$core$Native_Json.run, info.decoder, event);

		if (value.ctor === 'Ok')
		{
			var options = info.options;
			if (options.stopPropagation)
			{
				event.stopPropagation();
			}
			if (options.preventDefault)
			{
				event.preventDefault();
			}

			var message = value._0;

			var currentEventNode = eventNode;
			while (currentEventNode)
			{
				var tagger = currentEventNode.tagger;
				if (typeof tagger === 'function')
				{
					message = tagger(message);
				}
				else
				{
					for (var i = tagger.length; i--; )
					{
						message = tagger[i](message);
					}
				}
				currentEventNode = currentEventNode.parent;
			}
		}
	};

	eventHandler.info = info;

	return eventHandler;
}

function applyAttrs(domNode, attrs)
{
	for (var key in attrs)
	{
		var value = attrs[key];
		if (typeof value === 'undefined')
		{
			domNode.removeAttribute(key);
		}
		else
		{
			domNode.setAttribute(key, value);
		}
	}
}

function applyAttrsNS(domNode, nsAttrs)
{
	for (var key in nsAttrs)
	{
		var pair = nsAttrs[key];
		var namespace = pair.namespace;
		var value = pair.value;

		if (typeof value === 'undefined')
		{
			domNode.removeAttributeNS(namespace, key);
		}
		else
		{
			domNode.setAttributeNS(namespace, key, value);
		}
	}
}



////////////  DIFF  ////////////


function diff(a, b)
{
	var patches = [];
	diffHelp(a, b, patches, 0);
	return patches;
}


function makePatch(type, index, data)
{
	return {
		index: index,
		type: type,
		data: data,
		domNode: null,
		eventNode: null
	};
}


function diffHelp(a, b, patches, index)
{
	if (a === b)
	{
		return;
	}

	var aType = a.type;
	var bType = b.type;

	// Bail if you run into different types of nodes. Implies that the
	// structure has changed significantly and it's not worth a diff.
	if (aType !== bType)
	{
		patches.push(makePatch('p-redraw', index, b));
		return;
	}

	// Now we know that both nodes are the same type.
	switch (bType)
	{
		case 'thunk':
			var aArgs = a.args;
			var bArgs = b.args;
			var i = aArgs.length;
			var same = a.func === b.func && i === bArgs.length;
			while (same && i--)
			{
				same = aArgs[i] === bArgs[i];
			}
			if (same)
			{
				b.node = a.node;
				return;
			}
			b.node = b.thunk();
			var subPatches = [];
			diffHelp(a.node, b.node, subPatches, 0);
			if (subPatches.length > 0)
			{
				patches.push(makePatch('p-thunk', index, subPatches));
			}
			return;

		case 'tagger':
			// gather nested taggers
			var aTaggers = a.tagger;
			var bTaggers = b.tagger;
			var nesting = false;

			var aSubNode = a.node;
			while (aSubNode.type === 'tagger')
			{
				nesting = true;

				typeof aTaggers !== 'object'
					? aTaggers = [aTaggers, aSubNode.tagger]
					: aTaggers.push(aSubNode.tagger);

				aSubNode = aSubNode.node;
			}

			var bSubNode = b.node;
			while (bSubNode.type === 'tagger')
			{
				nesting = true;

				typeof bTaggers !== 'object'
					? bTaggers = [bTaggers, bSubNode.tagger]
					: bTaggers.push(bSubNode.tagger);

				bSubNode = bSubNode.node;
			}

			// Just bail if different numbers of taggers. This implies the
			// structure of the virtual DOM has changed.
			if (nesting && aTaggers.length !== bTaggers.length)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			// check if taggers are "the same"
			if (nesting ? !pairwiseRefEqual(aTaggers, bTaggers) : aTaggers !== bTaggers)
			{
				patches.push(makePatch('p-tagger', index, bTaggers));
			}

			// diff everything below the taggers
			diffHelp(aSubNode, bSubNode, patches, index + 1);
			return;

		case 'text':
			if (a.text !== b.text)
			{
				patches.push(makePatch('p-text', index, b.text));
				return;
			}

			return;

		case 'node':
			// Bail if obvious indicators have changed. Implies more serious
			// structural changes such that it's not worth it to diff.
			if (a.tag !== b.tag || a.namespace !== b.namespace)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);

			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			diffChildren(a, b, patches, index);
			return;

		case 'custom':
			if (a.impl !== b.impl)
			{
				patches.push(makePatch('p-redraw', index, b));
				return;
			}

			var factsDiff = diffFacts(a.facts, b.facts);
			if (typeof factsDiff !== 'undefined')
			{
				patches.push(makePatch('p-facts', index, factsDiff));
			}

			var patch = b.impl.diff(a,b);
			if (patch)
			{
				patches.push(makePatch('p-custom', index, patch));
				return;
			}

			return;
	}
}


// assumes the incoming arrays are the same length
function pairwiseRefEqual(as, bs)
{
	for (var i = 0; i < as.length; i++)
	{
		if (as[i] !== bs[i])
		{
			return false;
		}
	}

	return true;
}


// TODO Instead of creating a new diff object, it's possible to just test if
// there *is* a diff. During the actual patch, do the diff again and make the
// modifications directly. This way, there's no new allocations. Worth it?
function diffFacts(a, b, category)
{
	var diff;

	// look for changes and removals
	for (var aKey in a)
	{
		if (aKey === STYLE_KEY || aKey === EVENT_KEY || aKey === ATTR_KEY || aKey === ATTR_NS_KEY)
		{
			var subDiff = diffFacts(a[aKey], b[aKey] || {}, aKey);
			if (subDiff)
			{
				diff = diff || {};
				diff[aKey] = subDiff;
			}
			continue;
		}

		// remove if not in the new facts
		if (!(aKey in b))
		{
			diff = diff || {};
			diff[aKey] =
				(typeof category === 'undefined')
					? (typeof a[aKey] === 'string' ? '' : null)
					:
				(category === STYLE_KEY)
					? ''
					:
				(category === EVENT_KEY || category === ATTR_KEY)
					? undefined
					:
				{ namespace: a[aKey].namespace, value: undefined };

			continue;
		}

		var aValue = a[aKey];
		var bValue = b[aKey];

		// reference equal, so don't worry about it
		if (aValue === bValue && aKey !== 'value'
			|| category === EVENT_KEY && equalEvents(aValue, bValue))
		{
			continue;
		}

		diff = diff || {};
		diff[aKey] = bValue;
	}

	// add new stuff
	for (var bKey in b)
	{
		if (!(bKey in a))
		{
			diff = diff || {};
			diff[bKey] = b[bKey];
		}
	}

	return diff;
}


function diffChildren(aParent, bParent, patches, rootIndex)
{
	var aChildren = aParent.children;
	var bChildren = bParent.children;

	var aLen = aChildren.length;
	var bLen = bChildren.length;

	// FIGURE OUT IF THERE ARE INSERTS OR REMOVALS

	if (aLen > bLen)
	{
		patches.push(makePatch('p-remove', rootIndex, aLen - bLen));
	}
	else if (aLen < bLen)
	{
		patches.push(makePatch('p-insert', rootIndex, bChildren.slice(aLen)));
	}

	// PAIRWISE DIFF EVERYTHING ELSE

	var index = rootIndex;
	var minLen = aLen < bLen ? aLen : bLen;
	for (var i = 0; i < minLen; i++)
	{
		index++;
		var aChild = aChildren[i];
		diffHelp(aChild, bChildren[i], patches, index);
		index += aChild.descendantsCount || 0;
	}
}



////////////  ADD DOM NODES  ////////////
//
// Each DOM node has an "index" assigned in order of traversal. It is important
// to minimize our crawl over the actual DOM, so these indexes (along with the
// descendantsCount of virtual nodes) let us skip touching entire subtrees of
// the DOM if we know there are no patches there.


function addDomNodes(domNode, vNode, patches, eventNode)
{
	addDomNodesHelp(domNode, vNode, patches, 0, 0, vNode.descendantsCount, eventNode);
}


// assumes `patches` is non-empty and indexes increase monotonically.
function addDomNodesHelp(domNode, vNode, patches, i, low, high, eventNode)
{
	var patch = patches[i];
	var index = patch.index;

	while (index === low)
	{
		var patchType = patch.type;

		if (patchType === 'p-thunk')
		{
			addDomNodes(domNode, vNode.node, patch.data, eventNode);
		}
		else
		{
			patch.domNode = domNode;
			patch.eventNode = eventNode;
		}

		i++;

		if (!(patch = patches[i]) || (index = patch.index) > high)
		{
			return i;
		}
	}

	switch (vNode.type)
	{
		case 'tagger':
			var subNode = vNode.node;
            
			while (subNode.type === "tagger")
			{
				subNode = subNode.node;
			}
            
			return addDomNodesHelp(domNode, subNode, patches, i, low + 1, high, domNode.elm_event_node_ref);

		case 'node':
			var vChildren = vNode.children;
			var childNodes = domNode.childNodes;
			for (var j = 0; j < vChildren.length; j++)
			{
				low++;
				var vChild = vChildren[j];
				var nextLow = low + (vChild.descendantsCount || 0);
				if (low <= index && index <= nextLow)
				{
					i = addDomNodesHelp(childNodes[j], vChild, patches, i, low, nextLow, eventNode);
					if (!(patch = patches[i]) || (index = patch.index) > high)
					{
						return i;
					}
				}
				low = nextLow;
			}
			return i;

		case 'text':
		case 'thunk':
			throw new Error('should never traverse `text` or `thunk` nodes like this');
	}
}



////////////  APPLY PATCHES  ////////////


function applyPatches(rootDomNode, oldVirtualNode, patches, eventNode)
{
	if (patches.length === 0)
	{
		return rootDomNode;
	}

	addDomNodes(rootDomNode, oldVirtualNode, patches, eventNode);
	return applyPatchesHelp(rootDomNode, patches);
}

function applyPatchesHelp(rootDomNode, patches)
{
	for (var i = 0; i < patches.length; i++)
	{
		var patch = patches[i];
		var localDomNode = patch.domNode
		var newNode = applyPatch(localDomNode, patch);
		if (localDomNode === rootDomNode)
		{
			rootDomNode = newNode;
		}
	}
	return rootDomNode;
}

function applyPatch(domNode, patch)
{
	switch (patch.type)
	{
		case 'p-redraw':
			return redraw(domNode, patch.data, patch.eventNode);

		case 'p-facts':
			applyFacts(domNode, patch.eventNode, patch.data);
			return domNode;

		case 'p-text':
			domNode.replaceData(0, domNode.length, patch.data);
			return domNode;

		case 'p-thunk':
			return applyPatchesHelp(domNode, patch.data);

		case 'p-tagger':
			domNode.elm_event_node_ref.tagger = patch.data;
			return domNode;

		case 'p-remove':
			var i = patch.data;
			while (i--)
			{
				domNode.removeChild(domNode.lastChild);
			}
			return domNode;

		case 'p-insert':
			var newNodes = patch.data;
			for (var i = 0; i < newNodes.length; i++)
			{
				domNode.appendChild(render(newNodes[i], patch.eventNode));
			}
			return domNode;

		case 'p-custom':
			var impl = patch.data;
			return impl.applyPatch(domNode, impl.data);

		default:
			throw new Error('Ran into an unknown patch!');
	}
}


function redraw(domNode, vNode, eventNode)
{
	var parentNode = domNode.parentNode;
	var newNode = render(vNode, eventNode);

	if (typeof newNode.elm_event_node_ref === 'undefined')
	{
		newNode.elm_event_node_ref = domNode.elm_event_node_ref;
	}

	if (parentNode && newNode !== domNode)
	{
		parentNode.replaceChild(newNode, domNode);
	}
	return newNode;
}



////////////  PROGRAMS  ////////////


function programWithFlags(details)
{
	return {
		init: details.init,
		update: details.update,
		subscriptions: details.subscriptions,
		view: details.view,
		renderer: renderer
	};
}


return {
	node: node,
	text: text,

	custom: custom,

	map: F2(map),

	on: F3(on),
	style: style,
	property: F2(property),
	attribute: F2(attribute),
	attributeNS: F3(attributeNS),

	lazy: F2(lazy),
	lazy2: F3(lazy2),
	lazy3: F4(lazy3),

	programWithFlags: programWithFlags
};

}();
var _elm_lang$virtual_dom$VirtualDom$programWithFlags = _elm_lang$virtual_dom$Native_VirtualDom.programWithFlags;
var _elm_lang$virtual_dom$VirtualDom$lazy3 = _elm_lang$virtual_dom$Native_VirtualDom.lazy3;
var _elm_lang$virtual_dom$VirtualDom$lazy2 = _elm_lang$virtual_dom$Native_VirtualDom.lazy2;
var _elm_lang$virtual_dom$VirtualDom$lazy = _elm_lang$virtual_dom$Native_VirtualDom.lazy;
var _elm_lang$virtual_dom$VirtualDom$defaultOptions = {stopPropagation: false, preventDefault: false};
var _elm_lang$virtual_dom$VirtualDom$onWithOptions = _elm_lang$virtual_dom$Native_VirtualDom.on;
var _elm_lang$virtual_dom$VirtualDom$on = F2(
	function (eventName, decoder) {
		return A3(_elm_lang$virtual_dom$VirtualDom$onWithOptions, eventName, _elm_lang$virtual_dom$VirtualDom$defaultOptions, decoder);
	});
var _elm_lang$virtual_dom$VirtualDom$style = _elm_lang$virtual_dom$Native_VirtualDom.style;
var _elm_lang$virtual_dom$VirtualDom$attributeNS = _elm_lang$virtual_dom$Native_VirtualDom.attributeNS;
var _elm_lang$virtual_dom$VirtualDom$attribute = _elm_lang$virtual_dom$Native_VirtualDom.attribute;
var _elm_lang$virtual_dom$VirtualDom$property = _elm_lang$virtual_dom$Native_VirtualDom.property;
var _elm_lang$virtual_dom$VirtualDom$map = _elm_lang$virtual_dom$Native_VirtualDom.map;
var _elm_lang$virtual_dom$VirtualDom$text = _elm_lang$virtual_dom$Native_VirtualDom.text;
var _elm_lang$virtual_dom$VirtualDom$node = _elm_lang$virtual_dom$Native_VirtualDom.node;
var _elm_lang$virtual_dom$VirtualDom$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});
var _elm_lang$virtual_dom$VirtualDom$Node = {ctor: 'Node'};
var _elm_lang$virtual_dom$VirtualDom$Property = {ctor: 'Property'};

var _elm_lang$html$Html$text = _elm_lang$virtual_dom$VirtualDom$text;
var _elm_lang$html$Html$node = _elm_lang$virtual_dom$VirtualDom$node;
var _elm_lang$html$Html$body = _elm_lang$html$Html$node('body');
var _elm_lang$html$Html$section = _elm_lang$html$Html$node('section');
var _elm_lang$html$Html$nav = _elm_lang$html$Html$node('nav');
var _elm_lang$html$Html$article = _elm_lang$html$Html$node('article');
var _elm_lang$html$Html$aside = _elm_lang$html$Html$node('aside');
var _elm_lang$html$Html$h1 = _elm_lang$html$Html$node('h1');
var _elm_lang$html$Html$h2 = _elm_lang$html$Html$node('h2');
var _elm_lang$html$Html$h3 = _elm_lang$html$Html$node('h3');
var _elm_lang$html$Html$h4 = _elm_lang$html$Html$node('h4');
var _elm_lang$html$Html$h5 = _elm_lang$html$Html$node('h5');
var _elm_lang$html$Html$h6 = _elm_lang$html$Html$node('h6');
var _elm_lang$html$Html$header = _elm_lang$html$Html$node('header');
var _elm_lang$html$Html$footer = _elm_lang$html$Html$node('footer');
var _elm_lang$html$Html$address = _elm_lang$html$Html$node('address');
var _elm_lang$html$Html$main$ = _elm_lang$html$Html$node('main');
var _elm_lang$html$Html$p = _elm_lang$html$Html$node('p');
var _elm_lang$html$Html$hr = _elm_lang$html$Html$node('hr');
var _elm_lang$html$Html$pre = _elm_lang$html$Html$node('pre');
var _elm_lang$html$Html$blockquote = _elm_lang$html$Html$node('blockquote');
var _elm_lang$html$Html$ol = _elm_lang$html$Html$node('ol');
var _elm_lang$html$Html$ul = _elm_lang$html$Html$node('ul');
var _elm_lang$html$Html$li = _elm_lang$html$Html$node('li');
var _elm_lang$html$Html$dl = _elm_lang$html$Html$node('dl');
var _elm_lang$html$Html$dt = _elm_lang$html$Html$node('dt');
var _elm_lang$html$Html$dd = _elm_lang$html$Html$node('dd');
var _elm_lang$html$Html$figure = _elm_lang$html$Html$node('figure');
var _elm_lang$html$Html$figcaption = _elm_lang$html$Html$node('figcaption');
var _elm_lang$html$Html$div = _elm_lang$html$Html$node('div');
var _elm_lang$html$Html$a = _elm_lang$html$Html$node('a');
var _elm_lang$html$Html$em = _elm_lang$html$Html$node('em');
var _elm_lang$html$Html$strong = _elm_lang$html$Html$node('strong');
var _elm_lang$html$Html$small = _elm_lang$html$Html$node('small');
var _elm_lang$html$Html$s = _elm_lang$html$Html$node('s');
var _elm_lang$html$Html$cite = _elm_lang$html$Html$node('cite');
var _elm_lang$html$Html$q = _elm_lang$html$Html$node('q');
var _elm_lang$html$Html$dfn = _elm_lang$html$Html$node('dfn');
var _elm_lang$html$Html$abbr = _elm_lang$html$Html$node('abbr');
var _elm_lang$html$Html$time = _elm_lang$html$Html$node('time');
var _elm_lang$html$Html$code = _elm_lang$html$Html$node('code');
var _elm_lang$html$Html$var = _elm_lang$html$Html$node('var');
var _elm_lang$html$Html$samp = _elm_lang$html$Html$node('samp');
var _elm_lang$html$Html$kbd = _elm_lang$html$Html$node('kbd');
var _elm_lang$html$Html$sub = _elm_lang$html$Html$node('sub');
var _elm_lang$html$Html$sup = _elm_lang$html$Html$node('sup');
var _elm_lang$html$Html$i = _elm_lang$html$Html$node('i');
var _elm_lang$html$Html$b = _elm_lang$html$Html$node('b');
var _elm_lang$html$Html$u = _elm_lang$html$Html$node('u');
var _elm_lang$html$Html$mark = _elm_lang$html$Html$node('mark');
var _elm_lang$html$Html$ruby = _elm_lang$html$Html$node('ruby');
var _elm_lang$html$Html$rt = _elm_lang$html$Html$node('rt');
var _elm_lang$html$Html$rp = _elm_lang$html$Html$node('rp');
var _elm_lang$html$Html$bdi = _elm_lang$html$Html$node('bdi');
var _elm_lang$html$Html$bdo = _elm_lang$html$Html$node('bdo');
var _elm_lang$html$Html$span = _elm_lang$html$Html$node('span');
var _elm_lang$html$Html$br = _elm_lang$html$Html$node('br');
var _elm_lang$html$Html$wbr = _elm_lang$html$Html$node('wbr');
var _elm_lang$html$Html$ins = _elm_lang$html$Html$node('ins');
var _elm_lang$html$Html$del = _elm_lang$html$Html$node('del');
var _elm_lang$html$Html$img = _elm_lang$html$Html$node('img');
var _elm_lang$html$Html$iframe = _elm_lang$html$Html$node('iframe');
var _elm_lang$html$Html$embed = _elm_lang$html$Html$node('embed');
var _elm_lang$html$Html$object = _elm_lang$html$Html$node('object');
var _elm_lang$html$Html$param = _elm_lang$html$Html$node('param');
var _elm_lang$html$Html$video = _elm_lang$html$Html$node('video');
var _elm_lang$html$Html$audio = _elm_lang$html$Html$node('audio');
var _elm_lang$html$Html$source = _elm_lang$html$Html$node('source');
var _elm_lang$html$Html$track = _elm_lang$html$Html$node('track');
var _elm_lang$html$Html$canvas = _elm_lang$html$Html$node('canvas');
var _elm_lang$html$Html$svg = _elm_lang$html$Html$node('svg');
var _elm_lang$html$Html$math = _elm_lang$html$Html$node('math');
var _elm_lang$html$Html$table = _elm_lang$html$Html$node('table');
var _elm_lang$html$Html$caption = _elm_lang$html$Html$node('caption');
var _elm_lang$html$Html$colgroup = _elm_lang$html$Html$node('colgroup');
var _elm_lang$html$Html$col = _elm_lang$html$Html$node('col');
var _elm_lang$html$Html$tbody = _elm_lang$html$Html$node('tbody');
var _elm_lang$html$Html$thead = _elm_lang$html$Html$node('thead');
var _elm_lang$html$Html$tfoot = _elm_lang$html$Html$node('tfoot');
var _elm_lang$html$Html$tr = _elm_lang$html$Html$node('tr');
var _elm_lang$html$Html$td = _elm_lang$html$Html$node('td');
var _elm_lang$html$Html$th = _elm_lang$html$Html$node('th');
var _elm_lang$html$Html$form = _elm_lang$html$Html$node('form');
var _elm_lang$html$Html$fieldset = _elm_lang$html$Html$node('fieldset');
var _elm_lang$html$Html$legend = _elm_lang$html$Html$node('legend');
var _elm_lang$html$Html$label = _elm_lang$html$Html$node('label');
var _elm_lang$html$Html$input = _elm_lang$html$Html$node('input');
var _elm_lang$html$Html$button = _elm_lang$html$Html$node('button');
var _elm_lang$html$Html$select = _elm_lang$html$Html$node('select');
var _elm_lang$html$Html$datalist = _elm_lang$html$Html$node('datalist');
var _elm_lang$html$Html$optgroup = _elm_lang$html$Html$node('optgroup');
var _elm_lang$html$Html$option = _elm_lang$html$Html$node('option');
var _elm_lang$html$Html$textarea = _elm_lang$html$Html$node('textarea');
var _elm_lang$html$Html$keygen = _elm_lang$html$Html$node('keygen');
var _elm_lang$html$Html$output = _elm_lang$html$Html$node('output');
var _elm_lang$html$Html$progress = _elm_lang$html$Html$node('progress');
var _elm_lang$html$Html$meter = _elm_lang$html$Html$node('meter');
var _elm_lang$html$Html$details = _elm_lang$html$Html$node('details');
var _elm_lang$html$Html$summary = _elm_lang$html$Html$node('summary');
var _elm_lang$html$Html$menuitem = _elm_lang$html$Html$node('menuitem');
var _elm_lang$html$Html$menu = _elm_lang$html$Html$node('menu');

var _elm_lang$html$Html_Attributes$attribute = _elm_lang$virtual_dom$VirtualDom$attribute;
var _elm_lang$html$Html_Attributes$contextmenu = function (value) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'contextmenu', value);
};
var _elm_lang$html$Html_Attributes$property = _elm_lang$virtual_dom$VirtualDom$property;
var _elm_lang$html$Html_Attributes$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _elm_lang$html$Html_Attributes$class = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'className', name);
};
var _elm_lang$html$Html_Attributes$id = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'id', name);
};
var _elm_lang$html$Html_Attributes$title = function (name) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'title', name);
};
var _elm_lang$html$Html_Attributes$accesskey = function ($char) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'accessKey',
		_elm_lang$core$String$fromChar($char));
};
var _elm_lang$html$Html_Attributes$dir = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dir', value);
};
var _elm_lang$html$Html_Attributes$draggable = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'draggable', value);
};
var _elm_lang$html$Html_Attributes$dropzone = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'dropzone', value);
};
var _elm_lang$html$Html_Attributes$itemprop = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'itemprop', value);
};
var _elm_lang$html$Html_Attributes$lang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'lang', value);
};
var _elm_lang$html$Html_Attributes$tabindex = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'tabIndex',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$charset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'charset', value);
};
var _elm_lang$html$Html_Attributes$content = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'content', value);
};
var _elm_lang$html$Html_Attributes$httpEquiv = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'httpEquiv', value);
};
var _elm_lang$html$Html_Attributes$language = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'language', value);
};
var _elm_lang$html$Html_Attributes$src = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'src', value);
};
var _elm_lang$html$Html_Attributes$height = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'height',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$width = function (value) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'width',
		_elm_lang$core$Basics$toString(value));
};
var _elm_lang$html$Html_Attributes$alt = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'alt', value);
};
var _elm_lang$html$Html_Attributes$preload = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'preload', value);
};
var _elm_lang$html$Html_Attributes$poster = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'poster', value);
};
var _elm_lang$html$Html_Attributes$kind = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'kind', value);
};
var _elm_lang$html$Html_Attributes$srclang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srclang', value);
};
var _elm_lang$html$Html_Attributes$sandbox = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'sandbox', value);
};
var _elm_lang$html$Html_Attributes$srcdoc = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'srcdoc', value);
};
var _elm_lang$html$Html_Attributes$type$ = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'type', value);
};
var _elm_lang$html$Html_Attributes$value = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'value', value);
};
var _elm_lang$html$Html_Attributes$defaultValue = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'defaultValue', value);
};
var _elm_lang$html$Html_Attributes$placeholder = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'placeholder', value);
};
var _elm_lang$html$Html_Attributes$accept = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'accept', value);
};
var _elm_lang$html$Html_Attributes$acceptCharset = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'acceptCharset', value);
};
var _elm_lang$html$Html_Attributes$action = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'action', value);
};
var _elm_lang$html$Html_Attributes$autocomplete = function (bool) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'autocomplete',
		bool ? 'on' : 'off');
};
var _elm_lang$html$Html_Attributes$autosave = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'autosave', value);
};
var _elm_lang$html$Html_Attributes$enctype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'enctype', value);
};
var _elm_lang$html$Html_Attributes$formaction = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'formAction', value);
};
var _elm_lang$html$Html_Attributes$list = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'list', value);
};
var _elm_lang$html$Html_Attributes$minlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'minLength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$maxlength = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'maxLength',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$method = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'method', value);
};
var _elm_lang$html$Html_Attributes$name = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'name', value);
};
var _elm_lang$html$Html_Attributes$pattern = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'pattern', value);
};
var _elm_lang$html$Html_Attributes$size = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'size',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$for = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'htmlFor', value);
};
var _elm_lang$html$Html_Attributes$form = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'form', value);
};
var _elm_lang$html$Html_Attributes$max = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'max', value);
};
var _elm_lang$html$Html_Attributes$min = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'min', value);
};
var _elm_lang$html$Html_Attributes$step = function (n) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'step', n);
};
var _elm_lang$html$Html_Attributes$cols = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'cols',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$rows = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'rows',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$wrap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'wrap', value);
};
var _elm_lang$html$Html_Attributes$usemap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'useMap', value);
};
var _elm_lang$html$Html_Attributes$shape = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'shape', value);
};
var _elm_lang$html$Html_Attributes$coords = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'coords', value);
};
var _elm_lang$html$Html_Attributes$challenge = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'challenge', value);
};
var _elm_lang$html$Html_Attributes$keytype = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'keytype', value);
};
var _elm_lang$html$Html_Attributes$align = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'align', value);
};
var _elm_lang$html$Html_Attributes$cite = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'cite', value);
};
var _elm_lang$html$Html_Attributes$href = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'href', value);
};
var _elm_lang$html$Html_Attributes$target = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'target', value);
};
var _elm_lang$html$Html_Attributes$downloadAs = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'download', value);
};
var _elm_lang$html$Html_Attributes$hreflang = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'hreflang', value);
};
var _elm_lang$html$Html_Attributes$media = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'media', value);
};
var _elm_lang$html$Html_Attributes$ping = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'ping', value);
};
var _elm_lang$html$Html_Attributes$rel = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'rel', value);
};
var _elm_lang$html$Html_Attributes$datetime = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'datetime', value);
};
var _elm_lang$html$Html_Attributes$pubdate = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'pubdate', value);
};
var _elm_lang$html$Html_Attributes$start = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'start',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$colspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'colSpan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$headers = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'headers', value);
};
var _elm_lang$html$Html_Attributes$rowspan = function (n) {
	return A2(
		_elm_lang$html$Html_Attributes$stringProperty,
		'rowSpan',
		_elm_lang$core$Basics$toString(n));
};
var _elm_lang$html$Html_Attributes$scope = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'scope', value);
};
var _elm_lang$html$Html_Attributes$manifest = function (value) {
	return A2(_elm_lang$html$Html_Attributes$stringProperty, 'manifest', value);
};
var _elm_lang$html$Html_Attributes$boolProperty = F2(
	function (name, bool) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _elm_lang$html$Html_Attributes$hidden = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'hidden', bool);
};
var _elm_lang$html$Html_Attributes$contenteditable = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'contentEditable', bool);
};
var _elm_lang$html$Html_Attributes$spellcheck = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'spellcheck', bool);
};
var _elm_lang$html$Html_Attributes$async = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'async', bool);
};
var _elm_lang$html$Html_Attributes$defer = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'defer', bool);
};
var _elm_lang$html$Html_Attributes$scoped = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'scoped', bool);
};
var _elm_lang$html$Html_Attributes$autoplay = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autoplay', bool);
};
var _elm_lang$html$Html_Attributes$controls = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'controls', bool);
};
var _elm_lang$html$Html_Attributes$loop = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'loop', bool);
};
var _elm_lang$html$Html_Attributes$default = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'default', bool);
};
var _elm_lang$html$Html_Attributes$seamless = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'seamless', bool);
};
var _elm_lang$html$Html_Attributes$checked = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'checked', bool);
};
var _elm_lang$html$Html_Attributes$selected = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'selected', bool);
};
var _elm_lang$html$Html_Attributes$autofocus = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'autofocus', bool);
};
var _elm_lang$html$Html_Attributes$disabled = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'disabled', bool);
};
var _elm_lang$html$Html_Attributes$multiple = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'multiple', bool);
};
var _elm_lang$html$Html_Attributes$novalidate = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'noValidate', bool);
};
var _elm_lang$html$Html_Attributes$readonly = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'readOnly', bool);
};
var _elm_lang$html$Html_Attributes$required = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'required', bool);
};
var _elm_lang$html$Html_Attributes$ismap = function (value) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'isMap', value);
};
var _elm_lang$html$Html_Attributes$download = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'download', bool);
};
var _elm_lang$html$Html_Attributes$reversed = function (bool) {
	return A2(_elm_lang$html$Html_Attributes$boolProperty, 'reversed', bool);
};
var _elm_lang$html$Html_Attributes$classList = function (list) {
	return _elm_lang$html$Html_Attributes$class(
		A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$Basics$fst,
				A2(_elm_lang$core$List$filter, _elm_lang$core$Basics$snd, list))));
};
var _elm_lang$html$Html_Attributes$style = _elm_lang$virtual_dom$VirtualDom$style;

var _elm_community$html_extra$Html_Attributes_Extra$role = function (r) {
	return A2(_elm_lang$html$Html_Attributes$attribute, 'role', r);
};
var _elm_community$html_extra$Html_Attributes_Extra$intProperty = F2(
	function (name, $int) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$int($int));
	});
var _elm_community$html_extra$Html_Attributes_Extra$valueAsInt = function (value) {
	return A2(_elm_community$html_extra$Html_Attributes_Extra$intProperty, 'valueAsNumber', value);
};
var _elm_community$html_extra$Html_Attributes_Extra$floatProperty = F2(
	function (name, $float) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$float($float));
	});
var _elm_community$html_extra$Html_Attributes_Extra$valueAsFloat = function (value) {
	return A2(_elm_community$html_extra$Html_Attributes_Extra$floatProperty, 'valueAsNumber', value);
};
var _elm_community$html_extra$Html_Attributes_Extra$volume = _elm_community$html_extra$Html_Attributes_Extra$floatProperty('volume');
var _elm_community$html_extra$Html_Attributes_Extra$boolProperty = F2(
	function (name, bool) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$bool(bool));
	});
var _elm_community$html_extra$Html_Attributes_Extra$stringProperty = F2(
	function (name, string) {
		return A2(
			_elm_lang$html$Html_Attributes$property,
			name,
			_elm_lang$core$Json_Encode$string(string));
	});
var _elm_community$html_extra$Html_Attributes_Extra$low = _elm_community$html_extra$Html_Attributes_Extra$stringProperty('low');
var _elm_community$html_extra$Html_Attributes_Extra$high = _elm_community$html_extra$Html_Attributes_Extra$stringProperty('high');
var _elm_community$html_extra$Html_Attributes_Extra$optimum = _elm_community$html_extra$Html_Attributes_Extra$stringProperty('optimum');
var _elm_community$html_extra$Html_Attributes_Extra$innerHtml = _elm_community$html_extra$Html_Attributes_Extra$stringProperty('innerHTML');

var _elm_lang$html$Html_Events$keyCode = A2(_elm_lang$core$Json_Decode_ops[':='], 'keyCode', _elm_lang$core$Json_Decode$int);
var _elm_lang$html$Html_Events$targetChecked = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['target', 'checked']),
	_elm_lang$core$Json_Decode$bool);
var _elm_lang$html$Html_Events$targetValue = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['target', 'value']),
	_elm_lang$core$Json_Decode$string);
var _elm_lang$html$Html_Events$defaultOptions = _elm_lang$virtual_dom$VirtualDom$defaultOptions;
var _elm_lang$html$Html_Events$onWithOptions = _elm_lang$virtual_dom$VirtualDom$onWithOptions;
var _elm_lang$html$Html_Events$on = _elm_lang$virtual_dom$VirtualDom$on;
var _elm_lang$html$Html_Events$onFocus = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'focus',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onBlur = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'blur',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onSubmitOptions = _elm_lang$core$Native_Utils.update(
	_elm_lang$html$Html_Events$defaultOptions,
	{preventDefault: true});
var _elm_lang$html$Html_Events$onSubmit = function (msg) {
	return A3(
		_elm_lang$html$Html_Events$onWithOptions,
		'submit',
		_elm_lang$html$Html_Events$onSubmitOptions,
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onCheck = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetChecked));
};
var _elm_lang$html$Html_Events$onInput = function (tagger) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'input',
		A2(_elm_lang$core$Json_Decode$map, tagger, _elm_lang$html$Html_Events$targetValue));
};
var _elm_lang$html$Html_Events$onMouseOut = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseout',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseOver = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseover',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseLeave = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseleave',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseEnter = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseenter',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseUp = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mouseup',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onMouseDown = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'mousedown',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onDoubleClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'dblclick',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$onClick = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'click',
		_elm_lang$core$Json_Decode$succeed(msg));
};
var _elm_lang$html$Html_Events$Options = F2(
	function (a, b) {
		return {stopPropagation: a, preventDefault: b};
	});

var _elm_community$html_extra$Html_Events_Extra$targetValueIntParse = A2(_elm_lang$core$Json_Decode$customDecoder, _elm_lang$html$Html_Events$targetValue, _elm_lang$core$String$toInt);
var _elm_community$html_extra$Html_Events_Extra$targetValueFloatParse = A2(_elm_lang$core$Json_Decode$customDecoder, _elm_lang$html$Html_Events$targetValue, _elm_lang$core$String$toFloat);
var _elm_community$html_extra$Html_Events_Extra$targetValueMaybe = A2(
	_elm_lang$core$Json_Decode$customDecoder,
	_elm_lang$html$Html_Events$targetValue,
	function (s) {
		return _elm_lang$core$Result$Ok(
			_elm_lang$core$Native_Utils.eq(s, '') ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(s));
	});
var _elm_community$html_extra$Html_Events_Extra$targetValueMaybeInt = function () {
	var traverse = F2(
		function (f, mx) {
			var _p0 = mx;
			if (_p0.ctor === 'Nothing') {
				return _elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing);
			} else {
				return A2(
					_elm_lang$core$Result$map,
					_elm_lang$core$Maybe$Just,
					f(_p0._0));
			}
		});
	return A2(
		_elm_lang$core$Json_Decode$customDecoder,
		_elm_community$html_extra$Html_Events_Extra$targetValueMaybe,
		traverse(_elm_lang$core$String$toInt));
}();
var _elm_community$html_extra$Html_Events_Extra$targetValueMaybeFloatParse = function () {
	var traverse = F2(
		function (f, mx) {
			var _p1 = mx;
			if (_p1.ctor === 'Nothing') {
				return _elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing);
			} else {
				return A2(
					_elm_lang$core$Result$map,
					_elm_lang$core$Maybe$Just,
					f(_p1._0));
			}
		});
	return A2(
		_elm_lang$core$Json_Decode$customDecoder,
		_elm_community$html_extra$Html_Events_Extra$targetValueMaybe,
		traverse(_elm_lang$core$String$toFloat));
}();
var _elm_community$html_extra$Html_Events_Extra$targetValueMaybeIntParse = function () {
	var traverse = F2(
		function (f, mx) {
			var _p2 = mx;
			if (_p2.ctor === 'Nothing') {
				return _elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing);
			} else {
				return A2(
					_elm_lang$core$Result$map,
					_elm_lang$core$Maybe$Just,
					f(_p2._0));
			}
		});
	return A2(
		_elm_lang$core$Json_Decode$customDecoder,
		_elm_community$html_extra$Html_Events_Extra$targetValueMaybe,
		traverse(_elm_lang$core$String$toInt));
}();
var _elm_community$html_extra$Html_Events_Extra$targetValueInt = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['target', 'valueAsNumber']),
	_elm_lang$core$Json_Decode$int);
var _elm_community$html_extra$Html_Events_Extra$targetValueFloat = A2(
	_elm_lang$core$Json_Decode$customDecoder,
	A2(
		_elm_lang$core$Json_Decode$at,
		_elm_lang$core$Native_List.fromArray(
			['target', 'valueAsNumber']),
		_elm_lang$core$Json_Decode$float),
	function (v) {
		return _elm_lang$core$Basics$isNaN(v) ? _elm_lang$core$Result$Err('Not a number') : _elm_lang$core$Result$Ok(v);
	});
var _elm_community$html_extra$Html_Events_Extra$targetValueMaybeFloat = A2(
	_elm_lang$core$Json_Decode$andThen,
	_elm_community$html_extra$Html_Events_Extra$targetValueMaybe,
	function (mval) {
		var _p3 = mval;
		if (_p3.ctor === 'Nothing') {
			return _elm_lang$core$Json_Decode$succeed(_elm_lang$core$Maybe$Nothing);
		} else {
			return A2(_elm_lang$core$Json_Decode$map, _elm_lang$core$Maybe$Just, _elm_community$html_extra$Html_Events_Extra$targetValueFloat);
		}
	});
var _elm_community$html_extra$Html_Events_Extra$charCode = A2(
	_elm_lang$core$Json_Decode$map,
	function (_p4) {
		return A2(
			_elm_lang$core$Maybe$map,
			_elm_lang$core$Basics$fst,
			_elm_lang$core$String$uncons(_p4));
	},
	A2(_elm_lang$core$Json_Decode_ops[':='], 'charCode', _elm_lang$core$Json_Decode$string));

var _circuithub$elm_html_shorthand$Html_Shorthand_Type$EventDecodeError = F2(
	function (a, b) {
		return {event: a, reason: b};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$FormUpdate = F2(
	function (a, b) {
		return {onSubmit: a, onEnter: b};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$FieldUpdate = F3(
	function (a, b, c) {
		return {onInput: a, onEnter: b, onKeyboardLost: c};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$ButtonUpdate = function (a) {
	return {onClick: a};
};
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$SelectUpdate = function (a) {
	return {onSelect: a};
};
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$ClassParam = function (a) {
	return {$class: a};
};
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$ClassIdParam = F2(
	function (a, b) {
		return {$class: a, id: b};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$ClassCiteParam = F2(
	function (a, b) {
		return {$class: a, cite: b};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$AnchorParam = F2(
	function (a, b) {
		return {$class: a, href: b};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$ModParam = F3(
	function (a, b, c) {
		return {$class: a, cite: b, datetime: c};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$ImgParam = F5(
	function (a, b, c, d, e) {
		return {$class: a, src: b, width: c, height: d, alt: e};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$IframeParam = F7(
	function (a, b, c, d, e, f, g) {
		return {$class: a, name: b, src: c, width: d, height: e, sandbox: f, seamless: g};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$EmbedParam = F7(
	function (a, b, c, d, e, f, g) {
		return {$class: a, id: b, src: c, type$: d, useMapName: e, height: f, width: g};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$ObjectParam = F7(
	function (a, b, c, d, e, f, g) {
		return {$class: a, name: b, data: c, type$: d, useMapName: e, height: f, width: g};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$MediaParam = F8(
	function (a, b, c, d, e, f, g, h) {
		return {$class: a, src: b, autoplay: c, controls: d, loop: e, preload: f, poster: g, volume: h};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$VideoParam = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return function (l) {
												return {$class: a, src: b, width: c, height: d, videoHeight: e, videoWidth: f, autoplay: g, controls: h, loop: i, preload: j, poster: k, volume: l};
											};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$FormParam = F3(
	function (a, b, c) {
		return {$class: a, novalidate: b, update: c};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$FieldsetParam = F2(
	function (a, b) {
		return {$class: a, disabled: b};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$LabelParam = F2(
	function (a, b) {
		return {$class: a, $for: b};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$InputFieldParam = F8(
	function (a, b, c, d, e, f, g, h) {
		return {$class: a, name: b, placeholder: c, update: d, type$: e, pattern: f, required: g, decoder: h};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$InputTextParam = F7(
	function (a, b, c, d, e, f, g) {
		return {$class: a, name: b, placeholder: c, value: d, required: e, autocomplete: f, update: g};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$InputMaybeTextParam = F6(
	function (a, b, c, d, e, f) {
		return {$class: a, name: b, placeholder: c, value: d, autocomplete: e, update: f};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$InputUrlParam = F7(
	function (a, b, c, d, e, f, g) {
		return {$class: a, name: b, placeholder: c, value: d, required: e, autocomplete: f, update: g};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$InputMaybeUrlParam = F6(
	function (a, b, c, d, e, f) {
		return {$class: a, name: b, placeholder: c, value: d, autocomplete: e, update: f};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$InputFloatParam = F8(
	function (a, b, c, d, e, f, g, h) {
		return {$class: a, name: b, placeholder: c, value: d, min: e, max: f, step: g, update: h};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$InputMaybeFloatParam = F8(
	function (a, b, c, d, e, f, g, h) {
		return {$class: a, name: b, placeholder: c, value: d, min: e, max: f, step: g, update: h};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$InputIntParam = F8(
	function (a, b, c, d, e, f, g, h) {
		return {$class: a, name: b, placeholder: c, value: d, min: e, max: f, step: g, update: h};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$InputMaybeIntParam = F8(
	function (a, b, c, d, e, f, g, h) {
		return {$class: a, name: b, placeholder: c, value: d, min: e, max: f, step: g, update: h};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$ButtonParam = F2(
	function (a, b) {
		return {$class: a, update: b};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$SelectParam = F3(
	function (a, b, c) {
		return {$class: a, name: b, update: c};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$OptionParam = F3(
	function (a, b, c) {
		return {label: a, value: b, selected: c};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$OutputParam = F3(
	function (a, b, c) {
		return {$class: a, name: b, $for: c};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$ProgressParam = F3(
	function (a, b, c) {
		return {$class: a, value: b, max: c};
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Type$MeterParam = F7(
	function (a, b, c, d, e, f, g) {
		return {$class: a, value: b, min: c, max: d, low: e, high: f, optimum: g};
	});

var _circuithub$elm_html_shorthand$Html_Shorthand_Event$messageDecoder = F2(
	function (dec, f) {
		return A2(
			_elm_lang$core$Json_Decode$customDecoder,
			_elm_lang$core$Json_Decode$value,
			function (event) {
				var r = A2(_elm_lang$core$Json_Decode$decodeValue, dec, event);
				var r$ = A2(
					_elm_lang$core$Result$formatError,
					_circuithub$elm_html_shorthand$Html_Shorthand_Type$EventDecodeError(event),
					r);
				var _p0 = {
					ctor: '_Tuple2',
					_0: f(r$),
					_1: r
				};
				if (_p0._0.ctor === 'Nothing') {
					if (_p0._1.ctor === 'Err') {
						return _elm_lang$core$Result$Err(_p0._1._0);
					} else {
						return _elm_lang$core$Result$Err('no message in response to event');
					}
				} else {
					return _elm_lang$core$Result$Ok(_p0._0._0);
				}
			});
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Event$onMouseLost = F2(
	function (dec, f) {
		return A2(
			_elm_lang$html$Html_Events$on,
			'mouseleave',
			A2(_elm_lang$core$Json_Decode$map, f, dec));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Event$onKeyboardLost = F2(
	function (dec, f) {
		return A2(
			_elm_lang$html$Html_Events$on,
			'blur',
			A2(_elm_lang$core$Json_Decode$map, f, dec));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Event$onEnter = F2(
	function (dec, f) {
		return A2(
			_elm_lang$html$Html_Events$on,
			'keydown',
			A2(
				_elm_lang$core$Json_Decode$map,
				f,
				A2(
					_elm_lang$core$Json_Decode$customDecoder,
					A3(
						_elm_lang$core$Json_Decode$object2,
						F2(
							function (v0, v1) {
								return {ctor: '_Tuple2', _0: v0, _1: v1};
							}),
						_elm_lang$html$Html_Events$keyCode,
						dec),
					function (_p1) {
						var _p2 = _p1;
						return _elm_lang$core$Native_Utils.eq(_p2._0, 13) ? _elm_lang$core$Result$Ok(_p2._1) : _elm_lang$core$Result$Err('expected key code 13');
					})));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Event$onChange = F2(
	function (dec, f) {
		return A2(
			_elm_lang$html$Html_Events$on,
			'change',
			A2(_elm_lang$core$Json_Decode$map, f, dec));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand_Event$onInput$ = F2(
	function (dec, f) {
		return A2(
			_elm_lang$html$Html_Events$on,
			'input',
			A2(_elm_lang$core$Json_Decode$map, f, dec));
	});

var _circuithub$elm_html_shorthand$Html_Shorthand_Internal$encodeClass = function () {
	var isAlpha = function (c) {
		var cc = _elm_lang$core$Char$toCode(
			_elm_lang$core$Char$toLower(c));
		return (_elm_lang$core$Native_Utils.cmp(
			cc,
			_elm_lang$core$Char$toCode(
				_elm_lang$core$Native_Utils.chr('a'))) > -1) && (_elm_lang$core$Native_Utils.cmp(
			cc,
			_elm_lang$core$Char$toCode(
				_elm_lang$core$Native_Utils.chr('z'))) < 1);
	};
	var startWithAlpha = function (s) {
		var _p0 = _elm_lang$core$String$uncons(s);
		if (_p0.ctor === 'Just') {
			return _elm_lang$core$Basics$not(
				isAlpha(_p0._0._0)) ? A2(
				_elm_lang$core$String$cons,
				_elm_lang$core$Native_Utils.chr('x'),
				s) : s;
		} else {
			return s;
		}
	};
	var hu = _elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$core$Native_Utils.chr('-'),
			_elm_lang$core$Native_Utils.chr('_')
		]);
	var isClassChar = function (c) {
		return _elm_lang$core$Char$isDigit(c) || (isAlpha(c) || A2(_elm_lang$core$List$member, c, hu));
	};
	var smartTrimLeft = function (s) {
		var _p1 = _elm_lang$core$String$uncons(s);
		if (_p1.ctor === 'Just') {
			return A2(_elm_lang$core$List$member, _p1._0._0, hu) ? _p1._0._1 : s;
		} else {
			return s;
		}
	};
	var smartTrimRight = function (s) {
		var _p2 = _elm_lang$core$String$uncons(
			_elm_lang$core$String$reverse(s));
		if (_p2.ctor === 'Just') {
			return A2(_elm_lang$core$List$member, _p2._0._0, hu) ? _elm_lang$core$String$reverse(_p2._0._1) : s;
		} else {
			return s;
		}
	};
	var smartTrim = function (_p3) {
		return smartTrimRight(
			smartTrimLeft(_p3));
	};
	return function (_p4) {
		return A2(
			_elm_lang$core$String$join,
			' ',
			A2(
				_elm_lang$core$List$map,
				function (_p5) {
					return startWithAlpha(
						smartTrim(
							A2(
								_elm_lang$core$String$filter,
								isClassChar,
								_elm_lang$core$String$toLower(_p5))));
				},
				_elm_lang$core$String$words(_p4)));
	};
}();
var _circuithub$elm_html_shorthand$Html_Shorthand_Internal$class$ = function (_p6) {
	return _elm_lang$html$Html_Attributes$class(
		_circuithub$elm_html_shorthand$Html_Shorthand_Internal$encodeClass(_p6));
};
var _circuithub$elm_html_shorthand$Html_Shorthand_Internal$encodeId = function () {
	var isAlpha = function (c) {
		var cc = _elm_lang$core$Char$toCode(
			_elm_lang$core$Char$toLower(c));
		return (_elm_lang$core$Native_Utils.cmp(
			cc,
			_elm_lang$core$Char$toCode(
				_elm_lang$core$Native_Utils.chr('a'))) > -1) && (_elm_lang$core$Native_Utils.cmp(
			cc,
			_elm_lang$core$Char$toCode(
				_elm_lang$core$Native_Utils.chr('z'))) < 1);
	};
	var startWithAlpha = function (s) {
		var _p7 = _elm_lang$core$String$uncons(s);
		if (_p7.ctor === 'Just') {
			return _elm_lang$core$Basics$not(
				isAlpha(_p7._0._0)) ? A2(
				_elm_lang$core$String$cons,
				_elm_lang$core$Native_Utils.chr('x'),
				s) : s;
		} else {
			return s;
		}
	};
	var hu = _elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$core$Native_Utils.chr('-'),
			_elm_lang$core$Native_Utils.chr('_')
		]);
	var isIdChar = function (c) {
		return _elm_lang$core$Char$isDigit(c) || (isAlpha(c) || A2(_elm_lang$core$List$member, c, hu));
	};
	var smartTrimLeft = function (s) {
		var _p8 = _elm_lang$core$String$uncons(s);
		if (_p8.ctor === 'Just') {
			return A2(_elm_lang$core$List$member, _p8._0._0, hu) ? _p8._0._1 : s;
		} else {
			return s;
		}
	};
	var smartTrimRight = function (s) {
		var _p9 = _elm_lang$core$String$uncons(
			_elm_lang$core$String$reverse(s));
		if (_p9.ctor === 'Just') {
			return A2(_elm_lang$core$List$member, _p9._0._0, hu) ? _elm_lang$core$String$reverse(_p9._0._1) : s;
		} else {
			return s;
		}
	};
	var smartTrim = function (_p10) {
		return smartTrimRight(
			smartTrimLeft(_p10));
	};
	return function (_p11) {
		return startWithAlpha(
			A2(
				_elm_lang$core$String$join,
				'-',
				A2(
					_elm_lang$core$List$map,
					function (_p12) {
						return smartTrim(
							A2(
								_elm_lang$core$String$filter,
								isIdChar,
								_elm_lang$core$String$toLower(_p12)));
					},
					_elm_lang$core$String$words(_p11))));
	};
}();
var _circuithub$elm_html_shorthand$Html_Shorthand_Internal$id$ = function (_p13) {
	return _elm_lang$html$Html_Attributes$id(
		_circuithub$elm_html_shorthand$Html_Shorthand_Internal$encodeId(_p13));
};

var _circuithub$elm_html_shorthand$Html_Shorthand$meter$ = F2(
	function (p, t) {
		var filterJust = _elm_lang$core$List$filterMap(_elm_lang$core$Basics$identity);
		return A2(
			_elm_lang$html$Html$meter,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$value(
						_elm_lang$core$Basics$toString(p.value)),
						_elm_lang$html$Html_Attributes$min(
						_elm_lang$core$Basics$toString(_elm_lang$core$Basics$min)),
						_elm_lang$html$Html_Attributes$max(
						_elm_lang$core$Basics$toString(p.max))
					]),
				filterJust(
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$core$Maybe$map,
							function (_p0) {
								return _elm_community$html_extra$Html_Attributes_Extra$low(
									_elm_lang$core$Basics$toString(_p0));
							},
							p.low),
							A2(
							_elm_lang$core$Maybe$map,
							function (_p1) {
								return _elm_community$html_extra$Html_Attributes_Extra$high(
									_elm_lang$core$Basics$toString(_p1));
							},
							p.high),
							A2(
							_elm_lang$core$Maybe$map,
							function (_p2) {
								return _elm_community$html_extra$Html_Attributes_Extra$optimum(
									_elm_lang$core$Basics$toString(_p2));
							},
							p.optimum)
						]))),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(t)
				]));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand$progress$ = F2(
	function (p, t) {
		return A2(
			_elm_lang$html$Html$progress,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$value(
					_elm_lang$core$Basics$toString(p.value)),
					_elm_lang$html$Html_Attributes$max(
					_elm_lang$core$Basics$toString(p.max))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(t)
				]));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand$option$ = function (p) {
	return A2(
		_elm_lang$html$Html$option,
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_elm_community$html_extra$Html_Attributes_Extra$stringProperty, 'label', p.label),
				_elm_lang$html$Html_Attributes$value(
				_elm_lang$core$Basics$toString(p.value)),
				_elm_lang$html$Html_Attributes$selected(p.selected)
			]),
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$option_ = F2(
	function (val, sel) {
		return A2(
			_elm_lang$html$Html$option,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$selected(sel)
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(val)
				]));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand$buttonReset_ = function (t) {
	return A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$type$('reset')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$buttonSubmit_ = function (t) {
	return A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$type$('submit')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$buttonLink_ = F2(
	function (t, msg) {
		return A2(
			_elm_lang$html$Html$a,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$href('#'),
					_elm_lang$html$Html_Events$onClick(msg)
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(t)
				]));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand$button_ = F2(
	function (t, msg) {
		return A2(
			_elm_lang$html$Html$button,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$type$('button'),
					_elm_lang$html$Html_Events$onClick(msg)
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(t)
				]));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand$label_ = F2(
	function ($for, t) {
		return A2(
			_elm_lang$html$Html$label,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$for($for)
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(t)
				]));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand$legend_ = function (t) {
	return A2(
		_elm_lang$html$Html$legend,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$fieldset_ = function (disabled) {
	return _elm_lang$html$Html$fieldset(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$disabled(disabled)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$th_ = _elm_lang$html$Html$th(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$td_ = _elm_lang$html$Html$td(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$tr_ = _elm_lang$html$Html$tr(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$tfoot_ = _elm_lang$html$Html$tfoot(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$thead_ = _elm_lang$html$Html$thead(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$tbody_ = _elm_lang$html$Html$tbody(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$caption_ = _elm_lang$html$Html$caption(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$table_ = _elm_lang$html$Html$table(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$audio_ = function (url) {
	return A2(
		_elm_lang$html$Html$audio,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$src(url)
			]),
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$video_ = function (url) {
	return A2(
		_elm_lang$html$Html$video,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$src(url)
			]),
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$param$ = F2(
	function (n, v) {
		return A2(
			_elm_lang$html$Html$param,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$name(n),
					_elm_lang$html$Html_Attributes$value(v)
				]),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand$img_ = F4(
	function (w, h, s, a) {
		return A2(
			_elm_lang$html$Html$img,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$width(w),
					_elm_lang$html$Html_Attributes$height(h),
					_elm_lang$html$Html_Attributes$src(s),
					_elm_lang$html$Html_Attributes$alt(a)
				]),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand$del_ = _elm_lang$html$Html$del(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$ins_ = _elm_lang$html$Html$ins(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$wbr$ = A2(
	_elm_lang$html$Html$wbr,
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$br$ = A2(
	_elm_lang$html$Html$br,
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$span_ = _elm_lang$html$Html$span(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$bdo$ = function (dir) {
	return _elm_lang$html$Html$bdo(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$dir(
				function () {
					var _p3 = dir;
					switch (_p3.ctor) {
						case 'LeftToRight':
							return 'ltr';
						case 'RightToLeft':
							return 'rtl';
						default:
							return 'auto';
					}
				}())
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$bdi_ = function (t) {
	return A2(
		_elm_lang$html$Html$bdi,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$rp_ = function (t) {
	return A2(
		_elm_lang$html$Html$rp,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$rt_ = function (t) {
	return A2(
		_elm_lang$html$Html$rt,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$ruby_ = _elm_lang$html$Html$ruby(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$mark_ = _elm_lang$html$Html$mark(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$u_ = function (t) {
	return A2(
		_elm_lang$html$Html$u,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$b_ = function (t) {
	return A2(
		_elm_lang$html$Html$b,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$i_ = function (t) {
	return A2(
		_elm_lang$html$Html$i,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$sup_ = function (t) {
	return A2(
		_elm_lang$html$Html$sup,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$sub_ = function (t) {
	return A2(
		_elm_lang$html$Html$sub,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$kbd_ = _elm_lang$html$Html$kbd(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$samp_ = _elm_lang$html$Html$samp(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$var_ = function (t) {
	return A2(
		_elm_lang$html$Html$var,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$code_ = _elm_lang$html$Html$code(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$abbr_ = function (t) {
	return A2(
		_elm_lang$html$Html$abbr,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$q_ = function (t) {
	return A2(
		_elm_lang$html$Html$q,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$cite_ = _elm_lang$html$Html$cite(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$s_ = function (t) {
	return A2(
		_elm_lang$html$Html$s,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$small_ = function (t) {
	return A2(
		_elm_lang$html$Html$small,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$strong_ = function (t) {
	return A2(
		_elm_lang$html$Html$strong,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$em_ = function (t) {
	return A2(
		_elm_lang$html$Html$em,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$a_ = F2(
	function (href, t) {
		return A2(
			_elm_lang$html$Html$a,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$href(href)
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(t)
				]));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand$div_ = _elm_lang$html$Html$div(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$figcaption_ = _elm_lang$html$Html$figcaption(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$dd_ = _elm_lang$html$Html$dd(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$dl_ = _elm_lang$html$Html$dl(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$li_ = _elm_lang$html$Html$li(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$ul_ = _elm_lang$html$Html$ul(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$ol_ = _elm_lang$html$Html$ol(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$blockquote_ = _elm_lang$html$Html$blockquote(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$pre_ = _elm_lang$html$Html$pre(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$hr_ = A2(
	_elm_lang$html$Html$hr,
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$p_ = _elm_lang$html$Html$p(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$main_ = _elm_lang$html$Html$main$(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$address_ = _elm_lang$html$Html$address(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$footer_ = _elm_lang$html$Html$footer(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$header_ = _elm_lang$html$Html$header(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$h6_ = function (t) {
	return A2(
		_elm_lang$html$Html$h6,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$h5_ = function (t) {
	return A2(
		_elm_lang$html$Html$h5,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$h4_ = function (t) {
	return A2(
		_elm_lang$html$Html$h4,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$h3_ = function (t) {
	return A2(
		_elm_lang$html$Html$h3,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$h2_ = function (t) {
	return A2(
		_elm_lang$html$Html$h2,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$h1_ = function (t) {
	return A2(
		_elm_lang$html$Html$h1,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$nav_ = _elm_lang$html$Html$nav(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$body_ = _elm_lang$html$Html$body(
	_elm_lang$core$Native_List.fromArray(
		[]));
var _circuithub$elm_html_shorthand$Html_Shorthand$class$ = _circuithub$elm_html_shorthand$Html_Shorthand_Internal$class$;
var _circuithub$elm_html_shorthand$Html_Shorthand$body$ = function (p) {
	return _elm_lang$html$Html$body(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$nav$ = function (p) {
	return _elm_lang$html$Html$nav(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$h1$ = function (p) {
	return _elm_lang$html$Html$h1(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$h2$ = function (p) {
	return _elm_lang$html$Html$h2(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$h3$ = function (p) {
	return _elm_lang$html$Html$h3(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$h4$ = function (p) {
	return _elm_lang$html$Html$h4(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$h5$ = function (p) {
	return _elm_lang$html$Html$h5(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$h6$ = function (p) {
	return _elm_lang$html$Html$h6(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$header$ = function (p) {
	return _elm_lang$html$Html$header(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$footer$ = function (p) {
	return _elm_lang$html$Html$footer(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$address$ = function (p) {
	return _elm_lang$html$Html$address(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$p$ = function (param) {
	return _elm_lang$html$Html$p(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(param.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$pre$ = function (p) {
	return _elm_lang$html$Html$pre(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$blockquote$ = function (p) {
	return _elm_lang$html$Html$blockquote(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$cite(p.cite)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$ol$ = function (p) {
	return _elm_lang$html$Html$ol(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$ul$ = function (p) {
	return _elm_lang$html$Html$ul(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$li$ = function (p) {
	return _elm_lang$html$Html$li(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$dl$ = function (p) {
	return _elm_lang$html$Html$dl(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$dd$ = function (p) {
	return _elm_lang$html$Html$dd(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$figcaption$ = function (p) {
	return _elm_lang$html$Html$figcaption(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$div$ = function (p) {
	return _elm_lang$html$Html$div(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$a$ = function (p) {
	return _elm_lang$html$Html$a(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$href(p.href)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$em$ = function (p) {
	return _elm_lang$html$Html$em(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$strong$ = function (p) {
	return _elm_lang$html$Html$strong(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$small$ = function (p) {
	return _elm_lang$html$Html$small(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$s$ = function (p) {
	return _elm_lang$html$Html$s(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$cite$ = function (p) {
	return _elm_lang$html$Html$cite(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$q$ = function (p) {
	return _elm_lang$html$Html$q(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$cite(p.cite)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$abbr$ = function (p) {
	return _elm_lang$html$Html$abbr(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$code$ = function (p) {
	return _elm_lang$html$Html$code(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$var$ = function (p) {
	return _elm_lang$html$Html$var(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$samp$ = function (p) {
	return _elm_lang$html$Html$samp(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$kbd$ = function (p) {
	return _elm_lang$html$Html$kbd(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$sub$ = function (p) {
	return _elm_lang$html$Html$sub(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$sup$ = function (p) {
	return _elm_lang$html$Html$sup(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$i$ = function (p) {
	return _elm_lang$html$Html$i(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$b$ = function (p) {
	return _elm_lang$html$Html$b(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$u$ = function (p) {
	return _elm_lang$html$Html$u(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$mark$ = function (p) {
	return _elm_lang$html$Html$mark(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$ruby$ = function (p) {
	return _elm_lang$html$Html$ruby(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$rt$ = function (p) {
	return _elm_lang$html$Html$rt(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$rp$ = function (p) {
	return _elm_lang$html$Html$rp(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$bdi$ = function (p) {
	return _elm_lang$html$Html$bdi(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$span$ = function (p) {
	return _elm_lang$html$Html$span(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$ins$ = function (p) {
	return _elm_lang$html$Html$ins(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$cite(p.cite),
				_elm_lang$html$Html_Attributes$datetime(p.datetime)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$del$ = function (p) {
	return _elm_lang$html$Html$del(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$cite(p.cite),
				_elm_lang$html$Html_Attributes$datetime(p.datetime)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$img$ = function (p) {
	return A2(
		_elm_lang$html$Html$img,
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$src(p.src),
				_elm_lang$html$Html_Attributes$width(p.width),
				_elm_lang$html$Html_Attributes$height(p.height),
				_elm_lang$html$Html_Attributes$alt(p.alt)
			]),
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$video$ = function (p) {
	var filterJust = _elm_lang$core$List$filterMap(_elm_lang$core$Basics$identity);
	return _elm_lang$html$Html$video(
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[
					_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
					_elm_lang$html$Html_Attributes$width(p.width),
					_elm_lang$html$Html_Attributes$height(p.height),
					_elm_lang$html$Html_Attributes$autoplay(p.autoplay),
					_elm_lang$html$Html_Attributes$controls(p.controls),
					_elm_lang$html$Html_Attributes$loop(p.loop)
				]),
			filterJust(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$src, p.src),
						A2(
						_elm_lang$core$Maybe$map,
						_elm_community$html_extra$Html_Attributes_Extra$stringProperty('preload'),
						p.preload),
						A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$poster, p.poster),
						A2(_elm_lang$core$Maybe$map, _elm_community$html_extra$Html_Attributes_Extra$volume, p.volume)
					]))));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$audio$ = function (p) {
	var filterJust = _elm_lang$core$List$filterMap(_elm_lang$core$Basics$identity);
	return _elm_lang$html$Html$audio(
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[
					_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
					_elm_lang$html$Html_Attributes$autoplay(p.autoplay),
					_elm_lang$html$Html_Attributes$controls(p.controls),
					_elm_lang$html$Html_Attributes$loop(p.loop)
				]),
			filterJust(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$src, p.src),
						A2(
						_elm_lang$core$Maybe$map,
						_elm_community$html_extra$Html_Attributes_Extra$stringProperty('preload'),
						p.preload),
						A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$poster, p.poster),
						A2(_elm_lang$core$Maybe$map, _elm_community$html_extra$Html_Attributes_Extra$volume, p.volume)
					]))));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$table$ = function (p) {
	return _elm_lang$html$Html$table(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$caption$ = function (p) {
	return _elm_lang$html$Html$caption(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$tbody$ = function (p) {
	return _elm_lang$html$Html$tbody(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$thead$ = function (p) {
	return _elm_lang$html$Html$thead(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$tfoot$ = function (p) {
	return _elm_lang$html$Html$tfoot(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$tr$ = function (p) {
	return _elm_lang$html$Html$tr(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$td$ = function (p) {
	return _elm_lang$html$Html$td(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$th$ = function (p) {
	return _elm_lang$html$Html$th(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$form$ = function (p) {
	var onEnter$ = function (msg) {
		return A2(
			_elm_lang$html$Html_Events$on,
			'keypress',
			A2(
				_elm_lang$core$Json_Decode$customDecoder,
				_elm_lang$html$Html_Events$keyCode,
				function (c) {
					return _elm_lang$core$Native_Utils.eq(c, 13) ? _elm_lang$core$Result$Ok(msg) : _elm_lang$core$Result$Err('expected key code 13');
				}));
	};
	var filterJust = _elm_lang$core$List$filterMap(_elm_lang$core$Basics$identity);
	return _elm_lang$html$Html$form(
		A2(
			_elm_lang$core$List_ops['::'],
			_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
			A2(
				_elm_lang$core$List_ops['::'],
				_elm_lang$html$Html_Attributes$novalidate(p.novalidate),
				filterJust(
					_elm_lang$core$Native_List.fromArray(
						[
							A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Events$onSubmit, p.update.onSubmit),
							A2(_elm_lang$core$Maybe$map, onEnter$, p.update.onSubmit)
						])))));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$fieldset$ = function (p) {
	return _elm_lang$html$Html$fieldset(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$disabled(p.disabled)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$legend$ = function (p) {
	return _elm_lang$html$Html$legend(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$label$ = function (p) {
	return _elm_lang$html$Html$label(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$for(p.$for)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$button$ = function (p) {
	return _elm_lang$html$Html$button(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$type$('button'),
				_elm_lang$html$Html_Events$onClick(p.update.onClick)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$buttonLink$ = function (p) {
	return _elm_lang$html$Html$a(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$href('#'),
				_elm_lang$html$Html_Events$onClick(p.update.onClick)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$buttonSubmit$ = function (p) {
	return _elm_lang$html$Html$button(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$type$('submit')
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$buttonReset$ = function (p) {
	return _elm_lang$html$Html$button(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$type$('reset')
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$id$ = _circuithub$elm_html_shorthand$Html_Shorthand_Internal$id$;
var _circuithub$elm_html_shorthand$Html_Shorthand$section_ = function (i) {
	return _elm_lang$html$Html$section(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$id$(i)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$section$ = function (p) {
	return _elm_lang$html$Html$section(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_circuithub$elm_html_shorthand$Html_Shorthand$id$(p.id)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$article_ = function (i) {
	return _elm_lang$html$Html$article(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$id$(i)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$article$ = function (p) {
	return _elm_lang$html$Html$article(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_circuithub$elm_html_shorthand$Html_Shorthand$id$(p.id)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$aside$ = function (p) {
	return _elm_lang$html$Html$aside(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_circuithub$elm_html_shorthand$Html_Shorthand$id$(p.id)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$dt$ = function (p) {
	return _elm_lang$html$Html$dt(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_circuithub$elm_html_shorthand$Html_Shorthand$id$(p.id)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$figure$ = function (p) {
	return _elm_lang$html$Html$figure(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_circuithub$elm_html_shorthand$Html_Shorthand$id$(p.id)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$dfn$ = function (p) {
	return _elm_lang$html$Html$dfn(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_circuithub$elm_html_shorthand$Html_Shorthand$id$(p.id)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$embed$ = function (p) {
	return A2(
		_elm_lang$html$Html$embed,
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_circuithub$elm_html_shorthand$Html_Shorthand$id$(p.id),
				_elm_lang$html$Html_Attributes$src(p.src),
				_elm_lang$html$Html_Attributes$type$(p.type$),
				_elm_lang$html$Html_Attributes$width(p.width),
				_elm_lang$html$Html_Attributes$height(p.height)
			]),
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$encodeClass = _circuithub$elm_html_shorthand$Html_Shorthand_Internal$encodeClass;
var _circuithub$elm_html_shorthand$Html_Shorthand$encodeId = _circuithub$elm_html_shorthand$Html_Shorthand_Internal$encodeId;
var _circuithub$elm_html_shorthand$Html_Shorthand$iframe$ = function (p) {
	var filterJust = _elm_lang$core$List$filterMap(_elm_lang$core$Basics$identity);
	var i$ = _circuithub$elm_html_shorthand$Html_Shorthand$encodeId(p.name);
	return A2(
		_elm_lang$html$Html$iframe,
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[
					_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
					_elm_lang$html$Html_Attributes$id(i$),
					_elm_lang$html$Html_Attributes$name(i$),
					_elm_lang$html$Html_Attributes$src(p.src),
					_elm_lang$html$Html_Attributes$width(p.width),
					_elm_lang$html$Html_Attributes$height(p.height),
					_elm_lang$html$Html_Attributes$seamless(p.seamless)
				]),
			filterJust(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$sandbox, p.sandbox)
					]))),
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$object$ = function (p) {
	var filterJust = _elm_lang$core$List$filterMap(_elm_lang$core$Basics$identity);
	var attrs = filterJust(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$core$Maybe$map,
				function (_p4) {
					return _elm_lang$html$Html_Attributes$usemap(
						A2(
							_elm_lang$core$String$cons,
							_elm_lang$core$Native_Utils.chr('#'),
							_circuithub$elm_html_shorthand$Html_Shorthand$encodeId(_p4)));
				},
				p.useMapName)
			]));
	var i$ = _circuithub$elm_html_shorthand$Html_Shorthand$encodeId(p.name);
	return _elm_lang$html$Html$object(
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[
					_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
					_elm_lang$html$Html_Attributes$id(i$),
					_elm_lang$html$Html_Attributes$name(i$),
					A2(_elm_lang$html$Html_Attributes$attribute, 'data', p.data),
					_elm_lang$html$Html_Attributes$type$(p.type$)
				]),
			A2(
				_elm_lang$core$Basics_ops['++'],
				attrs,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$height(p.height),
						_elm_lang$html$Html_Attributes$width(p.width)
					]))));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$inputField$ = F2(
	function (p, attrs) {
		var i$ = _circuithub$elm_html_shorthand$Html_Shorthand$encodeId(p.name);
		var filterJust = _elm_lang$core$List$filterMap(_elm_lang$core$Basics$identity);
		var pattrs = A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$type$(p.type$),
					_elm_lang$html$Html_Attributes$id(i$),
					_elm_lang$html$Html_Attributes$name(i$),
					_elm_lang$html$Html_Attributes$required(p.required)
				]),
			filterJust(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$core$Maybe$map,
						_circuithub$elm_html_shorthand$Html_Shorthand$class$,
						_elm_lang$core$Native_Utils.eq(p.$class, '') ? _elm_lang$core$Maybe$Nothing : _elm_lang$core$Maybe$Just(p.$class)),
						A2(
						_elm_lang$core$Maybe$map,
						function (onEvent) {
							return A2(
								_circuithub$elm_html_shorthand$Html_Shorthand_Event$onInput$,
								A2(_circuithub$elm_html_shorthand$Html_Shorthand_Event$messageDecoder, p.decoder, onEvent),
								_elm_lang$core$Basics$identity);
						},
						p.update.onInput),
						A2(
						_elm_lang$core$Maybe$map,
						function (onEvent) {
							return A2(
								_circuithub$elm_html_shorthand$Html_Shorthand_Event$onEnter,
								A2(_circuithub$elm_html_shorthand$Html_Shorthand_Event$messageDecoder, p.decoder, onEvent),
								_elm_lang$core$Basics$identity);
						},
						p.update.onEnter),
						A2(
						_elm_lang$core$Maybe$map,
						function (onEvent) {
							return A2(
								_circuithub$elm_html_shorthand$Html_Shorthand_Event$onKeyboardLost,
								A2(_circuithub$elm_html_shorthand$Html_Shorthand_Event$messageDecoder, p.decoder, onEvent),
								_elm_lang$core$Basics$identity);
						},
						p.update.onKeyboardLost),
						A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$placeholder, p.placeholder),
						A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$pattern, p.pattern)
					])));
		return A2(
			_elm_lang$html$Html$input,
			A2(_elm_lang$core$Basics_ops['++'], pattrs, attrs),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _circuithub$elm_html_shorthand$Html_Shorthand$inputText$ = function (p) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$inputField$,
		{$class: p.$class, name: p.name, placeholder: p.placeholder, update: p.update, type$: 'text', pattern: _elm_lang$core$Maybe$Nothing, required: p.required, decoder: _elm_lang$html$Html_Events$targetValue},
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$value(p.value),
				_elm_lang$html$Html_Attributes$autocomplete(p.autocomplete)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$inputMaybeText$ = function (p) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$inputField$,
		{$class: p.$class, name: p.name, placeholder: p.placeholder, update: p.update, type$: 'text', pattern: _elm_lang$core$Maybe$Nothing, required: false, decoder: _elm_community$html_extra$Html_Events_Extra$targetValueMaybe},
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$value(
				A2(_elm_lang$core$Maybe$withDefault, '', p.value)),
				_elm_lang$html$Html_Attributes$autocomplete(p.autocomplete)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$inputFloat$ = function (p) {
	var filterJust = _elm_lang$core$List$filterMap(_elm_lang$core$Basics$identity);
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$inputField$,
		{
			$class: p.$class,
			name: p.name,
			placeholder: p.placeholder,
			update: p.update,
			type$: 'number',
			pattern: _elm_lang$core$Maybe$Nothing,
			required: true,
			decoder: function () {
				var _p5 = {ctor: '_Tuple2', _0: p.min, _1: p.max};
				if (((_p5.ctor === '_Tuple2') && (_p5._0.ctor === 'Nothing')) && (_p5._1.ctor === 'Nothing')) {
					return _elm_community$html_extra$Html_Events_Extra$targetValueFloat;
				} else {
					return A2(
						_elm_lang$core$Json_Decode$customDecoder,
						_elm_community$html_extra$Html_Events_Extra$targetValueFloat,
						function (v) {
							return ((_elm_lang$core$Native_Utils.cmp(
								v,
								A2(_elm_lang$core$Maybe$withDefault, -1 / 0, p.min)) < 0) || (_elm_lang$core$Native_Utils.cmp(
								v,
								A2(_elm_lang$core$Maybe$withDefault, 1 / 0, p.max)) > 0)) ? _elm_lang$core$Result$Err('out of bounds') : _elm_lang$core$Result$Ok(v);
						});
				}
			}()
		},
		A2(
			_elm_lang$core$List_ops['::'],
			_elm_community$html_extra$Html_Attributes_Extra$valueAsFloat(p.value),
			A2(
				_elm_lang$core$List_ops['::'],
				A2(
					_elm_community$html_extra$Html_Attributes_Extra$stringProperty,
					'step',
					A2(
						_elm_lang$core$Maybe$withDefault,
						'any',
						A2(_elm_lang$core$Maybe$map, _elm_lang$core$Basics$toString, p.step))),
				filterJust(
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$core$Maybe$map,
							function (_p6) {
								return _elm_lang$html$Html_Attributes$min(
									_elm_lang$core$Basics$toString(_p6));
							},
							p.min),
							A2(
							_elm_lang$core$Maybe$map,
							function (_p7) {
								return _elm_lang$html$Html_Attributes$max(
									_elm_lang$core$Basics$toString(_p7));
							},
							p.max)
						])))));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$inputMaybeFloat$ = function (p) {
	var filterJust = _elm_lang$core$List$filterMap(_elm_lang$core$Basics$identity);
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$inputField$,
		{
			$class: p.$class,
			name: p.name,
			placeholder: p.placeholder,
			update: p.update,
			type$: 'number',
			pattern: _elm_lang$core$Maybe$Nothing,
			required: false,
			decoder: function () {
				var _p8 = {ctor: '_Tuple2', _0: p.min, _1: p.max};
				if (((_p8.ctor === '_Tuple2') && (_p8._0.ctor === 'Nothing')) && (_p8._1.ctor === 'Nothing')) {
					return _elm_community$html_extra$Html_Events_Extra$targetValueMaybeFloat;
				} else {
					return A2(
						_elm_lang$core$Json_Decode$customDecoder,
						_elm_community$html_extra$Html_Events_Extra$targetValueMaybeFloat,
						function (mv) {
							var _p9 = mv;
							if (_p9.ctor === 'Nothing') {
								return _elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing);
							} else {
								var _p10 = _p9._0;
								return ((_elm_lang$core$Native_Utils.cmp(
									_p10,
									A2(_elm_lang$core$Maybe$withDefault, -1 / 0, p.min)) < 0) || (_elm_lang$core$Native_Utils.cmp(
									_p10,
									A2(_elm_lang$core$Maybe$withDefault, 1 / 0, p.max)) > 0)) ? _elm_lang$core$Result$Err('out of bounds') : _elm_lang$core$Result$Ok(mv);
							}
						});
				}
			}()
		},
		A2(
			_elm_lang$core$List_ops['::'],
			function () {
				var _p11 = p.value;
				if (_p11.ctor === 'Nothing') {
					return _elm_lang$html$Html_Attributes$value('');
				} else {
					return _elm_community$html_extra$Html_Attributes_Extra$valueAsFloat(_p11._0);
				}
			}(),
			A2(
				_elm_lang$core$List_ops['::'],
				A2(
					_elm_community$html_extra$Html_Attributes_Extra$stringProperty,
					'step',
					A2(
						_elm_lang$core$Maybe$withDefault,
						'any',
						A2(_elm_lang$core$Maybe$map, _elm_lang$core$Basics$toString, p.step))),
				filterJust(
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$core$Maybe$map,
							function (_p12) {
								return _elm_lang$html$Html_Attributes$min(
									_elm_lang$core$Basics$toString(_p12));
							},
							p.min),
							A2(
							_elm_lang$core$Maybe$map,
							function (_p13) {
								return _elm_lang$html$Html_Attributes$max(
									_elm_lang$core$Basics$toString(_p13));
							},
							p.max)
						])))));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$inputInt$ = function (p) {
	var filterJust = _elm_lang$core$List$filterMap(_elm_lang$core$Basics$identity);
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$inputField$,
		{
			$class: p.$class,
			name: p.name,
			placeholder: p.placeholder,
			update: p.update,
			type$: 'number',
			pattern: _elm_lang$core$Maybe$Nothing,
			required: true,
			decoder: function () {
				var _p14 = {ctor: '_Tuple2', _0: p.min, _1: p.max};
				if (((_p14.ctor === '_Tuple2') && (_p14._0.ctor === 'Nothing')) && (_p14._1.ctor === 'Nothing')) {
					return _elm_community$html_extra$Html_Events_Extra$targetValueInt;
				} else {
					return A2(
						_elm_lang$core$Json_Decode$customDecoder,
						_elm_community$html_extra$Html_Events_Extra$targetValueInt,
						function (v) {
							return ((_elm_lang$core$Native_Utils.cmp(
								v,
								A2(
									_elm_lang$core$Maybe$withDefault,
									_elm_lang$core$Basics$floor(-1 / 0),
									p.min)) < 0) || (_elm_lang$core$Native_Utils.cmp(
								v,
								A2(
									_elm_lang$core$Maybe$withDefault,
									_elm_lang$core$Basics$ceiling(1 / 0),
									p.max)) > 0)) ? _elm_lang$core$Result$Err('out of bounds') : _elm_lang$core$Result$Ok(v);
						});
				}
			}()
		},
		A2(
			_elm_lang$core$List_ops['::'],
			_elm_community$html_extra$Html_Attributes_Extra$valueAsInt(p.value),
			filterJust(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$core$Maybe$map,
						function (_p15) {
							return _elm_lang$html$Html_Attributes$min(
								_elm_lang$core$Basics$toString(_p15));
						},
						p.min),
						A2(
						_elm_lang$core$Maybe$map,
						function (_p16) {
							return _elm_lang$html$Html_Attributes$max(
								_elm_lang$core$Basics$toString(_p16));
						},
						p.max),
						A2(
						_elm_lang$core$Maybe$map,
						function (_p17) {
							return A2(
								_elm_community$html_extra$Html_Attributes_Extra$stringProperty,
								'step',
								_elm_lang$core$Basics$toString(_p17));
						},
						p.step)
					]))));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$inputMaybeInt$ = function (p) {
	var filterJust = _elm_lang$core$List$filterMap(_elm_lang$core$Basics$identity);
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$inputField$,
		{
			$class: p.$class,
			name: p.name,
			placeholder: p.placeholder,
			update: p.update,
			type$: 'number',
			pattern: _elm_lang$core$Maybe$Nothing,
			required: false,
			decoder: function () {
				var _p18 = {ctor: '_Tuple2', _0: p.min, _1: p.max};
				if (((_p18.ctor === '_Tuple2') && (_p18._0.ctor === 'Nothing')) && (_p18._1.ctor === 'Nothing')) {
					return _elm_community$html_extra$Html_Events_Extra$targetValueMaybeInt;
				} else {
					return A2(
						_elm_lang$core$Json_Decode$customDecoder,
						_elm_community$html_extra$Html_Events_Extra$targetValueMaybeInt,
						function (mv) {
							var _p19 = mv;
							if (_p19.ctor === 'Nothing') {
								return _elm_lang$core$Result$Ok(_elm_lang$core$Maybe$Nothing);
							} else {
								var _p20 = _p19._0;
								return ((_elm_lang$core$Native_Utils.cmp(
									_p20,
									A2(
										_elm_lang$core$Maybe$withDefault,
										_elm_lang$core$Basics$floor(-1 / 0),
										p.min)) < 0) || (_elm_lang$core$Native_Utils.cmp(
									_p20,
									A2(
										_elm_lang$core$Maybe$withDefault,
										_elm_lang$core$Basics$ceiling(1 / 0),
										p.max)) > 0)) ? _elm_lang$core$Result$Err('out of bounds') : _elm_lang$core$Result$Ok(mv);
							}
						});
				}
			}()
		},
		A2(
			_elm_lang$core$List_ops['::'],
			function () {
				var _p21 = p.value;
				if (_p21.ctor === 'Nothing') {
					return _elm_lang$html$Html_Attributes$value('');
				} else {
					return _elm_community$html_extra$Html_Attributes_Extra$valueAsInt(_p21._0);
				}
			}(),
			filterJust(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$core$Maybe$map,
						function (_p22) {
							return _elm_lang$html$Html_Attributes$min(
								_elm_lang$core$Basics$toString(_p22));
						},
						p.min),
						A2(
						_elm_lang$core$Maybe$map,
						function (_p23) {
							return _elm_lang$html$Html_Attributes$max(
								_elm_lang$core$Basics$toString(_p23));
						},
						p.max),
						A2(
						_elm_lang$core$Maybe$map,
						function (_p24) {
							return A2(
								_elm_community$html_extra$Html_Attributes_Extra$stringProperty,
								'step',
								_elm_lang$core$Basics$toString(_p24));
						},
						p.step)
					]))));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$inputUrl$ = function (p) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$inputField$,
		{$class: p.$class, name: p.name, placeholder: p.placeholder, update: p.update, type$: 'url', pattern: _elm_lang$core$Maybe$Nothing, required: p.required, decoder: _elm_lang$html$Html_Events$targetValue},
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$value(p.value),
				_elm_lang$html$Html_Attributes$autocomplete(p.autocomplete)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$inputMaybeUrl$ = function (p) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$inputField$,
		{$class: p.$class, name: p.name, placeholder: p.placeholder, update: p.update, type$: 'url', pattern: _elm_lang$core$Maybe$Nothing, required: false, decoder: _elm_community$html_extra$Html_Events_Extra$targetValueMaybe},
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$value(
				A2(_elm_lang$core$Maybe$withDefault, '', p.value)),
				_elm_lang$html$Html_Attributes$autocomplete(p.autocomplete)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$select$ = function (p) {
	var i$ = _circuithub$elm_html_shorthand$Html_Shorthand$encodeId(p.name);
	return _elm_lang$html$Html$select(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$id(i$),
				_elm_lang$html$Html_Attributes$name(i$),
				A2(_circuithub$elm_html_shorthand$Html_Shorthand_Event$onChange, _elm_lang$html$Html_Events$targetValue, p.update.onSelect)
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$output$ = function (p) {
	var i$ = _circuithub$elm_html_shorthand$Html_Shorthand$encodeId(p.name);
	return _elm_lang$html$Html$output(
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_html_shorthand$Html_Shorthand$class$(p.$class),
				_elm_lang$html$Html_Attributes$id(i$),
				_elm_lang$html$Html_Attributes$name(i$),
				_elm_lang$html$Html_Attributes$for(
				A2(
					_elm_lang$core$String$join,
					' ',
					A2(_elm_lang$core$List$map, _circuithub$elm_html_shorthand$Html_Shorthand$encodeId, p.$for)))
			]));
};
var _circuithub$elm_html_shorthand$Html_Shorthand$fieldUpdateFallbackFocusLost = function (handler) {
	var doErr = function (r) {
		var _p25 = r;
		if (_p25.ctor === 'Ok') {
			return _elm_lang$core$Maybe$Nothing;
		} else {
			var _p26 = A2(_elm_lang$core$Json_Decode$decodeValue, _elm_lang$html$Html_Events$targetValue, _p25._0.event);
			if (_p26.ctor === 'Ok') {
				return _elm_lang$core$Maybe$Just(
					handler.onFallback(_p26._0));
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	};
	var doOk = function (r) {
		var _p27 = r;
		if (_p27.ctor === 'Ok') {
			return _elm_lang$core$Maybe$Just(
				handler.onInput(_p27._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	};
	return {
		onInput: _elm_lang$core$Maybe$Just(doOk),
		onEnter: _elm_lang$core$Maybe$Just(doErr),
		onKeyboardLost: _elm_lang$core$Maybe$Just(doErr)
	};
};
var _circuithub$elm_html_shorthand$Html_Shorthand$fieldUpdate = {onInput: _elm_lang$core$Maybe$Nothing, onEnter: _elm_lang$core$Maybe$Nothing, onKeyboardLost: _elm_lang$core$Maybe$Nothing};
var _circuithub$elm_html_shorthand$Html_Shorthand$fieldUpdateContinuous = function (handler) {
	var doOk = function (r) {
		var _p28 = r;
		if (_p28.ctor === 'Ok') {
			return _elm_lang$core$Maybe$Just(
				handler.onInput(_p28._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	};
	return _elm_lang$core$Native_Utils.update(
		_circuithub$elm_html_shorthand$Html_Shorthand$fieldUpdate,
		{
			onInput: _elm_lang$core$Maybe$Just(doOk)
		});
};
var _circuithub$elm_html_shorthand$Html_Shorthand$fieldUpdateFocusLost = function (handler) {
	var doOk = function (r) {
		var _p29 = r;
		if (_p29.ctor === 'Ok') {
			return _elm_lang$core$Maybe$Just(
				handler.onInput(_p29._0));
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	};
	return _elm_lang$core$Native_Utils.update(
		_circuithub$elm_html_shorthand$Html_Shorthand$fieldUpdate,
		{
			onEnter: _elm_lang$core$Maybe$Just(doOk),
			onKeyboardLost: _elm_lang$core$Maybe$Just(doOk)
		});
};
var _circuithub$elm_html_shorthand$Html_Shorthand$fieldUpdateFallbackContinuous = function (handler) {
	var doOkErr = function (r) {
		var _p30 = r;
		if (_p30.ctor === 'Ok') {
			return _elm_lang$core$Maybe$Just(
				handler.onInput(_p30._0));
		} else {
			var _p31 = A2(_elm_lang$core$Json_Decode$decodeValue, _elm_lang$html$Html_Events$targetValue, _p30._0.event);
			if (_p31.ctor === 'Ok') {
				return _elm_lang$core$Maybe$Just(
					handler.onFallback(_p31._0));
			} else {
				return _elm_lang$core$Maybe$Nothing;
			}
		}
	};
	return _elm_lang$core$Native_Utils.update(
		_circuithub$elm_html_shorthand$Html_Shorthand$fieldUpdate,
		{
			onInput: _elm_lang$core$Maybe$Just(doOkErr)
		});
};
var _circuithub$elm_html_shorthand$Html_Shorthand$AutoDirection = {ctor: 'AutoDirection'};
var _circuithub$elm_html_shorthand$Html_Shorthand$RightToLeft = {ctor: 'RightToLeft'};
var _circuithub$elm_html_shorthand$Html_Shorthand$LeftToRight = {ctor: 'LeftToRight'};

var _circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$colOffset = F3(
	function (gridsize, colspan, offset) {
		var prefix = A2(
			_elm_lang$core$Basics_ops['++'],
			'col',
			A2(
				_elm_lang$core$Basics_ops['++'],
				A2(
					_elm_lang$core$String$cons,
					_elm_lang$core$Native_Utils.chr('-'),
					gridsize),
				'-'));
		return (_elm_lang$core$Native_Utils.cmp(offset, 0) > 0) ? A2(
			_elm_lang$core$Basics_ops['++'],
			prefix,
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(colspan),
				A2(
					_elm_lang$core$Basics_ops['++'],
					A2(
						_elm_lang$core$String$cons,
						_elm_lang$core$Native_Utils.chr(' '),
						prefix),
					A2(
						_elm_lang$core$Basics_ops['++'],
						'offset-',
						_elm_lang$core$Basics$toString(offset))))) : A2(
			_elm_lang$core$Basics_ops['++'],
			prefix,
			_elm_lang$core$Basics$toString(colspan));
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btncNoevent = F3(
	function (c, typ, _p0) {
		var _p1 = _p0;
		var filterJust = _elm_lang$core$List$filterMap(_elm_lang$core$Basics$identity);
		return A2(
			_elm_lang$html$Html$button,
			A2(
				_elm_lang$core$List_ops['::'],
				_elm_lang$html$Html_Attributes$type$(typ),
				A2(
					_elm_lang$core$List_ops['::'],
					_circuithub$elm_html_shorthand$Html_Shorthand$class$(
						A2(_elm_lang$core$Basics_ops['++'], 'btn ', c)),
					filterJust(
						_elm_lang$core$Native_List.fromArray(
							[
								A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$title, _p1.tooltip)
							])))),
			function () {
				var _p2 = {ctor: '_Tuple2', _0: _p1.icon, _1: _p1.label};
				_v1_3:
				do {
					if (_p2.ctor === '_Tuple2') {
						if (_p2._0.ctor === 'Just') {
							if (_p2._1.ctor === 'Just') {
								return _elm_lang$core$Native_List.fromArray(
									[
										_p2._0._0,
										_elm_lang$html$Html$text(
										A2(
											_elm_lang$core$String$cons,
											_elm_lang$core$Native_Utils.chr(' '),
											_p2._1._0))
									]);
							} else {
								return _elm_lang$core$Native_List.fromArray(
									[_p2._0._0]);
							}
						} else {
							if (_p2._1.ctor === 'Just') {
								return _elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text(_p2._1._0)
									]);
							} else {
								break _v1_3;
							}
						}
					} else {
						break _v1_3;
					}
				} while(false);
				return _elm_lang$core$Native_List.fromArray(
					[]);
			}());
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc = F4(
	function (c, typ, _p3, x) {
		var _p4 = _p3;
		var filterJust = _elm_lang$core$List$filterMap(_elm_lang$core$Basics$identity);
		return A2(
			_elm_lang$html$Html$button,
			A2(
				_elm_lang$core$List_ops['::'],
				_elm_lang$html$Html_Attributes$type$(typ),
				A2(
					_elm_lang$core$List_ops['::'],
					_circuithub$elm_html_shorthand$Html_Shorthand$class$(
						A2(_elm_lang$core$Basics_ops['++'], 'btn ', c)),
					A2(
						_elm_lang$core$List_ops['::'],
						_elm_lang$html$Html_Events$onClick(x),
						filterJust(
							_elm_lang$core$Native_List.fromArray(
								[
									A2(_elm_lang$core$Maybe$map, _elm_lang$html$Html_Attributes$title, _p4.tooltip)
								]))))),
			function () {
				var _p5 = {ctor: '_Tuple2', _0: _p4.icon, _1: _p4.label};
				_v3_3:
				do {
					if (_p5.ctor === '_Tuple2') {
						if (_p5._0.ctor === 'Just') {
							if (_p5._1.ctor === 'Just') {
								return _elm_lang$core$Native_List.fromArray(
									[
										_p5._0._0,
										_elm_lang$html$Html$text(
										A2(
											_elm_lang$core$String$cons,
											_elm_lang$core$Native_Utils.chr(' '),
											_p5._1._0))
									]);
							} else {
								return _elm_lang$core$Native_List.fromArray(
									[_p5._0._0]);
							}
						} else {
							if (_p5._1.ctor === 'Just') {
								return _elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text(_p5._1._0)
									]);
							} else {
								break _v3_3;
							}
						}
					} else {
						break _v3_3;
					}
				} while(false);
				return _elm_lang$core$Native_List.fromArray(
					[]);
			}());
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$BtnParam = F3(
	function (a, b, c) {
		return {icon: a, label: b, tooltip: c};
	});

var _circuithub$elm_bootstrap_html$Bootstrap_Html$wellLg_ = _circuithub$elm_html_shorthand$Html_Shorthand$div$(
	{$class: 'well well-lg'});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$wellSm_ = _circuithub$elm_html_shorthand$Html_Shorthand$div$(
	{$class: 'well well-sm'});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$well_ = _circuithub$elm_html_shorthand$Html_Shorthand$div$(
	{$class: 'well'});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$embedResponsive4x3_ = _circuithub$elm_html_shorthand$Html_Shorthand$div$(
	{$class: 'embed-responsive embed-responsive-4by3'});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$embedResponsive16x9_ = _circuithub$elm_html_shorthand$Html_Shorthand$div$(
	{$class: 'embed-responsive embed-responsive-16by9'});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$panelTitle_ = function (t) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$h2$,
		{$class: 'panel-title'},
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$panelBody_ = _circuithub$elm_html_shorthand$Html_Shorthand$div$(
	{$class: 'panel-body'});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$panelHeading_ = _circuithub$elm_html_shorthand$Html_Shorthand$div$(
	{$class: 'panel-heading'});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$panelDefault_ = _circuithub$elm_html_shorthand$Html_Shorthand$div$(
	{$class: 'panel panel-default'});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$navbarHeader_ = _circuithub$elm_html_shorthand$Html_Shorthand$div$(
	{$class: 'navbar-header'});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$navbar$ = function (c) {
	return _circuithub$elm_html_shorthand$Html_Shorthand$nav$(
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'navbar ', c)
		});
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$navbarDefault$ = function (c) {
	return _circuithub$elm_bootstrap_html$Bootstrap_Html$navbar$(
		A2(_elm_lang$core$Basics_ops['++'], 'navbar-default ', c));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTreeDeciduous$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-tree-deciduous ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTreeDeciduous_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTreeDeciduous$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTreeConifer$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-tree-conifer ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTreeConifer_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTreeConifer$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCloudUpload$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-cloud-upload ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCloudUpload_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCloudUpload$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCloudDownload$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-cloud-download ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCloudDownload_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCloudDownload$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRegistrationMark$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-registration-mark ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRegistrationMark_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRegistrationMark$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCopyrightMark$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-copyright-mark ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCopyrightMark_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCopyrightMark$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSound71$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-sound-7-1 ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSound71_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSound71$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSound61$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-sound-6-1 ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSound61_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSound61$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSound51$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-sound-5-1 ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSound51_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSound51$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSoundDolby$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-sound-dolby ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSoundDolby_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSoundDolby$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSoundStereo$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-sound-stereo ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSoundStereo_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSoundStereo$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSubtitles$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-subtitles ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSubtitles_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSubtitles$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHdVideo$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-hd-video ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHdVideo_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHdVideo$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSdVideo$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-sd-video ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSdVideo_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSdVideo$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStats$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-stats ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStats_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStats$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTower$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-tower ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTower_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTower$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPhoneAlt$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-phone-alt ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPhoneAlt_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPhoneAlt$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEarphone$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-earphone ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEarphone_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEarphone$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCompressed$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-compressed ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCompressed_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCompressed$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHeader$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-header ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHeader_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHeader$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCutlery$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-cutlery ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCutlery_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCutlery$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTransfer$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-transfer ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTransfer_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTransfer$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCreditCard$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-credit-card ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCreditCard_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCreditCard$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppyOpen$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-floppy-open ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppyOpen_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppyOpen$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppySave$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-floppy-save ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppySave_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppySave$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppyRemove$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-floppy-remove ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppyRemove_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppyRemove$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppySaved$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-floppy-saved ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppySaved_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppySaved$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppyDisk$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-floppy-disk ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppyDisk_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFloppyDisk$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSend$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-send ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSend_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSend$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconExport$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-export ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconExport_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconExport$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconImport$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-import ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconImport_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconImport$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSaved$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-saved ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSaved_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSaved$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOpen$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-open ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOpen_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOpen$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSave$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-save ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSave_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSave$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRecord$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-record ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRecord_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRecord$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconNewWindow$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-new-window ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconNewWindow_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconNewWindow$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLogOut$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-log-out ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLogOut_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLogOut$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFlash$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-flash ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFlash_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFlash$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLogIn$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-log-in ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLogIn_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLogIn$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCollapseUp$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-collapse-up ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCollapseUp_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCollapseUp$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCollapseDown$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-collapse-down ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCollapseDown_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCollapseDown$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconExpand$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-expand ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconExpand_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconExpand$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconUnchecked$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-unchecked ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconUnchecked_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconUnchecked$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByAttributesAlt$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-sort-by-attributes-alt ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByAttributesAlt_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByAttributesAlt$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByAttributes$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-sort-by-attributes ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByAttributes_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByAttributes$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByOrderAlt$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-sort-by-order-alt ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByOrderAlt_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByOrderAlt$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByOrder$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-sort-by-order ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByOrder_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByOrder$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByAlphabetAlt$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-sort-by-alphabet-alt ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByAlphabetAlt_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByAlphabetAlt$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByAlphabet$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-sort-by-alphabet ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByAlphabet_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSortByAlphabet$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSort$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-sort ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSort_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSort$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconGbp$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-gbp ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconGbp_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconGbp$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconUsd$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-usd ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconUsd_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconUsd$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPushpin$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-pushpin ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPushpin_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPushpin$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPhone$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-phone ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPhone_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPhone$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLink$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-link ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLink_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLink$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHeartEmpty$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-heart-empty ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHeartEmpty_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHeartEmpty$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPaperclip$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-paperclip ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPaperclip_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPaperclip$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconDashboard$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-dashboard ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconDashboard_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconDashboard$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFullscreen$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-fullscreen ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFullscreen_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFullscreen$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBriefcase$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-briefcase ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBriefcase_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBriefcase$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFilter$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-filter ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFilter_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFilter$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTasks$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-tasks ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTasks_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTasks$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconWrench$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-wrench ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconWrench_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconWrench$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconGlobe$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-globe ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconGlobe_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconGlobe$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCircleArrowDown$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-circle-arrow-down ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCircleArrowDown_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCircleArrowDown$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCircleArrowUp$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-circle-arrow-up ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCircleArrowUp_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCircleArrowUp$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCircleArrowLeft$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-circle-arrow-left ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCircleArrowLeft_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCircleArrowLeft$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCircleArrowRight$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-circle-arrow-right ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCircleArrowRight_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCircleArrowRight$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHandDown$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-hand-down ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHandDown_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHandDown$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHandUp$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-hand-up ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHandUp_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHandUp$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHandLeft$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-hand-left ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHandLeft_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHandLeft$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHandRight$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-hand-right ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHandRight_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHandRight$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconThumbsDown$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-thumbs-down ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconThumbsDown_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconThumbsDown$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconThumbsUp$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-thumbs-up ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconThumbsUp_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconThumbsUp$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCertificate$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-certificate ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCertificate_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCertificate$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBell$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-bell ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBell_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBell$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBullhorn$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-bullhorn ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBullhorn_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBullhorn$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHdd$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-hdd ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHdd_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHdd$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconResizeHorizontal$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-resize-horizontal ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconResizeHorizontal_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconResizeHorizontal$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconResizeVertical$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-resize-vertical ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconResizeVertical_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconResizeVertical$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFolderOpen$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-folder-open ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFolderOpen_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFolderOpen$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFolderClose$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-folder-close ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFolderClose_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFolderClose$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconShoppingCart$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-shopping-cart ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconShoppingCart_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconShoppingCart$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRetweet$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-retweet ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRetweet_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRetweet$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconChevronDown$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-chevron-down ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconChevronDown_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconChevronDown$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconChevronUp$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-chevron-up ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconChevronUp_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconChevronUp$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMagnet$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-magnet ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMagnet_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMagnet$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconComment$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-comment ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconComment_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconComment$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRandom$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-random ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRandom_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRandom$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCalendar$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-calendar ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCalendar_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCalendar$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlane$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-plane ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlane_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlane$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconWarningSign$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-warning-sign ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconWarningSign_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconWarningSign$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEyeClose$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-eye-close ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEyeClose_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEyeClose$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEyeOpen$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-eye-open ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEyeOpen_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEyeOpen$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFire$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-fire ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFire_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFire$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLeaf$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-leaf ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLeaf_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLeaf$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconGift$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-gift ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconGift_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconGift$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconExclamationSign$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-exclamation-sign ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconExclamationSign_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconExclamationSign$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconResizeSmall$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-resize-small ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconResizeSmall_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconResizeSmall$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconResizeFull$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-resize-full ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconResizeFull_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconResizeFull$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconShareAlt$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-share-alt ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconShareAlt_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconShareAlt$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconArrowDown$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-arrow-down ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconArrowDown_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconArrowDown$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconArrowUp$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-arrow-up ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconArrowUp_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconArrowUp$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconArrowRight$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-arrow-right ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconArrowRight_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconArrowRight$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconArrowLeft$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-arrow-left ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconArrowLeft_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconArrowLeft$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBanCircle$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-ban-circle ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBanCircle_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBanCircle$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOkCircle$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-ok-circle ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOkCircle_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOkCircle$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRemoveCircle$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-remove-circle ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRemoveCircle_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRemoveCircle$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconScreenshot$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-screenshot ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconScreenshot_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconScreenshot$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconInfoSign$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-info-sign ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconInfoSign_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconInfoSign$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconQuestionSign$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-question-sign ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconQuestionSign_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconQuestionSign$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOkSign$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-ok-sign ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOkSign_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOkSign$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRemoveSign$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-remove-sign ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRemoveSign_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRemoveSign$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMinusSign$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-minus-sign ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMinusSign_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMinusSign$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlusSign$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-plus-sign ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlusSign_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlusSign$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconChevronRight$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-chevron-right ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconChevronRight_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconChevronRight$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconChevronLeft$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-chevron-left ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconChevronLeft_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconChevronLeft$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEject$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-eject ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEject_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEject$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStepForward$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-step-forward ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStepForward_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStepForward$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFastForward$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-fast-forward ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFastForward_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFastForward$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconForward$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-forward ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconForward_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconForward$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStop$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-stop ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStop_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStop$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPause$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-pause ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPause_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPause$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlay$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-play ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlay_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlay$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBackward$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-backward ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBackward_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBackward$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFastBackward$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-fast-backward ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFastBackward_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFastBackward$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStepBackward$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-step-backward ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStepBackward_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStepBackward$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMove$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-move ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMove_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMove$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCheck$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-check ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCheck_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCheck$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconShare$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-share ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconShare_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconShare$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEdit$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-edit ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEdit_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEdit$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTint$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-tint ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTint_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTint$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAdjust$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-adjust ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAdjust_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAdjust$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMapMarker$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-map-marker ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMapMarker_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMapMarker$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPicture$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-picture ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPicture_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPicture$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFacetimeVideo$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-facetime-video ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFacetimeVideo_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFacetimeVideo$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconIndentRight$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-indent-right ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconIndentRight_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconIndentRight$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconIndentLeft$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-indent-left ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconIndentLeft_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconIndentLeft$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconList$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-list ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconList_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconList$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAlignJustify$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-align-justify ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAlignJustify_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAlignJustify$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAlignRight$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-align-right ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAlignRight_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAlignRight$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAlignCenter$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-align-center ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAlignCenter_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAlignCenter$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAlignLeft$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-align-left ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAlignLeft_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAlignLeft$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTextWidth$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-text-width ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTextWidth_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTextWidth$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTextHeight$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-text-height ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTextHeight_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTextHeight$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconItalic$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-italic ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconItalic_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconItalic$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBold$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-bold ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBold_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBold$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFont$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-font ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFont_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFont$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCamera$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-camera ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCamera_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCamera$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPrint$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-print ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPrint_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPrint$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBookmark$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-bookmark ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBookmark_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBookmark$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBook$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-book ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBook_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBook$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTags$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-tags ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTags_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTags$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTag$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-tag ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTag_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTag$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBarcode$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-barcode ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBarcode_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconBarcode$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconQrcode$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-qrcode ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconQrcode_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconQrcode$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconVolumeUp$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-volume-up ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconVolumeUp_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconVolumeUp$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconVolumeDown$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-volume-down ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconVolumeDown_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconVolumeDown$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconVolumeOff$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-volume-off ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconVolumeOff_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconVolumeOff$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHeadphones$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-headphones ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHeadphones_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHeadphones$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFlag$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-flag ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFlag_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFlag$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLock$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-lock ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLock_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconLock$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconListAlt$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-list-alt ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconListAlt_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconListAlt$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRefresh$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-refresh ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRefresh_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRefresh$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRepeat$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-repeat ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRepeat_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRepeat$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlayCircle$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-play-circle ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlayCircle_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlayCircle$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconInbox$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-inbox ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconInbox_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconInbox$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconUpload$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-upload ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconUpload_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconUpload$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconDownload$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-download ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconDownload_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconDownload$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconDownloadAlt$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-download-alt ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconDownloadAlt_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconDownloadAlt$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRoad$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-road ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRoad_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRoad$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTime$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-time ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTime_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTime$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFile$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-file ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFile_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFile$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHome$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-home ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHome_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHome$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTrash$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-trash ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTrash_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTrash$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCog$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-cog ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCog_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCog$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSignal$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-signal ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSignal_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSignal$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOff$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-off ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOff_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOff$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconZoomOut$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-zoom-out ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconZoomOut_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconZoomOut$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconZoomIn$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-zoom-in ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconZoomIn_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconZoomIn$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRemove$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-remove ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRemove_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconRemove$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOk$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-ok ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOk_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconOk$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconThList$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-th-list ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconThList_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconThList$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTh$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-th ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTh_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconTh$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconThLarge$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-th-large ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconThLarge_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconThLarge$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFilm$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-film ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFilm_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconFilm$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconUser$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-user ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconUser_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconUser$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStarEmpty$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-star-empty ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStarEmpty_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStarEmpty$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStar$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-star ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStar_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconStar$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHeart$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-heart ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHeart_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconHeart$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSearch$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-search ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSearch_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconSearch$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMusic$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-music ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMusic_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMusic$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconGlass$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-glass ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconGlass_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconGlass$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPencil$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-pencil ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPencil_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPencil$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEnvelope$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-envelope ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEnvelope_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEnvelope$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCloud$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-cloud ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCloud_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconCloud$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMinus$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-minus ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMinus_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconMinus$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEuro$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-euro ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEuro_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconEuro$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlus$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-plus ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlus_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconPlus$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAsterisk$ = function (c) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$span$,
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'glyphicon glyphicon-asterisk ', c)
		},
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAsterisk_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$glyphiconAsterisk$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$skipNavigation_ = function (t) {
	return A2(
		_circuithub$elm_html_shorthand$Html_Shorthand$a$,
		{$class: 'sr-only sr-only-focusable', href: '#content'},
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(t)
			]));
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSubmitLgPrimary_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btncNoevent, 'btn-lg btn-primary', 'submit', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSubmitLgPrimary$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btncNoevent,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-lg btn-primary ', c),
			'submit',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSubmitSmPrimary_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btncNoevent, 'btn-sm btn-primary', 'submit', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSubmitSmPrimary$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btncNoevent,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-sm btn-primary ', c),
			'submit',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSubmitXsPrimary_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btncNoevent, 'btn-xs btn-primary ', 'submit', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSubmitXsPrimary$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btncNoevent,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-xs btn-primary ', c),
			'submit',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSubmitPrimary_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btncNoevent, 'btn-primary', 'submit', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSubmitPrimary$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btncNoevent,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-primary ', c),
			'submit',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnLgDanger_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-lg btn-danger', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnLgDanger$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-lg btn-danger ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSmDanger_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-sm btn-danger', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSmDanger$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-sm btn-danger ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnXsDanger_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-xs btn-danger ', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnXsDanger$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-xs btn-danger ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnDanger_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-danger', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnDanger$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-danger ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnLgWarning_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-lg btn-warning', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnLgWarning$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-lg btn-warning ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSmWarning_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-sm btn-warning', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSmWarning$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-sm btn-warning ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnXsWarning_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-xs btn-warning ', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnXsWarning$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-xs btn-warning ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnWarning_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-warning', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnWarning$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-warning ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnLgInfo_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-lg btn-info', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnLgInfo$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-lg btn-info ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSmInfo_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-sm btn-info', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSmInfo$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-sm btn-info ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnXsInfo_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-xs btn-info ', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnXsInfo$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-xs btn-info ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnInfo_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-info', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnInfo$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-info ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnLgSuccess_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-lg btn-success', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnLgSuccess$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-lg btn-success ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSmSuccess_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-sm btn-success', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSmSuccess$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-sm btn-success ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnXsSuccess_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-xs btn-success ', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnXsSuccess$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-xs btn-success ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$panelDefault$ = F3(
	function (t, btns, bs) {
		var uncurry3 = F2(
			function (f, _p0) {
				var _p1 = _p0;
				return A2(f, _p1._0, _p1._1);
			});
		return _circuithub$elm_bootstrap_html$Bootstrap_Html$panelDefault_(
			_elm_lang$core$Native_List.fromArray(
				[
					_circuithub$elm_bootstrap_html$Bootstrap_Html$panelHeading_(
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$List$map,
							uncurry3(
								_circuithub$elm_bootstrap_html$Bootstrap_Html$btnXsSuccess$('pull-right')),
							_elm_lang$core$List$reverse(btns)),
						_elm_lang$core$Native_List.fromArray(
							[
								_circuithub$elm_bootstrap_html$Bootstrap_Html$panelTitle_(t)
							]))),
					_circuithub$elm_bootstrap_html$Bootstrap_Html$panelBody_(bs)
				]));
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSuccess_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-success', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSuccess$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-success ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnLgPrimary_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-lg btn-primary', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnLgPrimary$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-lg btn-primary ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSmPrimary_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-sm btn-primary', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSmPrimary$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-sm btn-primary ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnXsPrimary_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-xs btn-primary ', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnXsPrimary$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-xs btn-primary ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnPrimary_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-primary', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnPrimary$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-primary ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnLgDefault_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-lg btn-default', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnLgDefault$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-lg btn-default ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSmDefault_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-sm btn-default', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnSmDefault$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-sm btn-default ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnXsDefault_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-xs btn-default ', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnXsDefault$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-xs btn-default  ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnDefault_ = function (p) {
	return A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc, 'btn-default', 'button', p);
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnDefault$ = F2(
	function (c, p) {
		return A3(
			_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$btnc,
			A2(_elm_lang$core$Basics_ops['++'], 'btn-default ', c),
			'button',
			p);
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$btnParam = {icon: _elm_lang$core$Maybe$Nothing, label: _elm_lang$core$Maybe$Nothing, tooltip: _elm_lang$core$Maybe$Nothing};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$formGroup_ = _circuithub$elm_html_shorthand$Html_Shorthand$div$(
	{$class: 'form-group'});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$tableBodyStriped$ = function (c) {
	return _circuithub$elm_html_shorthand$Html_Shorthand$table$(
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'table table-body-striped ', c)
		});
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$tableBodyStriped_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$tableBodyStriped$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$tableStriped$ = function (c) {
	return _circuithub$elm_html_shorthand$Html_Shorthand$table$(
		{
			$class: A2(_elm_lang$core$Basics_ops['++'], 'table table-striped ', c)
		});
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$tableStriped_ = _circuithub$elm_bootstrap_html$Bootstrap_Html$tableStriped$('');
var _circuithub$elm_bootstrap_html$Bootstrap_Html$colLgOffset_ = F8(
	function (xs, xsOffset, sm, smOffset, md, mdOffset, lg, lgOffset) {
		return _circuithub$elm_html_shorthand$Html_Shorthand$div$(
			{
				$class: A2(
					_elm_lang$core$Basics_ops['++'],
					A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$colOffset, 'xs', xs, xsOffset),
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$String$cons,
							_elm_lang$core$Native_Utils.chr(' '),
							A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$colOffset, 'sm', sm, smOffset)),
						A2(
							_elm_lang$core$Basics_ops['++'],
							A2(
								_elm_lang$core$String$cons,
								_elm_lang$core$Native_Utils.chr(' '),
								A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$colOffset, 'md', md, mdOffset)),
							A2(
								_elm_lang$core$String$cons,
								_elm_lang$core$Native_Utils.chr(' '),
								A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$colOffset, 'lg', lg, lgOffset)))))
			});
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$colMdOffset_ = F6(
	function (xs, xsOffset, sm, smOffset, md, mdOffset) {
		return _circuithub$elm_html_shorthand$Html_Shorthand$div$(
			{
				$class: A2(
					_elm_lang$core$Basics_ops['++'],
					A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$colOffset, 'xs', xs, xsOffset),
					A2(
						_elm_lang$core$Basics_ops['++'],
						A2(
							_elm_lang$core$String$cons,
							_elm_lang$core$Native_Utils.chr(' '),
							A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$colOffset, 'sm', sm, smOffset)),
						A2(
							_elm_lang$core$String$cons,
							_elm_lang$core$Native_Utils.chr(' '),
							A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$colOffset, 'md', md, mdOffset))))
			});
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$colSmOffset_ = F4(
	function (xs, xsOffset, sm, smOffset) {
		return _circuithub$elm_html_shorthand$Html_Shorthand$div$(
			{
				$class: A2(
					_elm_lang$core$Basics_ops['++'],
					A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$colOffset, 'xs', xs, xsOffset),
					A2(
						_elm_lang$core$String$cons,
						_elm_lang$core$Native_Utils.chr(' '),
						A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$colOffset, 'sm', sm, smOffset)))
			});
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$colXsOffset_ = F2(
	function (xs, xsOffset) {
		return _circuithub$elm_html_shorthand$Html_Shorthand$div$(
			{
				$class: A3(_circuithub$elm_bootstrap_html$Bootstrap_Html_Internal$colOffset, 'xs', xs, xsOffset)
			});
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$colLg_ = F4(
	function (xs, sm, md, lg) {
		return _circuithub$elm_html_shorthand$Html_Shorthand$div$(
			{
				$class: A2(
					_elm_lang$core$Basics_ops['++'],
					'col-xs-',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(xs),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' col-sm-',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(sm),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' col-md-',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_elm_lang$core$Basics$toString(md),
										A2(
											_elm_lang$core$Basics_ops['++'],
											' col-lg-',
											_elm_lang$core$Basics$toString(lg))))))))
			});
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$colMd_ = F3(
	function (xs, sm, md) {
		return _circuithub$elm_html_shorthand$Html_Shorthand$div$(
			{
				$class: A2(
					_elm_lang$core$Basics_ops['++'],
					'col-xs-',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(xs),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' col-sm-',
							A2(
								_elm_lang$core$Basics_ops['++'],
								_elm_lang$core$Basics$toString(sm),
								A2(
									_elm_lang$core$Basics_ops['++'],
									' col-md-',
									_elm_lang$core$Basics$toString(md))))))
			});
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$colSm_ = F2(
	function (xs, sm) {
		return _circuithub$elm_html_shorthand$Html_Shorthand$div$(
			{
				$class: A2(
					_elm_lang$core$Basics_ops['++'],
					'col-xs-',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_elm_lang$core$Basics$toString(xs),
						A2(
							_elm_lang$core$Basics_ops['++'],
							' col-sm-',
							_elm_lang$core$Basics$toString(sm))))
			});
	});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$colXs_ = function (xs) {
	return _circuithub$elm_html_shorthand$Html_Shorthand$div$(
		{
			$class: A2(
				_elm_lang$core$Basics_ops['++'],
				'col-xs-',
				_elm_lang$core$Basics$toString(xs))
		});
};
var _circuithub$elm_bootstrap_html$Bootstrap_Html$row_ = _circuithub$elm_html_shorthand$Html_Shorthand$div$(
	{$class: 'row'});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$containerFluid_ = _circuithub$elm_html_shorthand$Html_Shorthand$div$(
	{$class: 'container-fluid'});
var _circuithub$elm_bootstrap_html$Bootstrap_Html$container_ = _circuithub$elm_html_shorthand$Html_Shorthand$div$(
	{$class: 'container'});

var _elm_community$basics_extra$Basics_Extra_ops = _elm_community$basics_extra$Basics_Extra_ops || {};
_elm_community$basics_extra$Basics_Extra_ops['=>'] = F2(
	function (v0, v1) {
		return {ctor: '_Tuple2', _0: v0, _1: v1};
	});
var _elm_community$basics_extra$Basics_Extra$never = function (n) {
	never:
	while (true) {
		var _v0 = n;
		n = _v0;
		continue never;
	}
};

var _elm_lang$html$Html_App$programWithFlags = _elm_lang$virtual_dom$VirtualDom$programWithFlags;
var _elm_lang$html$Html_App$program = function (app) {
	return _elm_lang$html$Html_App$programWithFlags(
		_elm_lang$core$Native_Utils.update(
			app,
			{
				init: function (_p0) {
					return app.init;
				}
			}));
};
var _elm_lang$html$Html_App$beginnerProgram = function (_p1) {
	var _p2 = _p1;
	return _elm_lang$html$Html_App$programWithFlags(
		{
			init: function (_p3) {
				return A2(
					_elm_lang$core$Platform_Cmd_ops['!'],
					_p2.model,
					_elm_lang$core$Native_List.fromArray(
						[]));
			},
			update: F2(
				function (msg, model) {
					return A2(
						_elm_lang$core$Platform_Cmd_ops['!'],
						A2(_p2.update, msg, model),
						_elm_lang$core$Native_List.fromArray(
							[]));
				}),
			view: _p2.view,
			subscriptions: function (_p4) {
				return _elm_lang$core$Platform_Sub$none;
			}
		});
};
var _elm_lang$html$Html_App$map = _elm_lang$virtual_dom$VirtualDom$map;

var _elm_lang$core$Color$fmod = F2(
	function (f, n) {
		var integer = _elm_lang$core$Basics$floor(f);
		return (_elm_lang$core$Basics$toFloat(
			A2(_elm_lang$core$Basics_ops['%'], integer, n)) + f) - _elm_lang$core$Basics$toFloat(integer);
	});
var _elm_lang$core$Color$rgbToHsl = F3(
	function (red, green, blue) {
		var b = _elm_lang$core$Basics$toFloat(blue) / 255;
		var g = _elm_lang$core$Basics$toFloat(green) / 255;
		var r = _elm_lang$core$Basics$toFloat(red) / 255;
		var cMax = A2(
			_elm_lang$core$Basics$max,
			A2(_elm_lang$core$Basics$max, r, g),
			b);
		var cMin = A2(
			_elm_lang$core$Basics$min,
			A2(_elm_lang$core$Basics$min, r, g),
			b);
		var c = cMax - cMin;
		var lightness = (cMax + cMin) / 2;
		var saturation = _elm_lang$core$Native_Utils.eq(lightness, 0) ? 0 : (c / (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)));
		var hue = _elm_lang$core$Basics$degrees(60) * (_elm_lang$core$Native_Utils.eq(cMax, r) ? A2(_elm_lang$core$Color$fmod, (g - b) / c, 6) : (_elm_lang$core$Native_Utils.eq(cMax, g) ? (((b - r) / c) + 2) : (((r - g) / c) + 4)));
		return {ctor: '_Tuple3', _0: hue, _1: saturation, _2: lightness};
	});
var _elm_lang$core$Color$hslToRgb = F3(
	function (hue, saturation, lightness) {
		var hue$ = hue / _elm_lang$core$Basics$degrees(60);
		var chroma = (1 - _elm_lang$core$Basics$abs((2 * lightness) - 1)) * saturation;
		var x = chroma * (1 - _elm_lang$core$Basics$abs(
			A2(_elm_lang$core$Color$fmod, hue$, 2) - 1));
		var _p0 = (_elm_lang$core$Native_Utils.cmp(hue$, 0) < 0) ? {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(hue$, 1) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: x, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(hue$, 2) < 0) ? {ctor: '_Tuple3', _0: x, _1: chroma, _2: 0} : ((_elm_lang$core$Native_Utils.cmp(hue$, 3) < 0) ? {ctor: '_Tuple3', _0: 0, _1: chroma, _2: x} : ((_elm_lang$core$Native_Utils.cmp(hue$, 4) < 0) ? {ctor: '_Tuple3', _0: 0, _1: x, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(hue$, 5) < 0) ? {ctor: '_Tuple3', _0: x, _1: 0, _2: chroma} : ((_elm_lang$core$Native_Utils.cmp(hue$, 6) < 0) ? {ctor: '_Tuple3', _0: chroma, _1: 0, _2: x} : {ctor: '_Tuple3', _0: 0, _1: 0, _2: 0}))))));
		var r = _p0._0;
		var g = _p0._1;
		var b = _p0._2;
		var m = lightness - (chroma / 2);
		return {ctor: '_Tuple3', _0: r + m, _1: g + m, _2: b + m};
	});
var _elm_lang$core$Color$toRgb = function (color) {
	var _p1 = color;
	if (_p1.ctor === 'RGBA') {
		return {red: _p1._0, green: _p1._1, blue: _p1._2, alpha: _p1._3};
	} else {
		var _p2 = A3(_elm_lang$core$Color$hslToRgb, _p1._0, _p1._1, _p1._2);
		var r = _p2._0;
		var g = _p2._1;
		var b = _p2._2;
		return {
			red: _elm_lang$core$Basics$round(255 * r),
			green: _elm_lang$core$Basics$round(255 * g),
			blue: _elm_lang$core$Basics$round(255 * b),
			alpha: _p1._3
		};
	}
};
var _elm_lang$core$Color$toHsl = function (color) {
	var _p3 = color;
	if (_p3.ctor === 'HSLA') {
		return {hue: _p3._0, saturation: _p3._1, lightness: _p3._2, alpha: _p3._3};
	} else {
		var _p4 = A3(_elm_lang$core$Color$rgbToHsl, _p3._0, _p3._1, _p3._2);
		var h = _p4._0;
		var s = _p4._1;
		var l = _p4._2;
		return {hue: h, saturation: s, lightness: l, alpha: _p3._3};
	}
};
var _elm_lang$core$Color$HSLA = F4(
	function (a, b, c, d) {
		return {ctor: 'HSLA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$hsla = F4(
	function (hue, saturation, lightness, alpha) {
		return A4(
			_elm_lang$core$Color$HSLA,
			hue - _elm_lang$core$Basics$turns(
				_elm_lang$core$Basics$toFloat(
					_elm_lang$core$Basics$floor(hue / (2 * _elm_lang$core$Basics$pi)))),
			saturation,
			lightness,
			alpha);
	});
var _elm_lang$core$Color$hsl = F3(
	function (hue, saturation, lightness) {
		return A4(_elm_lang$core$Color$hsla, hue, saturation, lightness, 1);
	});
var _elm_lang$core$Color$complement = function (color) {
	var _p5 = color;
	if (_p5.ctor === 'HSLA') {
		return A4(
			_elm_lang$core$Color$hsla,
			_p5._0 + _elm_lang$core$Basics$degrees(180),
			_p5._1,
			_p5._2,
			_p5._3);
	} else {
		var _p6 = A3(_elm_lang$core$Color$rgbToHsl, _p5._0, _p5._1, _p5._2);
		var h = _p6._0;
		var s = _p6._1;
		var l = _p6._2;
		return A4(
			_elm_lang$core$Color$hsla,
			h + _elm_lang$core$Basics$degrees(180),
			s,
			l,
			_p5._3);
	}
};
var _elm_lang$core$Color$grayscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$greyscale = function (p) {
	return A4(_elm_lang$core$Color$HSLA, 0, 0, 1 - p, 1);
};
var _elm_lang$core$Color$RGBA = F4(
	function (a, b, c, d) {
		return {ctor: 'RGBA', _0: a, _1: b, _2: c, _3: d};
	});
var _elm_lang$core$Color$rgba = _elm_lang$core$Color$RGBA;
var _elm_lang$core$Color$rgb = F3(
	function (r, g, b) {
		return A4(_elm_lang$core$Color$RGBA, r, g, b, 1);
	});
var _elm_lang$core$Color$lightRed = A4(_elm_lang$core$Color$RGBA, 239, 41, 41, 1);
var _elm_lang$core$Color$red = A4(_elm_lang$core$Color$RGBA, 204, 0, 0, 1);
var _elm_lang$core$Color$darkRed = A4(_elm_lang$core$Color$RGBA, 164, 0, 0, 1);
var _elm_lang$core$Color$lightOrange = A4(_elm_lang$core$Color$RGBA, 252, 175, 62, 1);
var _elm_lang$core$Color$orange = A4(_elm_lang$core$Color$RGBA, 245, 121, 0, 1);
var _elm_lang$core$Color$darkOrange = A4(_elm_lang$core$Color$RGBA, 206, 92, 0, 1);
var _elm_lang$core$Color$lightYellow = A4(_elm_lang$core$Color$RGBA, 255, 233, 79, 1);
var _elm_lang$core$Color$yellow = A4(_elm_lang$core$Color$RGBA, 237, 212, 0, 1);
var _elm_lang$core$Color$darkYellow = A4(_elm_lang$core$Color$RGBA, 196, 160, 0, 1);
var _elm_lang$core$Color$lightGreen = A4(_elm_lang$core$Color$RGBA, 138, 226, 52, 1);
var _elm_lang$core$Color$green = A4(_elm_lang$core$Color$RGBA, 115, 210, 22, 1);
var _elm_lang$core$Color$darkGreen = A4(_elm_lang$core$Color$RGBA, 78, 154, 6, 1);
var _elm_lang$core$Color$lightBlue = A4(_elm_lang$core$Color$RGBA, 114, 159, 207, 1);
var _elm_lang$core$Color$blue = A4(_elm_lang$core$Color$RGBA, 52, 101, 164, 1);
var _elm_lang$core$Color$darkBlue = A4(_elm_lang$core$Color$RGBA, 32, 74, 135, 1);
var _elm_lang$core$Color$lightPurple = A4(_elm_lang$core$Color$RGBA, 173, 127, 168, 1);
var _elm_lang$core$Color$purple = A4(_elm_lang$core$Color$RGBA, 117, 80, 123, 1);
var _elm_lang$core$Color$darkPurple = A4(_elm_lang$core$Color$RGBA, 92, 53, 102, 1);
var _elm_lang$core$Color$lightBrown = A4(_elm_lang$core$Color$RGBA, 233, 185, 110, 1);
var _elm_lang$core$Color$brown = A4(_elm_lang$core$Color$RGBA, 193, 125, 17, 1);
var _elm_lang$core$Color$darkBrown = A4(_elm_lang$core$Color$RGBA, 143, 89, 2, 1);
var _elm_lang$core$Color$black = A4(_elm_lang$core$Color$RGBA, 0, 0, 0, 1);
var _elm_lang$core$Color$white = A4(_elm_lang$core$Color$RGBA, 255, 255, 255, 1);
var _elm_lang$core$Color$lightGrey = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$grey = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGrey = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightGray = A4(_elm_lang$core$Color$RGBA, 238, 238, 236, 1);
var _elm_lang$core$Color$gray = A4(_elm_lang$core$Color$RGBA, 211, 215, 207, 1);
var _elm_lang$core$Color$darkGray = A4(_elm_lang$core$Color$RGBA, 186, 189, 182, 1);
var _elm_lang$core$Color$lightCharcoal = A4(_elm_lang$core$Color$RGBA, 136, 138, 133, 1);
var _elm_lang$core$Color$charcoal = A4(_elm_lang$core$Color$RGBA, 85, 87, 83, 1);
var _elm_lang$core$Color$darkCharcoal = A4(_elm_lang$core$Color$RGBA, 46, 52, 54, 1);
var _elm_lang$core$Color$Radial = F5(
	function (a, b, c, d, e) {
		return {ctor: 'Radial', _0: a, _1: b, _2: c, _3: d, _4: e};
	});
var _elm_lang$core$Color$radial = _elm_lang$core$Color$Radial;
var _elm_lang$core$Color$Linear = F3(
	function (a, b, c) {
		return {ctor: 'Linear', _0: a, _1: b, _2: c};
	});
var _elm_lang$core$Color$linear = _elm_lang$core$Color$Linear;

//import Result //

var _elm_lang$core$Native_Date = function() {

function fromString(str)
{
	var date = new Date(str);
	return isNaN(date.getTime())
		? _elm_lang$core$Result$Err('unable to parse \'' + str + '\' as a date')
		: _elm_lang$core$Result$Ok(date);
}

var dayTable = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];
var monthTable =
	['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun',
	 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'];


return {
	fromString: fromString,
	year: function(d) { return d.getFullYear(); },
	month: function(d) { return { ctor: monthTable[d.getMonth()] }; },
	day: function(d) { return d.getDate(); },
	hour: function(d) { return d.getHours(); },
	minute: function(d) { return d.getMinutes(); },
	second: function(d) { return d.getSeconds(); },
	millisecond: function(d) { return d.getMilliseconds(); },
	toTime: function(d) { return d.getTime(); },
	fromTime: function(t) { return new Date(t); },
	dayOfWeek: function(d) { return { ctor: dayTable[d.getDay()] }; }
};

}();
var _elm_lang$core$Task$onError = _elm_lang$core$Native_Scheduler.onError;
var _elm_lang$core$Task$andThen = _elm_lang$core$Native_Scheduler.andThen;
var _elm_lang$core$Task$spawnCmd = F2(
	function (router, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Scheduler.spawn(
			A2(
				_elm_lang$core$Task$andThen,
				_p1._0,
				_elm_lang$core$Platform$sendToApp(router)));
	});
var _elm_lang$core$Task$fail = _elm_lang$core$Native_Scheduler.fail;
var _elm_lang$core$Task$mapError = F2(
	function (f, task) {
		return A2(
			_elm_lang$core$Task$onError,
			task,
			function (err) {
				return _elm_lang$core$Task$fail(
					f(err));
			});
	});
var _elm_lang$core$Task$succeed = _elm_lang$core$Native_Scheduler.succeed;
var _elm_lang$core$Task$map = F2(
	function (func, taskA) {
		return A2(
			_elm_lang$core$Task$andThen,
			taskA,
			function (a) {
				return _elm_lang$core$Task$succeed(
					func(a));
			});
	});
var _elm_lang$core$Task$map2 = F3(
	function (func, taskA, taskB) {
		return A2(
			_elm_lang$core$Task$andThen,
			taskA,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					taskB,
					function (b) {
						return _elm_lang$core$Task$succeed(
							A2(func, a, b));
					});
			});
	});
var _elm_lang$core$Task$map3 = F4(
	function (func, taskA, taskB, taskC) {
		return A2(
			_elm_lang$core$Task$andThen,
			taskA,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					taskB,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							taskC,
							function (c) {
								return _elm_lang$core$Task$succeed(
									A3(func, a, b, c));
							});
					});
			});
	});
var _elm_lang$core$Task$map4 = F5(
	function (func, taskA, taskB, taskC, taskD) {
		return A2(
			_elm_lang$core$Task$andThen,
			taskA,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					taskB,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							taskC,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									taskD,
									function (d) {
										return _elm_lang$core$Task$succeed(
											A4(func, a, b, c, d));
									});
							});
					});
			});
	});
var _elm_lang$core$Task$map5 = F6(
	function (func, taskA, taskB, taskC, taskD, taskE) {
		return A2(
			_elm_lang$core$Task$andThen,
			taskA,
			function (a) {
				return A2(
					_elm_lang$core$Task$andThen,
					taskB,
					function (b) {
						return A2(
							_elm_lang$core$Task$andThen,
							taskC,
							function (c) {
								return A2(
									_elm_lang$core$Task$andThen,
									taskD,
									function (d) {
										return A2(
											_elm_lang$core$Task$andThen,
											taskE,
											function (e) {
												return _elm_lang$core$Task$succeed(
													A5(func, a, b, c, d, e));
											});
									});
							});
					});
			});
	});
var _elm_lang$core$Task$andMap = F2(
	function (taskFunc, taskValue) {
		return A2(
			_elm_lang$core$Task$andThen,
			taskFunc,
			function (func) {
				return A2(
					_elm_lang$core$Task$andThen,
					taskValue,
					function (value) {
						return _elm_lang$core$Task$succeed(
							func(value));
					});
			});
	});
var _elm_lang$core$Task$sequence = function (tasks) {
	var _p2 = tasks;
	if (_p2.ctor === '[]') {
		return _elm_lang$core$Task$succeed(
			_elm_lang$core$Native_List.fromArray(
				[]));
	} else {
		return A3(
			_elm_lang$core$Task$map2,
			F2(
				function (x, y) {
					return A2(_elm_lang$core$List_ops['::'], x, y);
				}),
			_p2._0,
			_elm_lang$core$Task$sequence(_p2._1));
	}
};
var _elm_lang$core$Task$onEffects = F3(
	function (router, commands, state) {
		return A2(
			_elm_lang$core$Task$map,
			function (_p3) {
				return {ctor: '_Tuple0'};
			},
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Task$spawnCmd(router),
					commands)));
	});
var _elm_lang$core$Task$toMaybe = function (task) {
	return A2(
		_elm_lang$core$Task$onError,
		A2(_elm_lang$core$Task$map, _elm_lang$core$Maybe$Just, task),
		function (_p4) {
			return _elm_lang$core$Task$succeed(_elm_lang$core$Maybe$Nothing);
		});
};
var _elm_lang$core$Task$fromMaybe = F2(
	function ($default, maybe) {
		var _p5 = maybe;
		if (_p5.ctor === 'Just') {
			return _elm_lang$core$Task$succeed(_p5._0);
		} else {
			return _elm_lang$core$Task$fail($default);
		}
	});
var _elm_lang$core$Task$toResult = function (task) {
	return A2(
		_elm_lang$core$Task$onError,
		A2(_elm_lang$core$Task$map, _elm_lang$core$Result$Ok, task),
		function (msg) {
			return _elm_lang$core$Task$succeed(
				_elm_lang$core$Result$Err(msg));
		});
};
var _elm_lang$core$Task$fromResult = function (result) {
	var _p6 = result;
	if (_p6.ctor === 'Ok') {
		return _elm_lang$core$Task$succeed(_p6._0);
	} else {
		return _elm_lang$core$Task$fail(_p6._0);
	}
};
var _elm_lang$core$Task$init = _elm_lang$core$Task$succeed(
	{ctor: '_Tuple0'});
var _elm_lang$core$Task$onSelfMsg = F3(
	function (_p9, _p8, _p7) {
		return _elm_lang$core$Task$succeed(
			{ctor: '_Tuple0'});
	});
var _elm_lang$core$Task$command = _elm_lang$core$Native_Platform.leaf('Task');
var _elm_lang$core$Task$T = function (a) {
	return {ctor: 'T', _0: a};
};
var _elm_lang$core$Task$perform = F3(
	function (onFail, onSuccess, task) {
		return _elm_lang$core$Task$command(
			_elm_lang$core$Task$T(
				A2(
					_elm_lang$core$Task$onError,
					A2(_elm_lang$core$Task$map, onSuccess, task),
					function (x) {
						return _elm_lang$core$Task$succeed(
							onFail(x));
					})));
	});
var _elm_lang$core$Task$cmdMap = F2(
	function (tagger, _p10) {
		var _p11 = _p10;
		return _elm_lang$core$Task$T(
			A2(_elm_lang$core$Task$map, tagger, _p11._0));
	});
_elm_lang$core$Native_Platform.effectManagers['Task'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Task$init, onEffects: _elm_lang$core$Task$onEffects, onSelfMsg: _elm_lang$core$Task$onSelfMsg, tag: 'cmd', cmdMap: _elm_lang$core$Task$cmdMap};

//import Native.Scheduler //

var _elm_lang$core$Native_Time = function() {

var now = _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
{
	callback(_elm_lang$core$Native_Scheduler.succeed(Date.now()));
});

function setInterval_(interval, task)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		var id = setInterval(function() {
			_elm_lang$core$Native_Scheduler.rawSpawn(task);
		}, interval);

		return function() { clearInterval(id); };
	});
}

return {
	now: now,
	setInterval_: F2(setInterval_)
};

}();
var _elm_lang$core$Time$setInterval = _elm_lang$core$Native_Time.setInterval_;
var _elm_lang$core$Time$spawnHelp = F3(
	function (router, intervals, processes) {
		var _p0 = intervals;
		if (_p0.ctor === '[]') {
			return _elm_lang$core$Task$succeed(processes);
		} else {
			var _p1 = _p0._0;
			return A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Native_Scheduler.spawn(
					A2(
						_elm_lang$core$Time$setInterval,
						_p1,
						A2(_elm_lang$core$Platform$sendToSelf, router, _p1))),
				function (id) {
					return A3(
						_elm_lang$core$Time$spawnHelp,
						router,
						_p0._1,
						A3(_elm_lang$core$Dict$insert, _p1, id, processes));
				});
		}
	});
var _elm_lang$core$Time$addMySub = F2(
	function (_p2, state) {
		var _p3 = _p2;
		var _p6 = _p3._1;
		var _p5 = _p3._0;
		var _p4 = A2(_elm_lang$core$Dict$get, _p5, state);
		if (_p4.ctor === 'Nothing') {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				_elm_lang$core$Native_List.fromArray(
					[_p6]),
				state);
		} else {
			return A3(
				_elm_lang$core$Dict$insert,
				_p5,
				A2(_elm_lang$core$List_ops['::'], _p6, _p4._0),
				state);
		}
	});
var _elm_lang$core$Time$inMilliseconds = function (t) {
	return t;
};
var _elm_lang$core$Time$millisecond = 1;
var _elm_lang$core$Time$second = 1000 * _elm_lang$core$Time$millisecond;
var _elm_lang$core$Time$minute = 60 * _elm_lang$core$Time$second;
var _elm_lang$core$Time$hour = 60 * _elm_lang$core$Time$minute;
var _elm_lang$core$Time$inHours = function (t) {
	return t / _elm_lang$core$Time$hour;
};
var _elm_lang$core$Time$inMinutes = function (t) {
	return t / _elm_lang$core$Time$minute;
};
var _elm_lang$core$Time$inSeconds = function (t) {
	return t / _elm_lang$core$Time$second;
};
var _elm_lang$core$Time$now = _elm_lang$core$Native_Time.now;
var _elm_lang$core$Time$onSelfMsg = F3(
	function (router, interval, state) {
		var _p7 = A2(_elm_lang$core$Dict$get, interval, state.taggers);
		if (_p7.ctor === 'Nothing') {
			return _elm_lang$core$Task$succeed(state);
		} else {
			return A2(
				_elm_lang$core$Task$andThen,
				_elm_lang$core$Time$now,
				function (time) {
					return A2(
						_elm_lang$core$Task$andThen,
						_elm_lang$core$Task$sequence(
							A2(
								_elm_lang$core$List$map,
								function (tagger) {
									return A2(
										_elm_lang$core$Platform$sendToApp,
										router,
										tagger(time));
								},
								_p7._0)),
						function (_p8) {
							return _elm_lang$core$Task$succeed(state);
						});
				});
		}
	});
var _elm_lang$core$Time$subscription = _elm_lang$core$Native_Platform.leaf('Time');
var _elm_lang$core$Time$State = F2(
	function (a, b) {
		return {taggers: a, processes: b};
	});
var _elm_lang$core$Time$init = _elm_lang$core$Task$succeed(
	A2(_elm_lang$core$Time$State, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty));
var _elm_lang$core$Time$onEffects = F3(
	function (router, subs, _p9) {
		var _p10 = _p9;
		var rightStep = F3(
			function (_p12, id, _p11) {
				var _p13 = _p11;
				return {
					ctor: '_Tuple3',
					_0: _p13._0,
					_1: _p13._1,
					_2: A2(
						_elm_lang$core$Task$andThen,
						_elm_lang$core$Native_Scheduler.kill(id),
						function (_p14) {
							return _p13._2;
						})
				};
			});
		var bothStep = F4(
			function (interval, taggers, id, _p15) {
				var _p16 = _p15;
				return {
					ctor: '_Tuple3',
					_0: _p16._0,
					_1: A3(_elm_lang$core$Dict$insert, interval, id, _p16._1),
					_2: _p16._2
				};
			});
		var leftStep = F3(
			function (interval, taggers, _p17) {
				var _p18 = _p17;
				return {
					ctor: '_Tuple3',
					_0: A2(_elm_lang$core$List_ops['::'], interval, _p18._0),
					_1: _p18._1,
					_2: _p18._2
				};
			});
		var newTaggers = A3(_elm_lang$core$List$foldl, _elm_lang$core$Time$addMySub, _elm_lang$core$Dict$empty, subs);
		var _p19 = A6(
			_elm_lang$core$Dict$merge,
			leftStep,
			bothStep,
			rightStep,
			newTaggers,
			_p10.processes,
			{
				ctor: '_Tuple3',
				_0: _elm_lang$core$Native_List.fromArray(
					[]),
				_1: _elm_lang$core$Dict$empty,
				_2: _elm_lang$core$Task$succeed(
					{ctor: '_Tuple0'})
			});
		var spawnList = _p19._0;
		var existingDict = _p19._1;
		var killTask = _p19._2;
		return A2(
			_elm_lang$core$Task$andThen,
			killTask,
			function (_p20) {
				return A2(
					_elm_lang$core$Task$andThen,
					A3(_elm_lang$core$Time$spawnHelp, router, spawnList, existingDict),
					function (newProcesses) {
						return _elm_lang$core$Task$succeed(
							A2(_elm_lang$core$Time$State, newTaggers, newProcesses));
					});
			});
	});
var _elm_lang$core$Time$Every = F2(
	function (a, b) {
		return {ctor: 'Every', _0: a, _1: b};
	});
var _elm_lang$core$Time$every = F2(
	function (interval, tagger) {
		return _elm_lang$core$Time$subscription(
			A2(_elm_lang$core$Time$Every, interval, tagger));
	});
var _elm_lang$core$Time$subMap = F2(
	function (f, _p21) {
		var _p22 = _p21;
		return A2(
			_elm_lang$core$Time$Every,
			_p22._0,
			function (_p23) {
				return f(
					_p22._1(_p23));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Time'] = {pkg: 'elm-lang/core', init: _elm_lang$core$Time$init, onEffects: _elm_lang$core$Time$onEffects, onSelfMsg: _elm_lang$core$Time$onSelfMsg, tag: 'sub', subMap: _elm_lang$core$Time$subMap};

var _elm_lang$core$Date$millisecond = _elm_lang$core$Native_Date.millisecond;
var _elm_lang$core$Date$second = _elm_lang$core$Native_Date.second;
var _elm_lang$core$Date$minute = _elm_lang$core$Native_Date.minute;
var _elm_lang$core$Date$hour = _elm_lang$core$Native_Date.hour;
var _elm_lang$core$Date$dayOfWeek = _elm_lang$core$Native_Date.dayOfWeek;
var _elm_lang$core$Date$day = _elm_lang$core$Native_Date.day;
var _elm_lang$core$Date$month = _elm_lang$core$Native_Date.month;
var _elm_lang$core$Date$year = _elm_lang$core$Native_Date.year;
var _elm_lang$core$Date$fromTime = _elm_lang$core$Native_Date.fromTime;
var _elm_lang$core$Date$toTime = _elm_lang$core$Native_Date.toTime;
var _elm_lang$core$Date$fromString = _elm_lang$core$Native_Date.fromString;
var _elm_lang$core$Date$now = A2(_elm_lang$core$Task$map, _elm_lang$core$Date$fromTime, _elm_lang$core$Time$now);
var _elm_lang$core$Date$Date = {ctor: 'Date'};
var _elm_lang$core$Date$Sun = {ctor: 'Sun'};
var _elm_lang$core$Date$Sat = {ctor: 'Sat'};
var _elm_lang$core$Date$Fri = {ctor: 'Fri'};
var _elm_lang$core$Date$Thu = {ctor: 'Thu'};
var _elm_lang$core$Date$Wed = {ctor: 'Wed'};
var _elm_lang$core$Date$Tue = {ctor: 'Tue'};
var _elm_lang$core$Date$Mon = {ctor: 'Mon'};
var _elm_lang$core$Date$Dec = {ctor: 'Dec'};
var _elm_lang$core$Date$Nov = {ctor: 'Nov'};
var _elm_lang$core$Date$Oct = {ctor: 'Oct'};
var _elm_lang$core$Date$Sep = {ctor: 'Sep'};
var _elm_lang$core$Date$Aug = {ctor: 'Aug'};
var _elm_lang$core$Date$Jul = {ctor: 'Jul'};
var _elm_lang$core$Date$Jun = {ctor: 'Jun'};
var _elm_lang$core$Date$May = {ctor: 'May'};
var _elm_lang$core$Date$Apr = {ctor: 'Apr'};
var _elm_lang$core$Date$Mar = {ctor: 'Mar'};
var _elm_lang$core$Date$Feb = {ctor: 'Feb'};
var _elm_lang$core$Date$Jan = {ctor: 'Jan'};

var _elm_lang$core$Process$kill = _elm_lang$core$Native_Scheduler.kill;
var _elm_lang$core$Process$sleep = _elm_lang$core$Native_Scheduler.sleep;
var _elm_lang$core$Process$spawn = _elm_lang$core$Native_Scheduler.spawn;

var _elm_lang$core$Set$foldr = F3(
	function (f, b, _p0) {
		var _p1 = _p0;
		return A3(
			_elm_lang$core$Dict$foldr,
			F3(
				function (k, _p2, b) {
					return A2(f, k, b);
				}),
			b,
			_p1._0);
	});
var _elm_lang$core$Set$foldl = F3(
	function (f, b, _p3) {
		var _p4 = _p3;
		return A3(
			_elm_lang$core$Dict$foldl,
			F3(
				function (k, _p5, b) {
					return A2(f, k, b);
				}),
			b,
			_p4._0);
	});
var _elm_lang$core$Set$toList = function (_p6) {
	var _p7 = _p6;
	return _elm_lang$core$Dict$keys(_p7._0);
};
var _elm_lang$core$Set$size = function (_p8) {
	var _p9 = _p8;
	return _elm_lang$core$Dict$size(_p9._0);
};
var _elm_lang$core$Set$member = F2(
	function (k, _p10) {
		var _p11 = _p10;
		return A2(_elm_lang$core$Dict$member, k, _p11._0);
	});
var _elm_lang$core$Set$isEmpty = function (_p12) {
	var _p13 = _p12;
	return _elm_lang$core$Dict$isEmpty(_p13._0);
};
var _elm_lang$core$Set$Set_elm_builtin = function (a) {
	return {ctor: 'Set_elm_builtin', _0: a};
};
var _elm_lang$core$Set$empty = _elm_lang$core$Set$Set_elm_builtin(_elm_lang$core$Dict$empty);
var _elm_lang$core$Set$singleton = function (k) {
	return _elm_lang$core$Set$Set_elm_builtin(
		A2(
			_elm_lang$core$Dict$singleton,
			k,
			{ctor: '_Tuple0'}));
};
var _elm_lang$core$Set$insert = F2(
	function (k, _p14) {
		var _p15 = _p14;
		return _elm_lang$core$Set$Set_elm_builtin(
			A3(
				_elm_lang$core$Dict$insert,
				k,
				{ctor: '_Tuple0'},
				_p15._0));
	});
var _elm_lang$core$Set$fromList = function (xs) {
	return A3(_elm_lang$core$List$foldl, _elm_lang$core$Set$insert, _elm_lang$core$Set$empty, xs);
};
var _elm_lang$core$Set$map = F2(
	function (f, s) {
		return _elm_lang$core$Set$fromList(
			A2(
				_elm_lang$core$List$map,
				f,
				_elm_lang$core$Set$toList(s)));
	});
var _elm_lang$core$Set$remove = F2(
	function (k, _p16) {
		var _p17 = _p16;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$remove, k, _p17._0));
	});
var _elm_lang$core$Set$union = F2(
	function (_p19, _p18) {
		var _p20 = _p19;
		var _p21 = _p18;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$union, _p20._0, _p21._0));
	});
var _elm_lang$core$Set$intersect = F2(
	function (_p23, _p22) {
		var _p24 = _p23;
		var _p25 = _p22;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$intersect, _p24._0, _p25._0));
	});
var _elm_lang$core$Set$diff = F2(
	function (_p27, _p26) {
		var _p28 = _p27;
		var _p29 = _p26;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(_elm_lang$core$Dict$diff, _p28._0, _p29._0));
	});
var _elm_lang$core$Set$filter = F2(
	function (p, _p30) {
		var _p31 = _p30;
		return _elm_lang$core$Set$Set_elm_builtin(
			A2(
				_elm_lang$core$Dict$filter,
				F2(
					function (k, _p32) {
						return p(k);
					}),
				_p31._0));
	});
var _elm_lang$core$Set$partition = F2(
	function (p, _p33) {
		var _p34 = _p33;
		var _p35 = A2(
			_elm_lang$core$Dict$partition,
			F2(
				function (k, _p36) {
					return p(k);
				}),
			_p34._0);
		var p1 = _p35._0;
		var p2 = _p35._1;
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Set$Set_elm_builtin(p1),
			_1: _elm_lang$core$Set$Set_elm_builtin(p2)
		};
	});

var _elm_lang$dom$Native_Dom = function() {

function on(node)
{
	return function(eventName, decoder, toTask)
	{
		return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {

			function performTask(event)
			{
				var result = A2(_elm_lang$core$Json_Decode$decodeValue, decoder, event);
				if (result.ctor === 'Ok')
				{
					_elm_lang$core$Native_Scheduler.rawSpawn(toTask(result._0));
				}
			}

			node.addEventListener(eventName, performTask);

			return function()
			{
				node.removeEventListener(eventName, performTask);
			};
		});
	};
}

return {
	onDocument: F3(on(document)),
	onWindow: F3(on(window))
};

}();

var _elm_lang$dom$Dom_LowLevel$onWindow = _elm_lang$dom$Native_Dom.onWindow;
var _elm_lang$dom$Dom_LowLevel$onDocument = _elm_lang$dom$Native_Dom.onDocument;

var _elm_lang$navigation$Native_Navigation = function() {

function go(n)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		if (n !== 0)
		{
			history.go(n);
		}
		callback(_elm_lang$core$Native_Scheduler.succeed(_elm_lang$core$Native_Utils.Tuple0));
	});
}

function pushState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.pushState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}

function replaceState(url)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback)
	{
		history.replaceState({}, '', url);
		callback(_elm_lang$core$Native_Scheduler.succeed(getLocation()));
	});
}

function getLocation()
{
	var location = document.location;

	return {
		href: location.href,
		host: location.host,
		hostname: location.hostname,
		protocol: location.protocol,
		origin: location.origin,
		port_: location.port,
		pathname: location.pathname,
		search: location.search,
		hash: location.hash,
		username: location.username,
		password: location.password
	};
}


return {
	go: go,
	pushState: pushState,
	replaceState: replaceState,
	getLocation: getLocation
};

}();

var _elm_lang$navigation$Navigation$replaceState = _elm_lang$navigation$Native_Navigation.replaceState;
var _elm_lang$navigation$Navigation$pushState = _elm_lang$navigation$Native_Navigation.pushState;
var _elm_lang$navigation$Navigation$go = _elm_lang$navigation$Native_Navigation.go;
var _elm_lang$navigation$Navigation$spawnPopState = function (router) {
	return _elm_lang$core$Process$spawn(
		A3(
			_elm_lang$dom$Dom_LowLevel$onWindow,
			'popstate',
			_elm_lang$core$Json_Decode$value,
			function (_p0) {
				return A2(
					_elm_lang$core$Platform$sendToSelf,
					router,
					_elm_lang$navigation$Native_Navigation.getLocation(
						{ctor: '_Tuple0'}));
			}));
};
var _elm_lang$navigation$Navigation_ops = _elm_lang$navigation$Navigation_ops || {};
_elm_lang$navigation$Navigation_ops['&>'] = F2(
	function (task1, task2) {
		return A2(
			_elm_lang$core$Task$andThen,
			task1,
			function (_p1) {
				return task2;
			});
	});
var _elm_lang$navigation$Navigation$notify = F3(
	function (router, subs, location) {
		var send = function (_p2) {
			var _p3 = _p2;
			return A2(
				_elm_lang$core$Platform$sendToApp,
				router,
				_p3._0(location));
		};
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(_elm_lang$core$List$map, send, subs)),
			_elm_lang$core$Task$succeed(
				{ctor: '_Tuple0'}));
	});
var _elm_lang$navigation$Navigation$onSelfMsg = F3(
	function (router, location, state) {
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			A3(_elm_lang$navigation$Navigation$notify, router, state.subs, location),
			_elm_lang$core$Task$succeed(state));
	});
var _elm_lang$navigation$Navigation$cmdHelp = F3(
	function (router, subs, cmd) {
		var _p4 = cmd;
		switch (_p4.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$go(_p4._0);
			case 'New':
				return A2(
					_elm_lang$core$Task$andThen,
					_elm_lang$navigation$Navigation$pushState(_p4._0),
					A2(_elm_lang$navigation$Navigation$notify, router, subs));
			default:
				return A2(
					_elm_lang$core$Task$andThen,
					_elm_lang$navigation$Navigation$replaceState(_p4._0),
					A2(_elm_lang$navigation$Navigation$notify, router, subs));
		}
	});
var _elm_lang$navigation$Navigation$updateHelp = F2(
	function (func, _p5) {
		var _p6 = _p5;
		return {
			ctor: '_Tuple2',
			_0: _p6._0,
			_1: A2(_elm_lang$core$Platform_Cmd$map, func, _p6._1)
		};
	});
var _elm_lang$navigation$Navigation$subscription = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$command = _elm_lang$core$Native_Platform.leaf('Navigation');
var _elm_lang$navigation$Navigation$Location = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {href: a, host: b, hostname: c, protocol: d, origin: e, port_: f, pathname: g, search: h, hash: i, username: j, password: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _elm_lang$navigation$Navigation$State = F2(
	function (a, b) {
		return {subs: a, process: b};
	});
var _elm_lang$navigation$Navigation$init = _elm_lang$core$Task$succeed(
	A2(
		_elm_lang$navigation$Navigation$State,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Maybe$Nothing));
var _elm_lang$navigation$Navigation$onEffects = F4(
	function (router, cmds, subs, _p7) {
		var _p8 = _p7;
		var _p10 = _p8.process;
		var stepState = function () {
			var _p9 = {ctor: '_Tuple2', _0: subs, _1: _p10};
			_v4_2:
			do {
				if (_p9._0.ctor === '[]') {
					if (_p9._1.ctor === 'Just') {
						return A2(
							_elm_lang$navigation$Navigation_ops['&>'],
							_elm_lang$core$Process$kill(_p9._1._0),
							_elm_lang$core$Task$succeed(
								A2(_elm_lang$navigation$Navigation$State, subs, _elm_lang$core$Maybe$Nothing)));
					} else {
						break _v4_2;
					}
				} else {
					if (_p9._1.ctor === 'Nothing') {
						return A2(
							_elm_lang$core$Task$andThen,
							_elm_lang$navigation$Navigation$spawnPopState(router),
							function (pid) {
								return _elm_lang$core$Task$succeed(
									A2(
										_elm_lang$navigation$Navigation$State,
										subs,
										_elm_lang$core$Maybe$Just(pid)));
							});
					} else {
						break _v4_2;
					}
				}
			} while(false);
			return _elm_lang$core$Task$succeed(
				A2(_elm_lang$navigation$Navigation$State, subs, _p10));
		}();
		return A2(
			_elm_lang$navigation$Navigation_ops['&>'],
			_elm_lang$core$Task$sequence(
				A2(
					_elm_lang$core$List$map,
					A2(_elm_lang$navigation$Navigation$cmdHelp, router, subs),
					cmds)),
			stepState);
	});
var _elm_lang$navigation$Navigation$UserMsg = function (a) {
	return {ctor: 'UserMsg', _0: a};
};
var _elm_lang$navigation$Navigation$Change = function (a) {
	return {ctor: 'Change', _0: a};
};
var _elm_lang$navigation$Navigation$Parser = function (a) {
	return {ctor: 'Parser', _0: a};
};
var _elm_lang$navigation$Navigation$makeParser = _elm_lang$navigation$Navigation$Parser;
var _elm_lang$navigation$Navigation$Modify = function (a) {
	return {ctor: 'Modify', _0: a};
};
var _elm_lang$navigation$Navigation$modifyUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Modify(url));
};
var _elm_lang$navigation$Navigation$New = function (a) {
	return {ctor: 'New', _0: a};
};
var _elm_lang$navigation$Navigation$newUrl = function (url) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$New(url));
};
var _elm_lang$navigation$Navigation$Jump = function (a) {
	return {ctor: 'Jump', _0: a};
};
var _elm_lang$navigation$Navigation$back = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(0 - n));
};
var _elm_lang$navigation$Navigation$forward = function (n) {
	return _elm_lang$navigation$Navigation$command(
		_elm_lang$navigation$Navigation$Jump(n));
};
var _elm_lang$navigation$Navigation$cmdMap = F2(
	function (_p11, myCmd) {
		var _p12 = myCmd;
		switch (_p12.ctor) {
			case 'Jump':
				return _elm_lang$navigation$Navigation$Jump(_p12._0);
			case 'New':
				return _elm_lang$navigation$Navigation$New(_p12._0);
			default:
				return _elm_lang$navigation$Navigation$Modify(_p12._0);
		}
	});
var _elm_lang$navigation$Navigation$Monitor = function (a) {
	return {ctor: 'Monitor', _0: a};
};
var _elm_lang$navigation$Navigation$programWithFlags = F2(
	function (_p13, stuff) {
		var _p14 = _p13;
		var _p16 = _p14._0;
		var location = _elm_lang$navigation$Native_Navigation.getLocation(
			{ctor: '_Tuple0'});
		var init = function (flags) {
			return A2(
				_elm_lang$navigation$Navigation$updateHelp,
				_elm_lang$navigation$Navigation$UserMsg,
				A2(
					stuff.init,
					flags,
					_p16(location)));
		};
		var view = function (model) {
			return A2(
				_elm_lang$html$Html_App$map,
				_elm_lang$navigation$Navigation$UserMsg,
				stuff.view(model));
		};
		var subs = function (model) {
			return _elm_lang$core$Platform_Sub$batch(
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$navigation$Navigation$subscription(
						_elm_lang$navigation$Navigation$Monitor(_elm_lang$navigation$Navigation$Change)),
						A2(
						_elm_lang$core$Platform_Sub$map,
						_elm_lang$navigation$Navigation$UserMsg,
						stuff.subscriptions(model))
					]));
		};
		var update = F2(
			function (msg, model) {
				return A2(
					_elm_lang$navigation$Navigation$updateHelp,
					_elm_lang$navigation$Navigation$UserMsg,
					function () {
						var _p15 = msg;
						if (_p15.ctor === 'Change') {
							return A2(
								stuff.urlUpdate,
								_p16(_p15._0),
								model);
						} else {
							return A2(stuff.update, _p15._0, model);
						}
					}());
			});
		return _elm_lang$html$Html_App$programWithFlags(
			{init: init, view: view, update: update, subscriptions: subs});
	});
var _elm_lang$navigation$Navigation$program = F2(
	function (parser, stuff) {
		return A2(
			_elm_lang$navigation$Navigation$programWithFlags,
			parser,
			_elm_lang$core$Native_Utils.update(
				stuff,
				{
					init: function (_p17) {
						return stuff.init;
					}
				}));
	});
var _elm_lang$navigation$Navigation$subMap = F2(
	function (func, _p18) {
		var _p19 = _p18;
		return _elm_lang$navigation$Navigation$Monitor(
			function (_p20) {
				return func(
					_p19._0(_p20));
			});
	});
_elm_lang$core$Native_Platform.effectManagers['Navigation'] = {pkg: 'elm-lang/navigation', init: _elm_lang$navigation$Navigation$init, onEffects: _elm_lang$navigation$Navigation$onEffects, onSelfMsg: _elm_lang$navigation$Navigation$onSelfMsg, tag: 'fx', cmdMap: _elm_lang$navigation$Navigation$cmdMap, subMap: _elm_lang$navigation$Navigation$subMap};

var _evancz$elm_graphics$Native_Element = function()
{


// CREATION

var createNode =
	typeof document === 'undefined'
		?
			function(_)
			{
				return {
					style: {},
					appendChild: function() {}
				};
			}
		:
			function(elementType)
			{
				var node = document.createElement(elementType);
				node.style.padding = '0';
				node.style.margin = '0';
				return node;
			}
		;


function newElement(width, height, elementPrim)
{
	return {
		ctor: 'Element_elm_builtin',
		_0: {
			element: elementPrim,
			props: {
				width: width,
				height: height,
				opacity: 1,
				color: _elm_lang$core$Maybe$Nothing,
				href: '',
				tag: ''
			}
		}
	};
}


// PROPERTIES

function setProps(elem, node)
{
	var props = elem.props;

	var element = elem.element;
	var width = props.width - (element.adjustWidth || 0);
	var height = props.height - (element.adjustHeight || 0);
	node.style.width  = (width | 0) + 'px';
	node.style.height = (height | 0) + 'px';

	if (props.opacity !== 1)
	{
		node.style.opacity = props.opacity;
	}

	if (props.color.ctor === 'Just')
	{
		node.style.backgroundColor = _evancz$elm_graphics$Text$colorToCss(props.color._0);
	}

	if (props.tag !== '')
	{
		node.id = props.tag;
	}

	if (props.href !== '')
	{
		var anchor = createNode('a');
		anchor.href = props.href;
		anchor.style.display = 'block';
		anchor.style.pointerEvents = 'auto';
		anchor.appendChild(node);
		node = anchor;
	}

	return node;
}


// IMAGES

function image(props, img)
{
	switch (img._0.ctor)
	{
		case 'Plain':
			return plainImage(img._3);

		case 'Fitted':
			return fittedImage(props.width, props.height, img._3);

		case 'Cropped':
			return croppedImage(img, props.width, props.height, img._3);

		case 'Tiled':
			return tiledImage(img._3);
	}
}

function plainImage(src)
{
	var img = createNode('img');
	img.src = src;
	img.name = src;
	img.style.display = 'block';
	return img;
}

function tiledImage(src)
{
	var div = createNode('div');
	div.style.backgroundImage = 'url(' + src + ')';
	return div;
}

function fittedImage(w, h, src)
{
	var div = createNode('div');
	div.style.background = 'url(' + src + ') no-repeat center';
	div.style.webkitBackgroundSize = 'cover';
	div.style.MozBackgroundSize = 'cover';
	div.style.OBackgroundSize = 'cover';
	div.style.backgroundSize = 'cover';
	return div;
}

function croppedImage(elem, w, h, src)
{
	var pos = elem._0._0;
	var e = createNode('div');
	e.style.overflow = 'hidden';

	var img = createNode('img');
	img.onload = function() {
		var sw = w / elem._1, sh = h / elem._2;
		img.style.width = ((this.width * sw) | 0) + 'px';
		img.style.height = ((this.height * sh) | 0) + 'px';
		img.style.marginLeft = ((- pos._0 * sw) | 0) + 'px';
		img.style.marginTop = ((- pos._1 * sh) | 0) + 'px';
	};
	img.src = src;
	img.name = src;
	e.appendChild(img);
	return e;
}


// FLOW

function goOut(node)
{
	node.style.position = 'absolute';
	return node;
}
function goDown(node)
{
	return node;
}
function goRight(node)
{
	node.style.styleFloat = 'left';
	node.style.cssFloat = 'left';
	return node;
}

var directionTable = {
	DUp: goDown,
	DDown: goDown,
	DLeft: goRight,
	DRight: goRight,
	DIn: goOut,
	DOut: goOut
};
function needsReversal(dir)
{
	return dir === 'DUp' || dir === 'DLeft' || dir === 'DIn';
}

function flow(dir, elist)
{
	var array = _elm_lang$core$Native_List.toArray(elist);
	var container = createNode('div');
	var goDir = directionTable[dir];
	if (goDir === goOut)
	{
		container.style.pointerEvents = 'none';
	}
	if (needsReversal(dir))
	{
		array.reverse();
	}
	var len = array.length;
	for (var i = 0; i < len; ++i)
	{
		container.appendChild(goDir(render(array[i])));
	}
	return container;
}


// CONTAINER

function toPos(pos)
{
	return pos.ctor === 'Absolute'
		? pos._0 + 'px'
		: (pos._0 * 100) + '%';
}

// must clear right, left, top, bottom, and transform
// before calling this function
function setPos(pos, wrappedElement, e)
{
	var elem = wrappedElement._0;
	var element = elem.element;
	var props = elem.props;
	var w = props.width + (element.adjustWidth ? element.adjustWidth : 0);
	var h = props.height + (element.adjustHeight ? element.adjustHeight : 0);

	e.style.position = 'absolute';
	e.style.margin = 'auto';
	var transform = '';

	switch (pos.horizontal.ctor)
	{
		case 'P':
			e.style.right = toPos(pos.x);
			e.style.removeProperty('left');
			break;

		case 'Z':
			transform = 'translateX(' + ((-w / 2) | 0) + 'px) ';

		case 'N':
			e.style.left = toPos(pos.x);
			e.style.removeProperty('right');
			break;
	}
	switch (pos.vertical.ctor)
	{
		case 'N':
			e.style.bottom = toPos(pos.y);
			e.style.removeProperty('top');
			break;

		case 'Z':
			transform += 'translateY(' + ((-h / 2) | 0) + 'px)';

		case 'P':
			e.style.top = toPos(pos.y);
			e.style.removeProperty('bottom');
			break;
	}
	if (transform !== '')
	{
		addTransform(e.style, transform);
	}
	return e;
}

function addTransform(style, transform)
{
	style.transform       = transform;
	style.msTransform     = transform;
	style.MozTransform    = transform;
	style.webkitTransform = transform;
	style.OTransform      = transform;
}

function container(pos, elem)
{
	var e = render(elem);
	setPos(pos, elem, e);
	var div = createNode('div');
	div.style.position = 'relative';
	div.style.overflow = 'hidden';
	div.appendChild(e);
	return div;
}


function rawHtml(elem)
{
	var html = elem.html;
	var align = elem.align;

	var div = createNode('div');
	div.innerHTML = html;
	div.style.visibility = 'hidden';
	if (align)
	{
		div.style.textAlign = align;
	}
	div.style.visibility = 'visible';
	div.style.pointerEvents = 'auto';
	return div;
}


// TO HTML

function toHtml(element)
{
	return _elm_lang$virtual_dom$Native_VirtualDom.custom(
		_elm_lang$core$Native_List.Nil,
		element,
		implementation
	);
}


// WIDGET IMPLEMENTATION

var implementation = {
	render: render,
	diff: diff
};

function diff(a, b)
{
	var aModel = a.model;
	var bModel = b.model;

	if (aModel === bModel)
	{
		return null;
	}

	return {
		applyPatch: applyPatch,
		data: { a: aModel, b: bModel }
	};
}

function applyPatch(domNode, data)
{
	return updateAndReplace(domNode, data.a, data.b);
}


// RENDER

function render(wrappedElement)
{
	var elem = wrappedElement._0;
	return setProps(elem, makeElement(elem));
}

function makeElement(e)
{
	var elem = e.element;
	switch (elem.ctor)
	{
		case 'Image':
			return image(e.props, elem);

		case 'Flow':
			return flow(elem._0.ctor, elem._1);

		case 'Container':
			return container(elem._0, elem._1);

		case 'Spacer':
			return createNode('div');

		case 'RawHtml':
			return rawHtml(elem);

		case 'Custom':
			return elem.render(elem.model);
	}
}

function updateAndReplace(node, curr, next)
{
	var newNode = update(node, curr, next);
	if (newNode !== node)
	{
		node.parentNode.replaceChild(newNode, node);
	}
	return newNode;
}


// UPDATE

function update(node, wrappedCurrent, wrappedNext)
{
	var curr = wrappedCurrent._0;
	var next = wrappedNext._0;
	var rootNode = node;

	if (curr === next)
	{
		return rootNode;
	}

	if (node.tagName === 'A')
	{
		node = node.firstChild;
	}
	if (curr.element.ctor !== next.element.ctor)
	{
		return render(wrappedNext);
	}
	var nextE = next.element;
	var currE = curr.element;
	switch (nextE.ctor)
	{
		case 'Spacer':
			updateProps(node, curr, next);
			return rootNode;

		case 'RawHtml':
			if(currE.html.valueOf() !== nextE.html.valueOf())
			{
				node.innerHTML = nextE.html;
			}
			updateProps(node, curr, next);
			return rootNode;

		case 'Image':
			if (nextE._0.ctor === 'Plain')
			{
				if (nextE._3 !== currE._3)
				{
					node.src = nextE._3;
				}
			}
			else if (!_elm_lang$core$Native_Utils.eq(nextE, currE)
				|| next.props.width !== curr.props.width
				|| next.props.height !== curr.props.height)
			{
				return render(wrappedNext);
			}
			updateProps(node, curr, next);
			return rootNode;

		case 'Flow':
			var arr = _elm_lang$core$Native_List.toArray(nextE._1);
			for (var i = arr.length; i--; )
			{
				arr[i] = arr[i]._0.element.ctor;
			}
			if (nextE._0.ctor !== currE._0.ctor)
			{
				return render(wrappedNext);
			}
			var nexts = _elm_lang$core$Native_List.toArray(nextE._1);
			var kids = node.childNodes;
			if (nexts.length !== kids.length)
			{
				return render(wrappedNext);
			}
			var currs = _elm_lang$core$Native_List.toArray(currE._1);
			var dir = nextE._0.ctor;
			var goDir = directionTable[dir];
			var toReverse = needsReversal(dir);
			var len = kids.length;
			for (var i = len; i--; )
			{
				var subNode = kids[toReverse ? len - i - 1 : i];
				goDir(updateAndReplace(subNode, currs[i], nexts[i]));
			}
			updateProps(node, curr, next);
			return rootNode;

		case 'Container':
			var subNode = node.firstChild;
			var newSubNode = updateAndReplace(subNode, currE._1, nextE._1);
			setPos(nextE._0, nextE._1, newSubNode);
			updateProps(node, curr, next);
			return rootNode;

		case 'Custom':
			if (currE.type === nextE.type)
			{
				var updatedNode = nextE.update(node, currE.model, nextE.model);
				updateProps(updatedNode, curr, next);
				return updatedNode;
			}
			return render(wrappedNext);
	}
}

function updateProps(node, curr, next)
{
	var nextProps = next.props;
	var currProps = curr.props;

	var element = next.element;
	var width = nextProps.width - (element.adjustWidth || 0);
	var height = nextProps.height - (element.adjustHeight || 0);
	if (width !== currProps.width)
	{
		node.style.width = (width | 0) + 'px';
	}
	if (height !== currProps.height)
	{
		node.style.height = (height | 0) + 'px';
	}

	if (nextProps.opacity !== currProps.opacity)
	{
		node.style.opacity = nextProps.opacity;
	}

	var nextColor = nextProps.color.ctor === 'Just'
		? _evancz$elm_graphics$Text$colorToCss(nextProps.color._0)
		: '';
	if (node.style.backgroundColor !== nextColor)
	{
		node.style.backgroundColor = nextColor;
	}

	if (nextProps.tag !== currProps.tag)
	{
		node.id = nextProps.tag;
	}

	if (nextProps.href !== currProps.href)
	{
		if (currProps.href === '')
		{
			// add a surrounding href
			var anchor = createNode('a');
			anchor.href = nextProps.href;
			anchor.style.display = 'block';
			anchor.style.pointerEvents = 'auto';

			node.parentNode.replaceChild(anchor, node);
			anchor.appendChild(node);
		}
		else if (nextProps.href === '')
		{
			// remove the surrounding href
			var anchor = node.parentNode;
			anchor.parentNode.replaceChild(node, anchor);
		}
		else
		{
			// just update the link
			node.parentNode.href = nextProps.href;
		}
	}
}


// TEXT

function block(align)
{
	return function(text)
	{
		var raw = {
			ctor: 'RawHtml',
			html: _evancz$elm_graphics$Text$toHtmlString(text),
			align: align
		};
		var pos = htmlHeight(0, raw);
		return newElement(pos._0, pos._1, raw);
	};
}

var htmlHeight =
	typeof document !== 'undefined'
		? realHtmlHeight
		: function(a, b) { return _elm_lang$core$Native_Utils.Tuple2(0, 0); };

function realHtmlHeight(width, rawHtml)
{
	// create dummy node
	var temp = document.createElement('div');
	temp.innerHTML = rawHtml.html;
	if (width > 0)
	{
		temp.style.width = width + 'px';
	}
	temp.style.visibility = 'hidden';
	temp.style.styleFloat = 'left';
	temp.style.cssFloat = 'left';

	document.body.appendChild(temp);

	// get dimensions
	var style = window.getComputedStyle(temp, null);
	var w = Math.ceil(style.getPropertyValue('width').slice(0, -2) - 0);
	var h = Math.ceil(style.getPropertyValue('height').slice(0, -2) - 0);
	document.body.removeChild(temp);
	return _elm_lang$core$Native_Utils.Tuple2(w, h);
}


return {
	toHtml: toHtml,

	render: render,
	update: update,
	createNode: createNode,
	newElement: F3(newElement),
	addTransform: addTransform,

	block: block
};

}();


var _evancz$elm_graphics$Text$wrap = F3(
	function (maybeHref, styles, insides) {
		var linkedInsides = function () {
			var _p0 = maybeHref;
			if (_p0.ctor === 'Nothing') {
				return insides;
			} else {
				return A2(
					_elm_lang$core$Basics_ops['++'],
					'<a href=\"',
					A2(
						_elm_lang$core$Basics_ops['++'],
						_p0._0,
						A2(
							_elm_lang$core$Basics_ops['++'],
							'\">',
							A2(_elm_lang$core$Basics_ops['++'], insides, '</a>'))));
			}
		}();
		return _elm_lang$core$Native_Utils.eq(styles, '') ? linkedInsides : A2(
			_elm_lang$core$Basics_ops['++'],
			'<span style=\"',
			A2(
				_elm_lang$core$Basics_ops['++'],
				styles,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'\">',
					A2(_elm_lang$core$Basics_ops['++'], linkedInsides, '</span>'))));
	});
var _evancz$elm_graphics$Text$replace = F3(
	function (from, to, str) {
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_elm_lang$core$Regex$regex(from),
			function (_p1) {
				return to;
			},
			str);
	});
var _evancz$elm_graphics$Text$toHtmlString = function (text) {
	return A3(_evancz$elm_graphics$Text$toHtmlStringHelp, _elm_lang$core$Maybe$Nothing, '', text);
};
var _evancz$elm_graphics$Text$toHtmlStringHelp = F3(
	function (maybeHref, styles, text) {
		toHtmlStringHelp:
		while (true) {
			var _p2 = text;
			switch (_p2.ctor) {
				case 'Str':
					return A3(
						_evancz$elm_graphics$Text$wrap,
						maybeHref,
						styles,
						A2(
							_elm_lang$core$String$join,
							'<br>',
							A2(
								_elm_lang$core$List$map,
								A2(_evancz$elm_graphics$Text$replace, ' ', '&nbsp;'),
								_elm_lang$core$String$lines(
									A3(
										_evancz$elm_graphics$Text$replace,
										'>',
										'&#62;',
										A3(
											_evancz$elm_graphics$Text$replace,
											'<',
											'&#60;',
											A3(
												_evancz$elm_graphics$Text$replace,
												'\'',
												'&#39;',
												A3(_evancz$elm_graphics$Text$replace, '\"', '&#34;', _p2._0))))))));
				case 'Append':
					return A3(
						_evancz$elm_graphics$Text$wrap,
						maybeHref,
						styles,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_evancz$elm_graphics$Text$toHtmlString(_p2._0),
							_evancz$elm_graphics$Text$toHtmlString(_p2._1)));
				case 'Link':
					var _v2 = _elm_lang$core$Maybe$Just(
						A2(_elm_lang$core$Maybe$withDefault, _p2._0, maybeHref)),
						_v3 = styles,
						_v4 = _p2._1;
					maybeHref = _v2;
					styles = _v3;
					text = _v4;
					continue toHtmlStringHelp;
				default:
					var _v5 = maybeHref,
						_v6 = A2(
						_elm_lang$core$Basics_ops['++'],
						styles,
						A2(
							_elm_lang$core$Basics_ops['++'],
							_p2._0,
							A2(
								_elm_lang$core$Basics_ops['++'],
								':',
								A2(_elm_lang$core$Basics_ops['++'], _p2._1, ';')))),
						_v7 = _p2._2;
					maybeHref = _v5;
					styles = _v6;
					text = _v7;
					continue toHtmlStringHelp;
			}
		}
	});
var _evancz$elm_graphics$Text$colorToCss = function (color) {
	var _p3 = _elm_lang$core$Color$toRgb(color);
	var red = _p3.red;
	var green = _p3.green;
	var blue = _p3.blue;
	var alpha = _p3.alpha;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'rgba(',
		A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Basics$toString(red),
			A2(
				_elm_lang$core$Basics_ops['++'],
				', ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(green),
					A2(
						_elm_lang$core$Basics_ops['++'],
						', ',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(blue),
							A2(
								_elm_lang$core$Basics_ops['++'],
								', ',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(alpha),
									')'))))))));
};
var _evancz$elm_graphics$Text$typefacesToString = function (faces) {
	return A2(
		_elm_lang$core$Basics_ops['++'],
		'\'',
		A2(
			_elm_lang$core$Basics_ops['++'],
			A2(_elm_lang$core$String$join, '\', \'', faces),
			'\''));
};
var _evancz$elm_graphics$Text$maybeAdd = F3(
	function (add, maybeValue, text) {
		var _p4 = maybeValue;
		if (_p4.ctor === 'Nothing') {
			return text;
		} else {
			return A2(add, _p4._0, text);
		}
	});
var _evancz$elm_graphics$Text$defaultStyle = {
	typeface: _elm_lang$core$Native_List.fromArray(
		[]),
	height: _elm_lang$core$Maybe$Nothing,
	color: _elm_lang$core$Color$black,
	bold: false,
	italic: false,
	line: _elm_lang$core$Maybe$Nothing
};
var _evancz$elm_graphics$Text$Style = F6(
	function (a, b, c, d, e, f) {
		return {typeface: a, height: b, color: c, bold: d, italic: e, line: f};
	});
var _evancz$elm_graphics$Text$Meta = F3(
	function (a, b, c) {
		return {ctor: 'Meta', _0: a, _1: b, _2: c};
	});
var _evancz$elm_graphics$Text$typeface = F2(
	function (faces, text) {
		var _p5 = faces;
		if (_p5.ctor === '[]') {
			return text;
		} else {
			return A3(
				_evancz$elm_graphics$Text$Meta,
				'font-family',
				_evancz$elm_graphics$Text$typefacesToString(faces),
				text);
		}
	});
var _evancz$elm_graphics$Text$monospace = function (text) {
	return A3(_evancz$elm_graphics$Text$Meta, 'font-family', 'monospace', text);
};
var _evancz$elm_graphics$Text$height = F2(
	function (px, text) {
		return A3(
			_evancz$elm_graphics$Text$Meta,
			'font-size',
			A2(
				_elm_lang$core$Basics_ops['++'],
				_elm_lang$core$Basics$toString(px),
				'px'),
			text);
	});
var _evancz$elm_graphics$Text$color = F2(
	function (color, text) {
		return A3(
			_evancz$elm_graphics$Text$Meta,
			'color',
			_evancz$elm_graphics$Text$colorToCss(color),
			text);
	});
var _evancz$elm_graphics$Text$bold = function (text) {
	return A3(_evancz$elm_graphics$Text$Meta, 'font-weight', 'bold', text);
};
var _evancz$elm_graphics$Text$italic = function (text) {
	return A3(_evancz$elm_graphics$Text$Meta, 'font-style', 'italic', text);
};
var _evancz$elm_graphics$Text$line = F2(
	function (lineTag, text) {
		var decoration = function () {
			var _p6 = lineTag;
			switch (_p6.ctor) {
				case 'Under':
					return 'underline';
				case 'Over':
					return 'overline';
				default:
					return 'line-through';
			}
		}();
		return A3(_evancz$elm_graphics$Text$Meta, 'text-decoration', decoration, text);
	});
var _evancz$elm_graphics$Text$style = F2(
	function (sty, text) {
		return A3(
			_evancz$elm_graphics$Text$maybeAdd,
			_evancz$elm_graphics$Text$height,
			sty.height,
			A3(
				_evancz$elm_graphics$Text$maybeAdd,
				_evancz$elm_graphics$Text$line,
				sty.line,
				(sty.italic ? _evancz$elm_graphics$Text$italic : _elm_lang$core$Basics$identity)(
					(sty.bold ? _evancz$elm_graphics$Text$bold : _elm_lang$core$Basics$identity)(
						A2(
							_evancz$elm_graphics$Text$typeface,
							sty.typeface,
							A2(_evancz$elm_graphics$Text$color, sty.color, text))))));
	});
var _evancz$elm_graphics$Text$Link = F2(
	function (a, b) {
		return {ctor: 'Link', _0: a, _1: b};
	});
var _evancz$elm_graphics$Text$link = _evancz$elm_graphics$Text$Link;
var _evancz$elm_graphics$Text$Append = F2(
	function (a, b) {
		return {ctor: 'Append', _0: a, _1: b};
	});
var _evancz$elm_graphics$Text$append = _evancz$elm_graphics$Text$Append;
var _evancz$elm_graphics$Text$Str = function (a) {
	return {ctor: 'Str', _0: a};
};
var _evancz$elm_graphics$Text$fromString = _evancz$elm_graphics$Text$Str;
var _evancz$elm_graphics$Text$empty = _evancz$elm_graphics$Text$fromString('');
var _evancz$elm_graphics$Text$concat = function (texts) {
	return A3(_elm_lang$core$List$foldr, _evancz$elm_graphics$Text$append, _evancz$elm_graphics$Text$empty, texts);
};
var _evancz$elm_graphics$Text$join = F2(
	function (seperator, texts) {
		return _evancz$elm_graphics$Text$concat(
			A2(_elm_lang$core$List$intersperse, seperator, texts));
	});
var _evancz$elm_graphics$Text$Through = {ctor: 'Through'};
var _evancz$elm_graphics$Text$Over = {ctor: 'Over'};
var _evancz$elm_graphics$Text$Under = {ctor: 'Under'};

var _evancz$elm_graphics$Element$justified = _evancz$elm_graphics$Native_Element.block('justify');
var _evancz$elm_graphics$Element$centered = _evancz$elm_graphics$Native_Element.block('center');
var _evancz$elm_graphics$Element$rightAligned = _evancz$elm_graphics$Native_Element.block('right');
var _evancz$elm_graphics$Element$leftAligned = _evancz$elm_graphics$Native_Element.block('left');
var _evancz$elm_graphics$Element$show = function (value) {
	return _evancz$elm_graphics$Element$leftAligned(
		_evancz$elm_graphics$Text$monospace(
			_evancz$elm_graphics$Text$fromString(
				_elm_lang$core$Basics$toString(value))));
};
var _evancz$elm_graphics$Element$newElement = _evancz$elm_graphics$Native_Element.newElement;
var _evancz$elm_graphics$Element$sizeOf = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1._0;
	return {ctor: '_Tuple2', _0: _p2.props.width, _1: _p2.props.height};
};
var _evancz$elm_graphics$Element$heightOf = function (_p3) {
	var _p4 = _p3;
	return _p4._0.props.height;
};
var _evancz$elm_graphics$Element$widthOf = function (_p5) {
	var _p6 = _p5;
	return _p6._0.props.width;
};
var _evancz$elm_graphics$Element$toHtml = _evancz$elm_graphics$Native_Element.toHtml;
var _evancz$elm_graphics$Element$Properties = F6(
	function (a, b, c, d, e, f) {
		return {width: a, height: b, opacity: c, color: d, href: e, tag: f};
	});
var _evancz$elm_graphics$Element$RawPosition = F4(
	function (a, b, c, d) {
		return {horizontal: a, vertical: b, x: c, y: d};
	});
var _evancz$elm_graphics$Element$Element_elm_builtin = function (a) {
	return {ctor: 'Element_elm_builtin', _0: a};
};
var _evancz$elm_graphics$Element$width = F2(
	function (newWidth, _p7) {
		var _p8 = _p7;
		var _p11 = _p8._0.props;
		var _p10 = _p8._0.element;
		var newHeight = function () {
			var _p9 = _p10;
			switch (_p9.ctor) {
				case 'Image':
					return _elm_lang$core$Basics$round(
						(_elm_lang$core$Basics$toFloat(_p9._2) / _elm_lang$core$Basics$toFloat(_p9._1)) * _elm_lang$core$Basics$toFloat(newWidth));
				case 'RawHtml':
					return _elm_lang$core$Basics$snd(
						A2(_evancz$elm_graphics$Native_Element.htmlHeight, newWidth, _p10));
				default:
					return _p11.height;
			}
		}();
		return _evancz$elm_graphics$Element$Element_elm_builtin(
			{
				element: _p10,
				props: _elm_lang$core$Native_Utils.update(
					_p11,
					{width: newWidth, height: newHeight})
			});
	});
var _evancz$elm_graphics$Element$height = F2(
	function (newHeight, _p12) {
		var _p13 = _p12;
		return _evancz$elm_graphics$Element$Element_elm_builtin(
			{
				element: _p13._0.element,
				props: _elm_lang$core$Native_Utils.update(
					_p13._0.props,
					{height: newHeight})
			});
	});
var _evancz$elm_graphics$Element$size = F3(
	function (w, h, e) {
		return A2(
			_evancz$elm_graphics$Element$height,
			h,
			A2(_evancz$elm_graphics$Element$width, w, e));
	});
var _evancz$elm_graphics$Element$opacity = F2(
	function (givenOpacity, _p14) {
		var _p15 = _p14;
		return _evancz$elm_graphics$Element$Element_elm_builtin(
			{
				element: _p15._0.element,
				props: _elm_lang$core$Native_Utils.update(
					_p15._0.props,
					{opacity: givenOpacity})
			});
	});
var _evancz$elm_graphics$Element$color = F2(
	function (clr, _p16) {
		var _p17 = _p16;
		return _evancz$elm_graphics$Element$Element_elm_builtin(
			{
				element: _p17._0.element,
				props: _elm_lang$core$Native_Utils.update(
					_p17._0.props,
					{
						color: _elm_lang$core$Maybe$Just(clr)
					})
			});
	});
var _evancz$elm_graphics$Element$tag = F2(
	function (name, _p18) {
		var _p19 = _p18;
		return _evancz$elm_graphics$Element$Element_elm_builtin(
			{
				element: _p19._0.element,
				props: _elm_lang$core$Native_Utils.update(
					_p19._0.props,
					{tag: name})
			});
	});
var _evancz$elm_graphics$Element$link = F2(
	function (href, _p20) {
		var _p21 = _p20;
		return _evancz$elm_graphics$Element$Element_elm_builtin(
			{
				element: _p21._0.element,
				props: _elm_lang$core$Native_Utils.update(
					_p21._0.props,
					{href: href})
			});
	});
var _evancz$elm_graphics$Element$Custom = {ctor: 'Custom'};
var _evancz$elm_graphics$Element$RawHtml = {ctor: 'RawHtml'};
var _evancz$elm_graphics$Element$Spacer = {ctor: 'Spacer'};
var _evancz$elm_graphics$Element$spacer = F2(
	function (w, h) {
		return A3(_evancz$elm_graphics$Element$newElement, w, h, _evancz$elm_graphics$Element$Spacer);
	});
var _evancz$elm_graphics$Element$empty = A2(_evancz$elm_graphics$Element$spacer, 0, 0);
var _evancz$elm_graphics$Element$Flow = F2(
	function (a, b) {
		return {ctor: 'Flow', _0: a, _1: b};
	});
var _evancz$elm_graphics$Element$flow = F2(
	function (dir, es) {
		var newFlow = F2(
			function (w, h) {
				return A3(
					_evancz$elm_graphics$Element$newElement,
					w,
					h,
					A2(_evancz$elm_graphics$Element$Flow, dir, es));
			});
		var maxOrZero = function (list) {
			return A2(
				_elm_lang$core$Maybe$withDefault,
				0,
				_elm_lang$core$List$maximum(list));
		};
		var hs = A2(_elm_lang$core$List$map, _evancz$elm_graphics$Element$heightOf, es);
		var ws = A2(_elm_lang$core$List$map, _evancz$elm_graphics$Element$widthOf, es);
		if (_elm_lang$core$Native_Utils.eq(
			es,
			_elm_lang$core$Native_List.fromArray(
				[]))) {
			return _evancz$elm_graphics$Element$empty;
		} else {
			var _p22 = dir;
			switch (_p22.ctor) {
				case 'DUp':
					return A2(
						newFlow,
						maxOrZero(ws),
						_elm_lang$core$List$sum(hs));
				case 'DDown':
					return A2(
						newFlow,
						maxOrZero(ws),
						_elm_lang$core$List$sum(hs));
				case 'DLeft':
					return A2(
						newFlow,
						_elm_lang$core$List$sum(ws),
						maxOrZero(hs));
				case 'DRight':
					return A2(
						newFlow,
						_elm_lang$core$List$sum(ws),
						maxOrZero(hs));
				case 'DIn':
					return A2(
						newFlow,
						maxOrZero(ws),
						maxOrZero(hs));
				default:
					return A2(
						newFlow,
						maxOrZero(ws),
						maxOrZero(hs));
			}
		}
	});
var _evancz$elm_graphics$Element$Container = F2(
	function (a, b) {
		return {ctor: 'Container', _0: a, _1: b};
	});
var _evancz$elm_graphics$Element$container = F4(
	function (w, h, _p23, e) {
		var _p24 = _p23;
		return A3(
			_evancz$elm_graphics$Element$newElement,
			w,
			h,
			A2(_evancz$elm_graphics$Element$Container, _p24._0, e));
	});
var _evancz$elm_graphics$Element$Image = F4(
	function (a, b, c, d) {
		return {ctor: 'Image', _0: a, _1: b, _2: c, _3: d};
	});
var _evancz$elm_graphics$Element$Tiled = {ctor: 'Tiled'};
var _evancz$elm_graphics$Element$tiledImage = F3(
	function (w, h, src) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			w,
			h,
			A4(_evancz$elm_graphics$Element$Image, _evancz$elm_graphics$Element$Tiled, w, h, src));
	});
var _evancz$elm_graphics$Element$Cropped = function (a) {
	return {ctor: 'Cropped', _0: a};
};
var _evancz$elm_graphics$Element$croppedImage = F4(
	function (pos, w, h, src) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			w,
			h,
			A4(
				_evancz$elm_graphics$Element$Image,
				_evancz$elm_graphics$Element$Cropped(pos),
				w,
				h,
				src));
	});
var _evancz$elm_graphics$Element$Fitted = {ctor: 'Fitted'};
var _evancz$elm_graphics$Element$fittedImage = F3(
	function (w, h, src) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			w,
			h,
			A4(_evancz$elm_graphics$Element$Image, _evancz$elm_graphics$Element$Fitted, w, h, src));
	});
var _evancz$elm_graphics$Element$Plain = {ctor: 'Plain'};
var _evancz$elm_graphics$Element$image = F3(
	function (w, h, src) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			w,
			h,
			A4(_evancz$elm_graphics$Element$Image, _evancz$elm_graphics$Element$Plain, w, h, src));
	});
var _evancz$elm_graphics$Element$N = {ctor: 'N'};
var _evancz$elm_graphics$Element$Z = {ctor: 'Z'};
var _evancz$elm_graphics$Element$P = {ctor: 'P'};
var _evancz$elm_graphics$Element$Relative = function (a) {
	return {ctor: 'Relative', _0: a};
};
var _evancz$elm_graphics$Element$relative = _evancz$elm_graphics$Element$Relative;
var _evancz$elm_graphics$Element$Absolute = function (a) {
	return {ctor: 'Absolute', _0: a};
};
var _evancz$elm_graphics$Element$absolute = _evancz$elm_graphics$Element$Absolute;
var _evancz$elm_graphics$Element$Position = function (a) {
	return {ctor: 'Position', _0: a};
};
var _evancz$elm_graphics$Element$middle = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$Z,
		vertical: _evancz$elm_graphics$Element$Z,
		x: _evancz$elm_graphics$Element$Relative(0.5),
		y: _evancz$elm_graphics$Element$Relative(0.5)
	});
var _evancz$elm_graphics$Element$topLeft = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$N,
		vertical: _evancz$elm_graphics$Element$P,
		x: _evancz$elm_graphics$Element$Absolute(0),
		y: _evancz$elm_graphics$Element$Absolute(0)
	});
var _evancz$elm_graphics$Element$topRight = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$P,
		vertical: _evancz$elm_graphics$Element$P,
		x: _evancz$elm_graphics$Element$Absolute(0),
		y: _evancz$elm_graphics$Element$Absolute(0)
	});
var _evancz$elm_graphics$Element$bottomLeft = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$N,
		vertical: _evancz$elm_graphics$Element$N,
		x: _evancz$elm_graphics$Element$Absolute(0),
		y: _evancz$elm_graphics$Element$Absolute(0)
	});
var _evancz$elm_graphics$Element$bottomRight = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$P,
		vertical: _evancz$elm_graphics$Element$N,
		x: _evancz$elm_graphics$Element$Absolute(0),
		y: _evancz$elm_graphics$Element$Absolute(0)
	});
var _evancz$elm_graphics$Element$midLeft = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$N,
		vertical: _evancz$elm_graphics$Element$Z,
		x: _evancz$elm_graphics$Element$Absolute(0),
		y: _evancz$elm_graphics$Element$Relative(0.5)
	});
var _evancz$elm_graphics$Element$midRight = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$P,
		vertical: _evancz$elm_graphics$Element$Z,
		x: _evancz$elm_graphics$Element$Absolute(0),
		y: _evancz$elm_graphics$Element$Relative(0.5)
	});
var _evancz$elm_graphics$Element$midTop = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$Z,
		vertical: _evancz$elm_graphics$Element$P,
		x: _evancz$elm_graphics$Element$Relative(0.5),
		y: _evancz$elm_graphics$Element$Absolute(0)
	});
var _evancz$elm_graphics$Element$midBottom = _evancz$elm_graphics$Element$Position(
	{
		horizontal: _evancz$elm_graphics$Element$Z,
		vertical: _evancz$elm_graphics$Element$N,
		x: _evancz$elm_graphics$Element$Relative(0.5),
		y: _evancz$elm_graphics$Element$Absolute(0)
	});
var _evancz$elm_graphics$Element$middleAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$Z, vertical: _evancz$elm_graphics$Element$Z, x: x, y: y});
	});
var _evancz$elm_graphics$Element$topLeftAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$N, vertical: _evancz$elm_graphics$Element$P, x: x, y: y});
	});
var _evancz$elm_graphics$Element$topRightAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$P, vertical: _evancz$elm_graphics$Element$P, x: x, y: y});
	});
var _evancz$elm_graphics$Element$bottomLeftAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$N, vertical: _evancz$elm_graphics$Element$N, x: x, y: y});
	});
var _evancz$elm_graphics$Element$bottomRightAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$P, vertical: _evancz$elm_graphics$Element$N, x: x, y: y});
	});
var _evancz$elm_graphics$Element$midLeftAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$N, vertical: _evancz$elm_graphics$Element$Z, x: x, y: y});
	});
var _evancz$elm_graphics$Element$midRightAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$P, vertical: _evancz$elm_graphics$Element$Z, x: x, y: y});
	});
var _evancz$elm_graphics$Element$midTopAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$Z, vertical: _evancz$elm_graphics$Element$P, x: x, y: y});
	});
var _evancz$elm_graphics$Element$midBottomAt = F2(
	function (x, y) {
		return _evancz$elm_graphics$Element$Position(
			{horizontal: _evancz$elm_graphics$Element$Z, vertical: _evancz$elm_graphics$Element$N, x: x, y: y});
	});
var _evancz$elm_graphics$Element$DOut = {ctor: 'DOut'};
var _evancz$elm_graphics$Element$layers = function (es) {
	var hs = A2(_elm_lang$core$List$map, _evancz$elm_graphics$Element$heightOf, es);
	var ws = A2(_elm_lang$core$List$map, _evancz$elm_graphics$Element$widthOf, es);
	return A3(
		_evancz$elm_graphics$Element$newElement,
		A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			_elm_lang$core$List$maximum(ws)),
		A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			_elm_lang$core$List$maximum(hs)),
		A2(_evancz$elm_graphics$Element$Flow, _evancz$elm_graphics$Element$DOut, es));
};
var _evancz$elm_graphics$Element$outward = _evancz$elm_graphics$Element$DOut;
var _evancz$elm_graphics$Element$DIn = {ctor: 'DIn'};
var _evancz$elm_graphics$Element$inward = _evancz$elm_graphics$Element$DIn;
var _evancz$elm_graphics$Element$DRight = {ctor: 'DRight'};
var _evancz$elm_graphics$Element$right = _evancz$elm_graphics$Element$DRight;
var _evancz$elm_graphics$Element$beside = F2(
	function (lft, rht) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			_evancz$elm_graphics$Element$widthOf(lft) + _evancz$elm_graphics$Element$widthOf(rht),
			A2(
				_elm_lang$core$Basics$max,
				_evancz$elm_graphics$Element$heightOf(lft),
				_evancz$elm_graphics$Element$heightOf(rht)),
			A2(
				_evancz$elm_graphics$Element$Flow,
				_evancz$elm_graphics$Element$right,
				_elm_lang$core$Native_List.fromArray(
					[lft, rht])));
	});
var _evancz$elm_graphics$Element$DLeft = {ctor: 'DLeft'};
var _evancz$elm_graphics$Element$left = _evancz$elm_graphics$Element$DLeft;
var _evancz$elm_graphics$Element$DDown = {ctor: 'DDown'};
var _evancz$elm_graphics$Element$above = F2(
	function (hi, lo) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			A2(
				_elm_lang$core$Basics$max,
				_evancz$elm_graphics$Element$widthOf(hi),
				_evancz$elm_graphics$Element$widthOf(lo)),
			_evancz$elm_graphics$Element$heightOf(hi) + _evancz$elm_graphics$Element$heightOf(lo),
			A2(
				_evancz$elm_graphics$Element$Flow,
				_evancz$elm_graphics$Element$DDown,
				_elm_lang$core$Native_List.fromArray(
					[hi, lo])));
	});
var _evancz$elm_graphics$Element$below = F2(
	function (lo, hi) {
		return A3(
			_evancz$elm_graphics$Element$newElement,
			A2(
				_elm_lang$core$Basics$max,
				_evancz$elm_graphics$Element$widthOf(hi),
				_evancz$elm_graphics$Element$widthOf(lo)),
			_evancz$elm_graphics$Element$heightOf(hi) + _evancz$elm_graphics$Element$heightOf(lo),
			A2(
				_evancz$elm_graphics$Element$Flow,
				_evancz$elm_graphics$Element$DDown,
				_elm_lang$core$Native_List.fromArray(
					[hi, lo])));
	});
var _evancz$elm_graphics$Element$down = _evancz$elm_graphics$Element$DDown;
var _evancz$elm_graphics$Element$DUp = {ctor: 'DUp'};
var _evancz$elm_graphics$Element$up = _evancz$elm_graphics$Element$DUp;

//import Dict, List, Maybe, Native.Scheduler //

var _evancz$elm_http$Native_Http = function() {

function send(settings, request)
{
	return _elm_lang$core$Native_Scheduler.nativeBinding(function(callback) {
		var req = new XMLHttpRequest();

		// start
		if (settings.onStart.ctor === 'Just')
		{
			req.addEventListener('loadStart', function() {
				var task = settings.onStart._0;
				_elm_lang$core$Native_Scheduler.rawSpawn(task);
			});
		}

		// progress
		if (settings.onProgress.ctor === 'Just')
		{
			req.addEventListener('progress', function(event) {
				var progress = !event.lengthComputable
					? _elm_lang$core$Maybe$Nothing
					: _elm_lang$core$Maybe$Just({
						loaded: event.loaded,
						total: event.total
					});
				var task = settings.onProgress._0(progress);
				_elm_lang$core$Native_Scheduler.rawSpawn(task);
			});
		}

		// end
		req.addEventListener('error', function() {
			return callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'RawNetworkError' }));
		});

		req.addEventListener('timeout', function() {
			return callback(_elm_lang$core$Native_Scheduler.fail({ ctor: 'RawTimeout' }));
		});

		req.addEventListener('load', function() {
			return callback(_elm_lang$core$Native_Scheduler.succeed(toResponse(req)));
		});

		req.open(request.verb, request.url, true);

		// set all the headers
		function setHeader(pair) {
			req.setRequestHeader(pair._0, pair._1);
		}
		A2(_elm_lang$core$List$map, setHeader, request.headers);

		// set the timeout
		req.timeout = settings.timeout;

		// enable this withCredentials thing
		req.withCredentials = settings.withCredentials;

		// ask for a specific MIME type for the response
		if (settings.desiredResponseType.ctor === 'Just')
		{
			req.overrideMimeType(settings.desiredResponseType._0);
		}

		// actuall send the request
		if(request.body.ctor === "BodyFormData")
		{
			req.send(request.body.formData)
		}
		else
		{
			req.send(request.body._0);
		}

		return function() {
			req.abort();
		};
	});
}


// deal with responses

function toResponse(req)
{
	var tag = req.responseType === 'blob' ? 'Blob' : 'Text'
	var response = tag === 'Blob' ? req.response : req.responseText;
	return {
		status: req.status,
		statusText: req.statusText,
		headers: parseHeaders(req.getAllResponseHeaders()),
		url: req.responseURL,
		value: { ctor: tag, _0: response }
	};
}


function parseHeaders(rawHeaders)
{
	var headers = _elm_lang$core$Dict$empty;

	if (!rawHeaders)
	{
		return headers;
	}

	var headerPairs = rawHeaders.split('\u000d\u000a');
	for (var i = headerPairs.length; i--; )
	{
		var headerPair = headerPairs[i];
		var index = headerPair.indexOf('\u003a\u0020');
		if (index > 0)
		{
			var key = headerPair.substring(0, index);
			var value = headerPair.substring(index + 2);

			headers = A3(_elm_lang$core$Dict$update, key, function(oldValue) {
				if (oldValue.ctor === 'Just')
				{
					return _elm_lang$core$Maybe$Just(value + ', ' + oldValue._0);
				}
				return _elm_lang$core$Maybe$Just(value);
			}, headers);
		}
	}

	return headers;
}


function multipart(dataList)
{
	var formData = new FormData();

	while (dataList.ctor !== '[]')
	{
		var data = dataList._0;
		if (data.ctor === 'StringData')
		{
			formData.append(data._0, data._1);
		}
		else
		{
			var fileName = data._1.ctor === 'Nothing'
				? undefined
				: data._1._0;
			formData.append(data._0, data._2, fileName);
		}
		dataList = dataList._1;
	}

	return { ctor: 'BodyFormData', formData: formData };
}


function uriEncode(string)
{
	return encodeURIComponent(string);
}

function uriDecode(string)
{
	return decodeURIComponent(string);
}

return {
	send: F2(send),
	multipart: multipart,
	uriEncode: uriEncode,
	uriDecode: uriDecode
};

}();

var _evancz$elm_http$Http$send = _evancz$elm_http$Native_Http.send;
var _evancz$elm_http$Http$defaultSettings = {timeout: 0, onStart: _elm_lang$core$Maybe$Nothing, onProgress: _elm_lang$core$Maybe$Nothing, desiredResponseType: _elm_lang$core$Maybe$Nothing, withCredentials: false};
var _evancz$elm_http$Http$multipart = _evancz$elm_http$Native_Http.multipart;
var _evancz$elm_http$Http$uriDecode = _evancz$elm_http$Native_Http.uriDecode;
var _evancz$elm_http$Http$uriEncode = _evancz$elm_http$Native_Http.uriEncode;
var _evancz$elm_http$Http$queryEscape = function (string) {
	return A2(
		_elm_lang$core$String$join,
		'+',
		A2(
			_elm_lang$core$String$split,
			'%20',
			_evancz$elm_http$Http$uriEncode(string)));
};
var _evancz$elm_http$Http$queryPair = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$core$Basics_ops['++'],
		_evancz$elm_http$Http$queryEscape(_p1._0),
		A2(
			_elm_lang$core$Basics_ops['++'],
			'=',
			_evancz$elm_http$Http$queryEscape(_p1._1)));
};
var _evancz$elm_http$Http$url = F2(
	function (baseUrl, args) {
		var _p2 = args;
		if (_p2.ctor === '[]') {
			return baseUrl;
		} else {
			return A2(
				_elm_lang$core$Basics_ops['++'],
				baseUrl,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'?',
					A2(
						_elm_lang$core$String$join,
						'&',
						A2(_elm_lang$core$List$map, _evancz$elm_http$Http$queryPair, args))));
		}
	});
var _evancz$elm_http$Http$Request = F4(
	function (a, b, c, d) {
		return {verb: a, headers: b, url: c, body: d};
	});
var _evancz$elm_http$Http$Settings = F5(
	function (a, b, c, d, e) {
		return {timeout: a, onStart: b, onProgress: c, desiredResponseType: d, withCredentials: e};
	});
var _evancz$elm_http$Http$Response = F5(
	function (a, b, c, d, e) {
		return {status: a, statusText: b, headers: c, url: d, value: e};
	});
var _evancz$elm_http$Http$TODO_implement_blob_in_another_library = {ctor: 'TODO_implement_blob_in_another_library'};
var _evancz$elm_http$Http$TODO_implement_file_in_another_library = {ctor: 'TODO_implement_file_in_another_library'};
var _evancz$elm_http$Http$BodyBlob = function (a) {
	return {ctor: 'BodyBlob', _0: a};
};
var _evancz$elm_http$Http$BodyFormData = {ctor: 'BodyFormData'};
var _evancz$elm_http$Http$ArrayBuffer = {ctor: 'ArrayBuffer'};
var _evancz$elm_http$Http$BodyString = function (a) {
	return {ctor: 'BodyString', _0: a};
};
var _evancz$elm_http$Http$string = _evancz$elm_http$Http$BodyString;
var _evancz$elm_http$Http$Empty = {ctor: 'Empty'};
var _evancz$elm_http$Http$empty = _evancz$elm_http$Http$Empty;
var _evancz$elm_http$Http$FileData = F3(
	function (a, b, c) {
		return {ctor: 'FileData', _0: a, _1: b, _2: c};
	});
var _evancz$elm_http$Http$BlobData = F3(
	function (a, b, c) {
		return {ctor: 'BlobData', _0: a, _1: b, _2: c};
	});
var _evancz$elm_http$Http$blobData = _evancz$elm_http$Http$BlobData;
var _evancz$elm_http$Http$StringData = F2(
	function (a, b) {
		return {ctor: 'StringData', _0: a, _1: b};
	});
var _evancz$elm_http$Http$stringData = _evancz$elm_http$Http$StringData;
var _evancz$elm_http$Http$Blob = function (a) {
	return {ctor: 'Blob', _0: a};
};
var _evancz$elm_http$Http$Text = function (a) {
	return {ctor: 'Text', _0: a};
};
var _evancz$elm_http$Http$RawNetworkError = {ctor: 'RawNetworkError'};
var _evancz$elm_http$Http$RawTimeout = {ctor: 'RawTimeout'};
var _evancz$elm_http$Http$BadResponse = F2(
	function (a, b) {
		return {ctor: 'BadResponse', _0: a, _1: b};
	});
var _evancz$elm_http$Http$UnexpectedPayload = function (a) {
	return {ctor: 'UnexpectedPayload', _0: a};
};
var _evancz$elm_http$Http$handleResponse = F2(
	function (handle, response) {
		if ((_elm_lang$core$Native_Utils.cmp(200, response.status) < 1) && (_elm_lang$core$Native_Utils.cmp(response.status, 300) < 0)) {
			var _p3 = response.value;
			if (_p3.ctor === 'Text') {
				return handle(_p3._0);
			} else {
				return _elm_lang$core$Task$fail(
					_evancz$elm_http$Http$UnexpectedPayload('Response body is a blob, expecting a string.'));
			}
		} else {
			return _elm_lang$core$Task$fail(
				A2(_evancz$elm_http$Http$BadResponse, response.status, response.statusText));
		}
	});
var _evancz$elm_http$Http$NetworkError = {ctor: 'NetworkError'};
var _evancz$elm_http$Http$Timeout = {ctor: 'Timeout'};
var _evancz$elm_http$Http$promoteError = function (rawError) {
	var _p4 = rawError;
	if (_p4.ctor === 'RawTimeout') {
		return _evancz$elm_http$Http$Timeout;
	} else {
		return _evancz$elm_http$Http$NetworkError;
	}
};
var _evancz$elm_http$Http$getString = function (url) {
	var request = {
		verb: 'GET',
		headers: _elm_lang$core$Native_List.fromArray(
			[]),
		url: url,
		body: _evancz$elm_http$Http$empty
	};
	return A2(
		_elm_lang$core$Task$andThen,
		A2(
			_elm_lang$core$Task$mapError,
			_evancz$elm_http$Http$promoteError,
			A2(_evancz$elm_http$Http$send, _evancz$elm_http$Http$defaultSettings, request)),
		_evancz$elm_http$Http$handleResponse(_elm_lang$core$Task$succeed));
};
var _evancz$elm_http$Http$fromJson = F2(
	function (decoder, response) {
		var decode = function (str) {
			var _p5 = A2(_elm_lang$core$Json_Decode$decodeString, decoder, str);
			if (_p5.ctor === 'Ok') {
				return _elm_lang$core$Task$succeed(_p5._0);
			} else {
				return _elm_lang$core$Task$fail(
					_evancz$elm_http$Http$UnexpectedPayload(_p5._0));
			}
		};
		return A2(
			_elm_lang$core$Task$andThen,
			A2(_elm_lang$core$Task$mapError, _evancz$elm_http$Http$promoteError, response),
			_evancz$elm_http$Http$handleResponse(decode));
	});
var _evancz$elm_http$Http$get = F2(
	function (decoder, url) {
		var request = {
			verb: 'GET',
			headers: _elm_lang$core$Native_List.fromArray(
				[]),
			url: url,
			body: _evancz$elm_http$Http$empty
		};
		return A2(
			_evancz$elm_http$Http$fromJson,
			decoder,
			A2(_evancz$elm_http$Http$send, _evancz$elm_http$Http$defaultSettings, request));
	});
var _evancz$elm_http$Http$post = F3(
	function (decoder, url, body) {
		var request = {
			verb: 'POST',
			headers: _elm_lang$core$Native_List.fromArray(
				[]),
			url: url,
			body: body
		};
		return A2(
			_evancz$elm_http$Http$fromJson,
			decoder,
			A2(_evancz$elm_http$Http$send, _evancz$elm_http$Http$defaultSettings, request));
	});

var _evancz$focus$Focus$update = F3(
	function (_p0, f, big) {
		var _p1 = _p0;
		return A2(_p1._0.update, f, big);
	});
var _evancz$focus$Focus$set = F3(
	function (_p2, small, big) {
		var _p3 = _p2;
		return A2(
			_p3._0.update,
			_elm_lang$core$Basics$always(small),
			big);
	});
var _evancz$focus$Focus$get = F2(
	function (_p4, big) {
		var _p5 = _p4;
		return _p5._0.get(big);
	});
var _evancz$focus$Focus$Focus = function (a) {
	return {ctor: 'Focus', _0: a};
};
var _evancz$focus$Focus$create = F2(
	function (get, update) {
		return _evancz$focus$Focus$Focus(
			{get: get, update: update});
	});
var _evancz$focus$Focus_ops = _evancz$focus$Focus_ops || {};
_evancz$focus$Focus_ops['=>'] = F2(
	function (_p7, _p6) {
		var _p8 = _p7;
		var _p11 = _p8._0;
		var _p9 = _p6;
		var _p10 = _p9._0;
		var update = F2(
			function (f, big) {
				return A2(
					_p11.update,
					_p10.update(f),
					big);
			});
		var get = function (big) {
			return _p10.get(
				_p11.get(big));
		};
		return _evancz$focus$Focus$Focus(
			{get: get, update: update});
	});

var _mgold$elm_date_format$Date_Format$padWith = function (c) {
	return function (_p0) {
		return A3(
			_elm_lang$core$String$padLeft,
			2,
			c,
			_elm_lang$core$Basics$toString(_p0));
	};
};
var _mgold$elm_date_format$Date_Format$zero2twelve = function (n) {
	return _elm_lang$core$Native_Utils.eq(n, 0) ? 12 : n;
};
var _mgold$elm_date_format$Date_Format$mod12 = function (h) {
	return A2(_elm_lang$core$Basics_ops['%'], h, 12);
};
var _mgold$elm_date_format$Date_Format$fullDayOfWeek = function (dow) {
	var _p1 = dow;
	switch (_p1.ctor) {
		case 'Mon':
			return 'Monday';
		case 'Tue':
			return 'Tuesday';
		case 'Wed':
			return 'Wednesday';
		case 'Thu':
			return 'Thursday';
		case 'Fri':
			return 'Friday';
		case 'Sat':
			return 'Saturday';
		default:
			return 'Sunday';
	}
};
var _mgold$elm_date_format$Date_Format$monthToFullName = function (m) {
	var _p2 = m;
	switch (_p2.ctor) {
		case 'Jan':
			return 'January';
		case 'Feb':
			return 'February';
		case 'Mar':
			return 'March';
		case 'Apr':
			return 'April';
		case 'May':
			return 'May';
		case 'Jun':
			return 'June';
		case 'Jul':
			return 'July';
		case 'Aug':
			return 'August';
		case 'Sep':
			return 'September';
		case 'Oct':
			return 'October';
		case 'Nov':
			return 'November';
		default:
			return 'December';
	}
};
var _mgold$elm_date_format$Date_Format$monthToInt = function (m) {
	var _p3 = m;
	switch (_p3.ctor) {
		case 'Jan':
			return 1;
		case 'Feb':
			return 2;
		case 'Mar':
			return 3;
		case 'Apr':
			return 4;
		case 'May':
			return 5;
		case 'Jun':
			return 6;
		case 'Jul':
			return 7;
		case 'Aug':
			return 8;
		case 'Sep':
			return 9;
		case 'Oct':
			return 10;
		case 'Nov':
			return 11;
		default:
			return 12;
	}
};
var _mgold$elm_date_format$Date_Format$formatToken = F2(
	function (d, m) {
		var symbol = function () {
			var _p4 = m.submatches;
			if (((_p4.ctor === '::') && (_p4._0.ctor === 'Just')) && (_p4._1.ctor === '[]')) {
				return _p4._0._0;
			} else {
				return ' ';
			}
		}();
		var _p5 = symbol;
		switch (_p5) {
			case '%':
				return '%';
			case 'Y':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$year(d));
			case 'm':
				return A3(
					_elm_lang$core$String$padLeft,
					2,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Basics$toString(
						_mgold$elm_date_format$Date_Format$monthToInt(
							_elm_lang$core$Date$month(d))));
			case 'B':
				return _mgold$elm_date_format$Date_Format$monthToFullName(
					_elm_lang$core$Date$month(d));
			case 'b':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$month(d));
			case 'd':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$day(d));
			case 'e':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_elm_lang$core$Date$day(d));
			case 'a':
				return _elm_lang$core$Basics$toString(
					_elm_lang$core$Date$dayOfWeek(d));
			case 'A':
				return _mgold$elm_date_format$Date_Format$fullDayOfWeek(
					_elm_lang$core$Date$dayOfWeek(d));
			case 'H':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$hour(d));
			case 'k':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_elm_lang$core$Date$hour(d));
			case 'I':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_mgold$elm_date_format$Date_Format$zero2twelve(
						_mgold$elm_date_format$Date_Format$mod12(
							_elm_lang$core$Date$hour(d))));
			case 'l':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					_elm_lang$core$Native_Utils.chr(' '),
					_mgold$elm_date_format$Date_Format$zero2twelve(
						_mgold$elm_date_format$Date_Format$mod12(
							_elm_lang$core$Date$hour(d))));
			case 'p':
				return (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$Date$hour(d),
					13) < 0) ? 'AM' : 'PM';
			case 'P':
				return (_elm_lang$core$Native_Utils.cmp(
					_elm_lang$core$Date$hour(d),
					13) < 0) ? 'am' : 'pm';
			case 'M':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$minute(d));
			case 'S':
				return A2(
					_mgold$elm_date_format$Date_Format$padWith,
					_elm_lang$core$Native_Utils.chr('0'),
					_elm_lang$core$Date$second(d));
			default:
				return '';
		}
	});
var _mgold$elm_date_format$Date_Format$re = _elm_lang$core$Regex$regex('%(%|Y|m|B|b|d|e|a|A|H|k|I|l|p|P|M|S)');
var _mgold$elm_date_format$Date_Format$format = F2(
	function (s, d) {
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$All,
			_mgold$elm_date_format$Date_Format$re,
			_mgold$elm_date_format$Date_Format$formatToken(d),
			s);
	});
var _mgold$elm_date_format$Date_Format$formatISO8601 = _mgold$elm_date_format$Date_Format$format('%Y-%m-%dT%H:%M:%SZ');

var _narkisr$elm_ui$Common_Redirect$redirect = _elm_lang$core$Native_Platform.outgoingPort(
	'redirect',
	function (v) {
		return v;
	});

var _narkisr$elm_ui$Common_Http$apply = F2(
	function (func, value) {
		return A3(
			_elm_lang$core$Json_Decode$object2,
			F2(
				function (x, y) {
					return x(y);
				}),
			func,
			value);
	});
var _narkisr$elm_ui$Common_Http$httpJson = F4(
	function (verb, body, decoder, url) {
		var request = {
			verb: verb,
			headers: _elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: 'Content-Type', _1: 'application/json;charset=UTF-8'},
					{ctor: '_Tuple2', _0: 'Accept', _1: 'application/json, text/plain, */*'}
				]),
			url: url,
			body: body
		};
		return A2(
			_evancz$elm_http$Http$fromJson,
			decoder,
			A2(_evancz$elm_http$Http$send, _evancz$elm_http$Http$defaultSettings, request));
	});
var _narkisr$elm_ui$Common_Http$delete = A2(_narkisr$elm_ui$Common_Http$httpJson, 'DELETE', _evancz$elm_http$Http$empty);
var _narkisr$elm_ui$Common_Http$getJson = A2(_narkisr$elm_ui$Common_Http$httpJson, 'GET', _evancz$elm_http$Http$empty);
var _narkisr$elm_ui$Common_Http$postJson = _narkisr$elm_ui$Common_Http$httpJson('POST');
var _narkisr$elm_ui$Common_Http$putJson = _narkisr$elm_ui$Common_Http$httpJson('PUT');
var _narkisr$elm_ui$Common_Http$SaveResponse = F2(
	function (a, b) {
		return {message: a, id: b};
	});
var _narkisr$elm_ui$Common_Http$saveResponse = A3(
	_elm_lang$core$Json_Decode$object2,
	_narkisr$elm_ui$Common_Http$SaveResponse,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'message', _elm_lang$core$Json_Decode$string),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'id', _elm_lang$core$Json_Decode$int)));

var _narkisr$elm_ui$Common_Model$valueOf = function (option) {
	var _p0 = option;
	switch (_p0.ctor) {
		case 'BoolOption':
			return _elm_lang$core$String$toLower(
				_elm_lang$core$Basics$toString(_p0._0));
		case 'StringOption':
			return _p0._0;
		case 'IntOption':
			return _elm_lang$core$Basics$toString(_p0._0);
		default:
			return _elm_lang$core$Basics$toString(_p0._0);
	}
};
var _narkisr$elm_ui$Common_Model$DictOption = function (a) {
	return {ctor: 'DictOption', _0: a};
};
var _narkisr$elm_ui$Common_Model$IntOption = function (a) {
	return {ctor: 'IntOption', _0: a};
};
var _narkisr$elm_ui$Common_Model$StringOption = function (a) {
	return {ctor: 'StringOption', _0: a};
};
var _narkisr$elm_ui$Common_Model$BoolOption = function (a) {
	return {ctor: 'BoolOption', _0: a};
};
var _narkisr$elm_ui$Common_Model$option = function (_p1) {
	return _elm_lang$core$Json_Decode$oneOf(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_elm_lang$core$Json_Decode$map, _narkisr$elm_ui$Common_Model$BoolOption, _elm_lang$core$Json_Decode$bool),
				A2(_elm_lang$core$Json_Decode$map, _narkisr$elm_ui$Common_Model$StringOption, _elm_lang$core$Json_Decode$string),
				A2(_elm_lang$core$Json_Decode$map, _narkisr$elm_ui$Common_Model$IntOption, _elm_lang$core$Json_Decode$int),
				_narkisr$elm_ui$Common_Model$dictOption$(
				{ctor: '_Tuple0'})
			]));
};
var _narkisr$elm_ui$Common_Model$dictOption$ = function (_p2) {
	return A2(
		_elm_lang$core$Json_Decode$andThen,
		_elm_lang$core$Json_Decode$succeed(
			{ctor: '_Tuple0'}),
		function (_p3) {
			return A2(
				_elm_lang$core$Json_Decode$map,
				_narkisr$elm_ui$Common_Model$DictOption,
				_elm_lang$core$Json_Decode$dict(
					_narkisr$elm_ui$Common_Model$option(_p3)));
		});
};

var _narkisr$elm_ui$Environments_List$environmentsKeys = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['environments']),
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string));
var _narkisr$elm_ui$Environments_List$getEnvironmentKeys = function (msg) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		msg,
		_elm_lang$core$Task$toResult(
			A2(_narkisr$elm_ui$Common_Http$getJson, _narkisr$elm_ui$Environments_List$environmentsKeys, '/environments/keys')));
};
var _narkisr$elm_ui$Environments_List$template = _elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string);
var _narkisr$elm_ui$Environments_List$Empty = {ctor: 'Empty'};
var _narkisr$elm_ui$Environments_List$Physical = {ctor: 'Physical'};
var _narkisr$elm_ui$Environments_List$GCE = {ctor: 'GCE'};
var _narkisr$elm_ui$Environments_List$AWS = {ctor: 'AWS'};
var _narkisr$elm_ui$Environments_List$KVM = F2(
	function (a, b) {
		return {ctor: 'KVM', _0: a, _1: b};
	});
var _narkisr$elm_ui$Environments_List$Openstack = F2(
	function (a, b) {
		return {ctor: 'Openstack', _0: a, _1: b};
	});
var _narkisr$elm_ui$Environments_List$Proxmox = F2(
	function (a, b) {
		return {ctor: 'Proxmox', _0: a, _1: b};
	});
var _narkisr$elm_ui$Environments_List$OSTemplates = function (a) {
	return {ctor: 'OSTemplates', _0: a};
};
var _narkisr$elm_ui$Environments_List$hypervisor = _elm_lang$core$Json_Decode$oneOf(
	_elm_lang$core$Native_List.fromArray(
		[
			A3(
			_elm_lang$core$Json_Decode$object2,
			_narkisr$elm_ui$Environments_List$Openstack,
			A2(
				_elm_lang$core$Json_Decode_ops[':='],
				'flavors',
				_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string)),
			A2(
				_elm_lang$core$Json_Decode_ops[':='],
				'ostemplates',
				_elm_lang$core$Json_Decode$dict(_narkisr$elm_ui$Environments_List$template))),
			A3(
			_elm_lang$core$Json_Decode$object2,
			_narkisr$elm_ui$Environments_List$KVM,
			A2(
				_elm_lang$core$Json_Decode_ops[':='],
				'ostemplates',
				_elm_lang$core$Json_Decode$dict(_narkisr$elm_ui$Environments_List$template)),
			A2(
				_elm_lang$core$Json_Decode_ops[':='],
				'nodes',
				_elm_lang$core$Json_Decode$dict(
					_elm_lang$core$Json_Decode$dict(
						_narkisr$elm_ui$Common_Model$option(
							{ctor: '_Tuple0'}))))),
			A2(
			_elm_lang$core$Json_Decode$object1,
			_narkisr$elm_ui$Environments_List$OSTemplates,
			A2(
				_elm_lang$core$Json_Decode_ops[':='],
				'ostemplates',
				_elm_lang$core$Json_Decode$dict(_narkisr$elm_ui$Environments_List$template))),
			_elm_lang$core$Json_Decode$succeed(_narkisr$elm_ui$Environments_List$Physical)
		]));
var _narkisr$elm_ui$Environments_List$environment = _elm_lang$core$Json_Decode$dict(_narkisr$elm_ui$Environments_List$hypervisor);
var _narkisr$elm_ui$Environments_List$environmentsList = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['environments']),
	_elm_lang$core$Json_Decode$dict(_narkisr$elm_ui$Environments_List$environment));
var _narkisr$elm_ui$Environments_List$getEnvironments = function (msg) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		msg,
		_elm_lang$core$Task$toResult(
			A2(_narkisr$elm_ui$Common_Http$getJson, _narkisr$elm_ui$Environments_List$environmentsList, '/environments')));
};

var _narkisr$elm_ui$Systems_Add_Common$setMachine = F2(
	function (f, _p0) {
		var _p1 = _p0;
		var newMachine = f(_p1.machine);
		return _elm_lang$core$Native_Utils.update(
			_p1,
			{machine: newMachine});
	});
var _narkisr$elm_ui$Systems_Add_Common$getOses = F2(
	function (hyp, model) {
		var hypervisor = A2(
			_elm_lang$core$Maybe$withDefault,
			_narkisr$elm_ui$Environments_List$Empty,
			A2(_elm_lang$core$Dict$get, hyp, model.environment));
		var _p2 = hypervisor;
		switch (_p2.ctor) {
			case 'OSTemplates':
				return _p2._0;
			case 'Openstack':
				return _p2._1;
			case 'KVM':
				return _p2._0;
			default:
				return _elm_lang$core$Dict$empty;
		}
	});
var _narkisr$elm_ui$Systems_Add_Common$setDefaultOS = F2(
	function (hyp, _p3) {
		var _p4 = _p3;
		var _p7 = _p4;
		var _p6 = _p4.machine;
		var _p5 = _elm_lang$core$List$head(
			_elm_lang$core$Dict$keys(
				A2(_narkisr$elm_ui$Systems_Add_Common$getOses, hyp, _p7)));
		if (_p5.ctor === 'Just') {
			return _elm_lang$core$String$isEmpty(_p6.os) ? _elm_lang$core$Native_Utils.update(
				_p7,
				{
					machine: _elm_lang$core$Native_Utils.update(
						_p6,
						{os: _p5._0})
				}) : _p7;
		} else {
			return _p7;
		}
	});

var _narkisr$elm_ui$Systems_Add_Validations$validate = F3(
	function (step, key, validations) {
		var stepValidations = A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Dict$empty,
			A2(
				_elm_lang$core$Dict$get,
				_elm_lang$core$Basics$toString(step),
				validations));
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Basics$identity,
			A2(_elm_lang$core$Dict$get, key, stepValidations));
	});
var _narkisr$elm_ui$Systems_Add_Validations$validateAll = F3(
	function (validations, step, model) {
		var stepValues = A2(
			_elm_lang$core$List$map,
			function (vs) {
				return A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Dict$empty,
					A2(
						_elm_lang$core$Dict$get,
						_elm_lang$core$Basics$toString(step),
						vs));
			},
			validations);
		return A3(
			_elm_lang$core$List$foldl,
			F2(
				function (v, m) {
					return v(m);
				}),
			model,
			_elm_lang$core$List$concat(
				A2(_elm_lang$core$List$map, _elm_lang$core$Dict$values, stepValues)));
	});
var _narkisr$elm_ui$Systems_Add_Validations$notAny = function (errors) {
	return _elm_lang$core$List$isEmpty(
		A2(
			_elm_lang$core$List$filter,
			function (e) {
				return _elm_lang$core$Basics$not(
					_elm_lang$core$List$isEmpty(e));
			},
			_elm_lang$core$Dict$values(errors)));
};
var _narkisr$elm_ui$Systems_Add_Validations$vpair = F2(
	function (step, validations) {
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Basics$toString(step),
			_1: _elm_lang$core$Dict$fromList(validations)
		};
	});
var _narkisr$elm_ui$Systems_Add_Validations$Invalid = function (a) {
	return {ctor: 'Invalid', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Validations$None = {ctor: 'None'};
var _narkisr$elm_ui$Systems_Add_Validations$notEmpty = function (value) {
	return _elm_lang$core$String$isEmpty(value) ? _narkisr$elm_ui$Systems_Add_Validations$Invalid('cannot be empty') : _narkisr$elm_ui$Systems_Add_Validations$None;
};
var _narkisr$elm_ui$Systems_Add_Validations$hasItems = function (value) {
	return _elm_lang$core$List$isEmpty(value) ? _narkisr$elm_ui$Systems_Add_Validations$Invalid('cannot be empty') : _narkisr$elm_ui$Systems_Add_Validations$None;
};
var _narkisr$elm_ui$Systems_Add_Validations$notContained = function (_p0) {
	var _p1 = _p0;
	var _p3 = _p1._0;
	var _p2 = _narkisr$elm_ui$Systems_Add_Validations$notEmpty(_p3);
	if (_p2.ctor === 'Invalid') {
		return _narkisr$elm_ui$Systems_Add_Validations$Invalid(_p2._0);
	} else {
		return A2(_elm_lang$core$List$member, _p3, _p1._1) ? _narkisr$elm_ui$Systems_Add_Validations$Invalid('cannot add twice') : _narkisr$elm_ui$Systems_Add_Validations$None;
	}
};
var _narkisr$elm_ui$Systems_Add_Validations$validIp = function (value) {
	return (_elm_lang$core$Basics$not(
		_elm_lang$core$String$isEmpty(value)) && (!_elm_lang$core$Native_Utils.eq(
		_elm_lang$core$List$length(
			A3(
				_elm_lang$core$Regex$find,
				_elm_lang$core$Regex$All,
				_elm_lang$core$Regex$regex('\\d+\\.\\d+\\.\\d+\\.\\d+$'),
				value)),
		1))) ? _narkisr$elm_ui$Systems_Add_Validations$Invalid('non legal ip address') : _narkisr$elm_ui$Systems_Add_Validations$None;
};
var _narkisr$elm_ui$Systems_Add_Validations$validId = F4(
	function (length, prefix, allowEmpty, value) {
		return (_elm_lang$core$String$isEmpty(value) && allowEmpty) ? _narkisr$elm_ui$Systems_Add_Validations$None : (_elm_lang$core$Basics$not(
			A2(_elm_lang$core$String$contains, prefix, value)) ? _narkisr$elm_ui$Systems_Add_Validations$Invalid(
			A2(_elm_lang$core$Basics_ops['++'], 'Id should start with ', prefix)) : ((!_elm_lang$core$Native_Utils.eq(
			_elm_lang$core$String$length(value),
			length)) ? _narkisr$elm_ui$Systems_Add_Validations$Invalid(
			A2(
				_elm_lang$core$Basics_ops['++'],
				'Id should have ',
				A2(
					_elm_lang$core$Basics_ops['++'],
					_elm_lang$core$Basics$toString(length),
					' characthers'))) : _narkisr$elm_ui$Systems_Add_Validations$None));
	});
var _narkisr$elm_ui$Systems_Add_Validations$validationOf = F4(
	function (key, validations, value, _p4) {
		var _p5 = _p4;
		var _p7 = _p5;
		var res = A2(
			_elm_lang$core$List$filter,
			function (error) {
				return !_elm_lang$core$Native_Utils.eq(error, _narkisr$elm_ui$Systems_Add_Validations$None);
			},
			A2(
				_elm_lang$core$List$map,
				function (validation) {
					return validation(
						value(_p7));
				},
				validations));
		var newErrors = A3(
			_elm_lang$core$Dict$update,
			key,
			function (_p6) {
				return _elm_lang$core$Maybe$Just(res);
			},
			_p5.errors);
		return _elm_lang$core$Native_Utils.update(
			_p7,
			{errors: newErrors});
	});

var _narkisr$elm_ui$Common_Utils$capitalize = function (s) {
	var _p0 = _elm_lang$core$String$uncons(s);
	if (_p0.ctor === 'Just') {
		return A2(
			_elm_lang$core$String$cons,
			_elm_lang$core$Char$toUpper(_p0._0._0),
			_p0._0._1);
	} else {
		return s;
	}
};
var _narkisr$elm_ui$Common_Utils$none = function (a) {
	return {ctor: '_Tuple2', _0: a, _1: _elm_lang$core$Platform_Cmd$none};
};
var _narkisr$elm_ui$Common_Utils$setEnvironments = F2(
	function (model, es) {
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{
					environments: _elm_lang$core$Dict$keys(es)
				}));
	});
var _narkisr$elm_ui$Common_Utils$setEnvironment = F2(
	function (_p1, es) {
		var _p2 = _p1;
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				_p2,
				{
					environment: A2(
						_elm_lang$core$Maybe$withDefault,
						'',
						_elm_lang$core$List$head(
							_elm_lang$core$Dict$keys(es)))
				}));
	});
var _narkisr$elm_ui$Common_Utils$defaultEmpty = function (list) {
	var _p3 = list;
	if (_p3.ctor === 'Just') {
		return _p3._0;
	} else {
		return _elm_lang$core$Native_List.fromArray(
			[]);
	}
};
var _narkisr$elm_ui$Common_Utils$withDefaultProp = F3(
	function (parent, $default, prop) {
		var _p4 = parent;
		if (_p4.ctor === 'Just') {
			return prop(_p4._0);
		} else {
			return $default;
		}
	});
var _narkisr$elm_ui$Common_Utils$partition = F2(
	function (n, list) {
		var $catch = A2(_elm_lang$core$List$take, n, list);
		return _elm_lang$core$Native_Utils.eq(
			n,
			_elm_lang$core$List$length($catch)) ? A2(
			_elm_lang$core$Basics_ops['++'],
			_elm_lang$core$Native_List.fromArray(
				[$catch]),
			A2(
				_narkisr$elm_ui$Common_Utils$partition,
				n,
				A2(_elm_lang$core$List$drop, n, list))) : _elm_lang$core$Native_List.fromArray(
			[$catch]);
	});

var _narkisr$elm_ui$Common_Components$buttons = F4(
	function (_p0, next, back, last) {
		var _p1 = _p0;
		var margin = _elm_lang$html$Html_Attributes$style(
			_elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: 'margin-left', _1: '30%'}
				]));
		return _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$button,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$id('Back'),
						_elm_lang$html$Html_Attributes$class('btn btn-primary'),
						margin,
						_elm_lang$html$Html_Events$onClick(back)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('<< Back')
					])),
				_p1.hasNext ? A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('btn-group'),
						margin
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$id('Next'),
								_elm_lang$html$Html_Attributes$class('btn btn-primary'),
								_elm_lang$html$Html_Events$onClick(next)
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Next >>')
							]))
					])) : A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('btn-group'),
						margin
					]),
				last)
			]);
	});
var _narkisr$elm_ui$Common_Components$checkbox = F2(
	function (msg, currentValue) {
		return A2(
			_elm_lang$html$Html$input,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$type$('checkbox'),
					_elm_lang$html$Html_Events$onClick(msg),
					_elm_lang$html$Html_Attributes$checked(currentValue)
				]),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _narkisr$elm_ui$Common_Components$typedInput = F4(
	function (msg, place, currentValue, typed) {
		return A2(
			_elm_lang$html$Html$input,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-control'),
					_elm_lang$html$Html_Attributes$type$(typed),
					_elm_lang$html$Html_Attributes$placeholder(place),
					_elm_lang$html$Html_Attributes$value(currentValue),
					_elm_lang$html$Html_Events$onInput(msg)
				]),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _narkisr$elm_ui$Common_Components$inputNumber = F3(
	function (msg, place, currentValue) {
		return A4(_narkisr$elm_ui$Common_Components$typedInput, msg, place, currentValue, 'number');
	});
var _narkisr$elm_ui$Common_Components$inputText = F3(
	function (msg, place, currentValue) {
		return A4(_narkisr$elm_ui$Common_Components$typedInput, msg, place, currentValue, 'text');
	});
var _narkisr$elm_ui$Common_Components$onMultiSelect = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(
			_elm_lang$core$Json_Decode$map,
			msg,
			A2(
				_elm_lang$core$Json_Decode$at,
				_elm_lang$core$Native_List.fromArray(
					['target']),
				_elm_lang$core$Json_Decode$string)));
};
var _narkisr$elm_ui$Common_Components$onSelect = function (msg) {
	return A2(
		_elm_lang$html$Html_Events$on,
		'change',
		A2(
			_elm_lang$core$Json_Decode$map,
			msg,
			A2(
				_elm_lang$core$Json_Decode$at,
				_elm_lang$core$Native_List.fromArray(
					['target', 'value']),
				_elm_lang$core$Json_Decode$string)));
};
var _narkisr$elm_ui$Common_Components$selected = F2(
	function (value, $default) {
		return _elm_lang$core$Native_Utils.eq(value, $default) ? _elm_lang$core$Native_List.fromArray(
			[
				A2(_elm_lang$html$Html_Attributes$attribute, 'selected', 'true')
			]) : _elm_lang$core$Native_List.fromArray(
			[]);
	});
var _narkisr$elm_ui$Common_Components$selector = F3(
	function (msg, options, $default) {
		return A2(
			_elm_lang$html$Html$select,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-control'),
					_narkisr$elm_ui$Common_Components$onSelect(msg)
				]),
			A2(
				_elm_lang$core$List$map,
				function (opt) {
					return A2(
						_elm_lang$html$Html$option,
						A2(_narkisr$elm_ui$Common_Components$selected, opt, $default),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(opt)
							]));
				},
				options));
	});
var _narkisr$elm_ui$Common_Components$toHtml = function (error) {
	var _p2 = error;
	if (_p2.ctor === 'Invalid') {
		return A2(
			_elm_lang$html$Html$span,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('help-block')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(_p2._0)
				]));
	} else {
		return A2(
			_elm_lang$html$Html$span,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('help-block')
				]),
			_elm_lang$core$Native_List.fromArray(
				[]));
	}
};
var _narkisr$elm_ui$Common_Components$withMessage = function (errors) {
	if (_elm_lang$core$List$isEmpty(errors)) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[]));
	} else {
		var messages = A2(_elm_lang$core$List$map, _narkisr$elm_ui$Common_Components$toHtml, errors);
		return A2(
			_elm_lang$core$Maybe$withDefault,
			A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[])),
			_elm_lang$core$List$head(messages));
	}
};
var _narkisr$elm_ui$Common_Components$withError = F2(
	function (errors, $class) {
		return _elm_lang$core$List$isEmpty(errors) ? $class : A2(_elm_lang$core$Basics_ops['++'], $class, ' has-error');
	});
var _narkisr$elm_ui$Common_Components$group = F3(
	function (title, widget, errors) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class(
					A2(_narkisr$elm_ui$Common_Components$withError, errors, 'form-group')),
					_elm_lang$html$Html_Attributes$id(title)
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$label,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$for(title),
							_elm_lang$html$Html_Attributes$class('col-sm-3 control-label')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(title)
						])),
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('col-sm-6')
						]),
					_elm_lang$core$Native_List.fromArray(
						[widget])),
					_narkisr$elm_ui$Common_Components$withMessage(errors)
				]));
	});
var _narkisr$elm_ui$Common_Components$group$ = F2(
	function (title, widget) {
		return A3(
			_narkisr$elm_ui$Common_Components$group,
			title,
			widget,
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _narkisr$elm_ui$Common_Components$withErrors = F3(
	function (errors, key, widget) {
		return A3(
			_narkisr$elm_ui$Common_Components$group,
			key,
			widget,
			_narkisr$elm_ui$Common_Utils$defaultEmpty(
				A2(_elm_lang$core$Dict$get, key, errors)));
	});
var _narkisr$elm_ui$Common_Components$callout = F2(
	function (type$, message) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('col-md-offset-1 col-md-10')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class(
							A2(_elm_lang$core$Basics_ops['++'], 'callout callout-', type$))
						]),
					message)
				]));
	});
var _narkisr$elm_ui$Common_Components$dialogPanel = F3(
	function (type$, message, body) {
		return _elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(_narkisr$elm_ui$Common_Components$callout, type$, message)
					])),
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('col-md-offset-1 col-md-10')
							]),
						_elm_lang$core$Native_List.fromArray(
							[body]))
					]))
			]);
	});
var _narkisr$elm_ui$Common_Components$dialogButtons = F2(
	function (cancel, ok) {
		return _circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('text-center')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$html$Html$div,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html_Attributes$class('btn-group col-md-offset-5 col-md-10')
								]),
							_elm_lang$core$Native_List.fromArray(
								[
									A2(
									_elm_lang$html$Html$button,
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$html$Html_Attributes$class('btn btn-danger btn-sm col-md-1 col-md-offset-1'),
											_elm_lang$html$Html_Events$onClick(cancel)
										]),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(cancel))
										])),
									A2(
									_elm_lang$html$Html$button,
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$html$Html_Attributes$class('btn btn-primary btn-sm col-md-1'),
											_elm_lang$html$Html_Events$onClick(ok)
										]),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$html$Html$text(
											_elm_lang$core$Basics$toString(ok))
										]))
								]))
						]))
				]));
	});
var _narkisr$elm_ui$Common_Components$message = F2(
	function (title, content) {
		return _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$h4,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(title)
					])),
				A2(
				_elm_lang$html$Html$span,
				_elm_lang$core$Native_List.fromArray(
					[]),
				content)
			]);
	});
var _narkisr$elm_ui$Common_Components$info = function (msg) {
	return A2(
		_narkisr$elm_ui$Common_Components$message,
		'Info',
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(msg)
			]));
};
var _narkisr$elm_ui$Common_Components$error = function (msg) {
	return A2(
		_narkisr$elm_ui$Common_Components$message,
		'Error!',
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(msg)
			]));
};
var _narkisr$elm_ui$Common_Components$asList = function (body) {
	return _elm_lang$core$Native_List.fromArray(
		[body]);
};
var _narkisr$elm_ui$Common_Components$withButtons = F3(
	function (cancel, ok, panel) {
		return A2(
			_elm_lang$core$List$append,
			panel,
			_narkisr$elm_ui$Common_Components$asList(
				A2(_narkisr$elm_ui$Common_Components$dialogButtons, cancel, ok)));
	});
var _narkisr$elm_ui$Common_Components$infoCallout = F4(
	function (message, body, cancel, ok) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			A3(
				_narkisr$elm_ui$Common_Components$withButtons,
				cancel,
				ok,
				A3(_narkisr$elm_ui$Common_Components$dialogPanel, 'info', message, body)));
	});
var _narkisr$elm_ui$Common_Components$dangerCallout = F4(
	function (message, body, cancel, ok) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			A3(
				_narkisr$elm_ui$Common_Components$withButtons,
				cancel,
				ok,
				A3(_narkisr$elm_ui$Common_Components$dialogPanel, 'danger', message, body)));
	});
var _narkisr$elm_ui$Common_Components$warningCallout = F4(
	function (message, body, cancel, ok) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			A3(
				_narkisr$elm_ui$Common_Components$withButtons,
				cancel,
				ok,
				A3(_narkisr$elm_ui$Common_Components$dialogPanel, 'warning', message, body)));
	});
var _narkisr$elm_ui$Common_Components$panel = function (body) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('panel panel-default')
			]),
		_elm_lang$core$Native_List.fromArray(
			[body]));
};
var _narkisr$elm_ui$Common_Components$panelContents = function (body) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('panel-body')
			]),
		_elm_lang$core$Native_List.fromArray(
			[body]));
};
var _narkisr$elm_ui$Common_Components$fixedSize = function (height) {
	return _elm_lang$html$Html_Attributes$style(
		_elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: 'height', _1: 'auto !important'},
				{ctor: '_Tuple2', _0: 'overflow', _1: 'auto'},
				{ctor: '_Tuple2', _0: 'min-height', _1: height},
				{ctor: '_Tuple2', _0: 'height', _1: height}
			]));
};
var _narkisr$elm_ui$Common_Components$fixedPanel = function (body) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('panel-body'),
				_narkisr$elm_ui$Common_Components$fixedSize('550px')
			]),
		_elm_lang$core$Native_List.fromArray(
			[body]));
};
var _narkisr$elm_ui$Common_Components$notImplemented = A2(
	_elm_lang$html$Html$div,
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$html$Html$text('not implemented')
		]));

var _narkisr$elm_ui$Common_Errors$setErrors = F2(
	function (_p0, es) {
		var _p1 = _p0;
		var newErrors = _elm_lang$core$Native_Utils.update(
			_p1.saveErrors,
			{errors: es});
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				_p1,
				{saveErrors: newErrors}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _narkisr$elm_ui$Common_Errors$handler = F5(
	function (result, model, success, fail, noop) {
		var _p2 = result;
		if (_p2.ctor === 'Ok') {
			return success(_p2._0);
		} else {
			var _p4 = _p2._0;
			var _p3 = _p4;
			if ((_p3.ctor === 'BadResponse') && (_p3._0 === 401)) {
				return A2(
					_elm_lang$core$Debug$log,
					_elm_lang$core$Basics$toString(_p4),
					{
						ctor: '_Tuple2',
						_0: model,
						_1: _narkisr$elm_ui$Common_Redirect$redirect('login')
					});
			} else {
				return A2(
					_elm_lang$core$Debug$log,
					_elm_lang$core$Basics$toString(_p4),
					{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
			}
		}
	});
var _narkisr$elm_ui$Common_Errors$errorsSuccessHandler = F4(
	function (result, model, success, noop) {
		return A5(
			_narkisr$elm_ui$Common_Errors$handler,
			result,
			model,
			success,
			_narkisr$elm_ui$Common_Errors$setErrors(model),
			noop);
	});
var _narkisr$elm_ui$Common_Errors$identityFail = F2(
	function (model, res) {
		return A2(
			_elm_lang$core$Debug$log,
			A2(
				_elm_lang$core$Basics_ops['++'],
				'request failed ',
				_elm_lang$core$Basics$toString(res)),
			{ctor: '_Tuple2', _0: model, _1: _elm_lang$core$Platform_Cmd$none});
	});
var _narkisr$elm_ui$Common_Errors$successHandler = F4(
	function (result, model, success, noop) {
		return A5(
			_narkisr$elm_ui$Common_Errors$handler,
			result,
			model,
			success,
			_narkisr$elm_ui$Common_Errors$identityFail(model),
			noop);
	});
var _narkisr$elm_ui$Common_Errors$identitySuccess = F2(
	function (model, res) {
		return _narkisr$elm_ui$Common_Utils$none(model);
	});
var _narkisr$elm_ui$Common_Errors$failHandler = F4(
	function (result, model, fail, noop) {
		return A5(
			_narkisr$elm_ui$Common_Errors$handler,
			result,
			model,
			_narkisr$elm_ui$Common_Errors$identitySuccess(model),
			fail,
			noop);
	});
var _narkisr$elm_ui$Common_Errors$errorsHandler = F3(
	function (result, model, noop) {
		return A5(
			_narkisr$elm_ui$Common_Errors$handler,
			result,
			model,
			_narkisr$elm_ui$Common_Errors$identitySuccess(model),
			_narkisr$elm_ui$Common_Errors$setErrors(model),
			noop);
	});
var _narkisr$elm_ui$Common_Errors$errorsList = function (errors) {
	return _elm_lang$core$Basics$not(
		_elm_lang$core$Native_Utils.eq(errors.keyValues, _elm_lang$core$Maybe$Nothing));
};
var _narkisr$elm_ui$Common_Errors$hasErrors = function (_p5) {
	var _p6 = _p5;
	var _p7 = _p6.errors;
	return _narkisr$elm_ui$Common_Errors$errorsList(_p7) || (!_elm_lang$core$Native_Utils.eq(_p7.message, _elm_lang$core$Maybe$Nothing));
};
var _narkisr$elm_ui$Common_Errors$mapValues = F2(
	function (f, d) {
		return _elm_lang$core$Dict$values(
			A2(_elm_lang$core$Dict$map, f, d));
	});
var _narkisr$elm_ui$Common_Errors$nestedSection = F2(
	function (key, errors) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(key),
					A2(
					_elm_lang$html$Html$ul,
					_elm_lang$core$Native_List.fromArray(
						[]),
					A2(
						_narkisr$elm_ui$Common_Errors$mapValues,
						F2(
							function (k, v) {
								return A2(
									_elm_lang$html$Html$li,
									_elm_lang$core$Native_List.fromArray(
										[]),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$html$Html$text(
											A2(
												_elm_lang$core$Basics_ops['++'],
												k,
												A2(_elm_lang$core$Basics_ops['++'], ': ', v)))
										]));
							}),
						errors))
				]));
	});
var _narkisr$elm_ui$Common_Errors$nestedList = F2(
	function (prop, nested) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			A2(
				_elm_lang$core$List$map,
				function (section) {
					return A2(_narkisr$elm_ui$Common_Errors$nestedSection, prop, section);
				},
				nested));
	});
var _narkisr$elm_ui$Common_Errors$deepNestedList = F2(
	function (prop, nested) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$List$concat(
				A2(
					_elm_lang$core$List$map,
					function (parent) {
						return A2(
							_narkisr$elm_ui$Common_Errors$mapValues,
							F2(
								function (key, errors) {
									return A2(
										_narkisr$elm_ui$Common_Errors$nestedSection,
										A2(
											_elm_lang$core$Basics_ops['++'],
											prop,
											A2(_elm_lang$core$Basics_ops['++'], '.', key)),
										errors);
								}),
							parent);
					},
					nested)));
	});
var _narkisr$elm_ui$Common_Errors$toText = F2(
	function (key, error) {
		var _p8 = error;
		switch (_p8.ctor) {
			case 'Nested':
				return A2(_narkisr$elm_ui$Common_Errors$nestedSection, key, _p8._0);
			case 'DeepNestedList':
				return A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[]),
					A2(
						_narkisr$elm_ui$Common_Errors$mapValues,
						F2(
							function (prop, nested) {
								return A2(
									_narkisr$elm_ui$Common_Errors$deepNestedList,
									A2(
										_elm_lang$core$Basics_ops['++'],
										key,
										A2(_elm_lang$core$Basics_ops['++'], '.', prop)),
									nested);
							}),
						_p8._0));
			case 'NestedList':
				return A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[]),
					A2(
						_narkisr$elm_ui$Common_Errors$mapValues,
						F2(
							function (prop, nested) {
								return A2(
									_narkisr$elm_ui$Common_Errors$nestedList,
									A2(
										_elm_lang$core$Basics_ops['++'],
										key,
										A2(_elm_lang$core$Basics_ops['++'], '.', prop)),
									nested);
							}),
						_p8._0));
			default:
				return _elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Basics_ops['++'],
						key,
						A2(_elm_lang$core$Basics_ops['++'], ': ', _p8._0)));
		}
	});
var _narkisr$elm_ui$Common_Errors$errorsText = function (errors) {
	return _narkisr$elm_ui$Common_Errors$errorsList(errors) ? A2(
		_elm_lang$html$Html$ul,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'}
					]))
			]),
		_elm_lang$core$Dict$values(
			A2(
				_elm_lang$core$Dict$map,
				F2(
					function (k, v) {
						return A2(
							_elm_lang$html$Html$li,
							_elm_lang$core$Native_List.fromArray(
								[]),
							_elm_lang$core$Native_List.fromArray(
								[
									A2(_narkisr$elm_ui$Common_Errors$toText, k, v)
								]));
					}),
				A2(_elm_lang$core$Maybe$withDefault, _elm_lang$core$Dict$empty, errors.keyValues)))) : A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(
				A2(_elm_lang$core$Maybe$withDefault, '', errors.message))
			]));
};
var _narkisr$elm_ui$Common_Errors$view = function (_p9) {
	var _p10 = _p9;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('panel-body')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$h4,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('The following errors found:')
					])),
				_narkisr$elm_ui$Common_Errors$errorsText(_p10.errors)
			]));
};
var _narkisr$elm_ui$Common_Errors$Errors = F3(
	function (a, b, c) {
		return {type$: a, keyValues: b, message: c};
	});
var _narkisr$elm_ui$Common_Errors$messageDecoder = A2(
	_elm_lang$core$Json_Decode$object1,
	A2(_narkisr$elm_ui$Common_Errors$Errors, '', _elm_lang$core$Maybe$Nothing),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'message', _elm_lang$core$Json_Decode$string)));
var _narkisr$elm_ui$Common_Errors$Model = function (a) {
	return {errors: a};
};
var _narkisr$elm_ui$Common_Errors$init = _narkisr$elm_ui$Common_Errors$Model(
	A3(_narkisr$elm_ui$Common_Errors$Errors, '', _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing));
var _narkisr$elm_ui$Common_Errors$Value = function (a) {
	return {ctor: 'Value', _0: a};
};
var _narkisr$elm_ui$Common_Errors$NestedList = function (a) {
	return {ctor: 'NestedList', _0: a};
};
var _narkisr$elm_ui$Common_Errors$DeepNestedList = function (a) {
	return {ctor: 'DeepNestedList', _0: a};
};
var _narkisr$elm_ui$Common_Errors$Nested = function (a) {
	return {ctor: 'Nested', _0: a};
};
var _narkisr$elm_ui$Common_Errors$errorsDecoder = function () {
	var options = _elm_lang$core$Native_List.fromArray(
		[
			A2(_elm_lang$core$Json_Decode$map, _narkisr$elm_ui$Common_Errors$Value, _elm_lang$core$Json_Decode$string),
			A2(
			_elm_lang$core$Json_Decode$map,
			_narkisr$elm_ui$Common_Errors$Nested,
			_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string)),
			A2(
			_elm_lang$core$Json_Decode$map,
			_narkisr$elm_ui$Common_Errors$DeepNestedList,
			_elm_lang$core$Json_Decode$dict(
				_elm_lang$core$Json_Decode$list(
					_elm_lang$core$Json_Decode$dict(
						_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string))))),
			A2(
			_elm_lang$core$Json_Decode$map,
			_narkisr$elm_ui$Common_Errors$NestedList,
			_elm_lang$core$Json_Decode$dict(
				_elm_lang$core$Json_Decode$list(
					_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string))))
		]);
	return A4(
		_elm_lang$core$Json_Decode$object3,
		_narkisr$elm_ui$Common_Errors$Errors,
		A2(
			_elm_lang$core$Json_Decode$at,
			_elm_lang$core$Native_List.fromArray(
				['object', 'type']),
			_elm_lang$core$Json_Decode$string),
		_elm_lang$core$Json_Decode$maybe(
			A2(
				_elm_lang$core$Json_Decode$at,
				_elm_lang$core$Native_List.fromArray(
					['object', 'errors']),
				_elm_lang$core$Json_Decode$dict(
					_elm_lang$core$Json_Decode$oneOf(options)))),
		_elm_lang$core$Json_Decode$maybe(
			A2(_elm_lang$core$Json_Decode_ops[':='], 'message', _elm_lang$core$Json_Decode$string)));
}();
var _narkisr$elm_ui$Common_Errors$decodeError = function (error) {
	var emptyErrors = A3(_narkisr$elm_ui$Common_Errors$Errors, '', _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
	var _p11 = error;
	if (_p11.ctor === 'Text') {
		var _p14 = _p11._0;
		var _p12 = A2(_elm_lang$core$Json_Decode$decodeString, _narkisr$elm_ui$Common_Errors$errorsDecoder, _p14);
		if (_p12.ctor === 'Ok') {
			return _p12._0;
		} else {
			var _p13 = A2(
				_elm_lang$core$Debug$log,
				_elm_lang$core$Basics$toString(_p12._0),
				A2(_elm_lang$core$Json_Decode$decodeString, _narkisr$elm_ui$Common_Errors$messageDecoder, _p14));
			if (_p13.ctor === 'Ok') {
				return _p13._0;
			} else {
				return A2(_elm_lang$core$Debug$log, _p13._0, emptyErrors);
			}
		}
	} else {
		return emptyErrors;
	}
};
var _narkisr$elm_ui$Common_Errors$NoOp = {ctor: 'NoOp'};

var _narkisr$elm_ui$Users_Model$rolesList = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['roles']),
	_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$string));
var _narkisr$elm_ui$Users_Model$getRoles = function (msg) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		msg,
		_elm_lang$core$Task$toResult(
			A2(_narkisr$elm_ui$Common_Http$getJson, _narkisr$elm_ui$Users_Model$rolesList, '/users/roles')));
};
var _narkisr$elm_ui$Users_Model$User = F5(
	function (a, b, c, d, e) {
		return {username: a, password: b, operations: c, roles: d, envs: e};
	});
var _narkisr$elm_ui$Users_Model$emptyUser = A5(
	_narkisr$elm_ui$Users_Model$User,
	'',
	_elm_lang$core$Maybe$Nothing,
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Native_List.fromArray(
		[]));
var _narkisr$elm_ui$Users_Model$userBase = F3(
	function (name, password, role) {
		return A5(
			_narkisr$elm_ui$Users_Model$User,
			name,
			_elm_lang$core$Maybe$Just(password),
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[role]),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _narkisr$elm_ui$Users_Model$permBase = F2(
	function (envs, operations) {
		return A5(
			_narkisr$elm_ui$Users_Model$User,
			'',
			_elm_lang$core$Maybe$Nothing,
			operations,
			_elm_lang$core$Native_List.fromArray(
				[]),
			envs);
	});
var _narkisr$elm_ui$Users_Model$user = A6(
	_elm_lang$core$Json_Decode$object5,
	_narkisr$elm_ui$Users_Model$User,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'username', _elm_lang$core$Json_Decode$string),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'password', _elm_lang$core$Json_Decode$string)),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'operations',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'roles',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'envs',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)));
var _narkisr$elm_ui$Users_Model$usersList = _elm_lang$core$Json_Decode$list(_narkisr$elm_ui$Users_Model$user);
var _narkisr$elm_ui$Users_Model$getUsers = function (msg) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		msg,
		_elm_lang$core$Task$toResult(
			A2(_narkisr$elm_ui$Common_Http$getJson, _narkisr$elm_ui$Users_Model$usersList, '/users')));
};

var _narkisr$elm_ui$Users_Session$isUser = function (_p0) {
	var _p1 = _p0;
	return A2(_elm_lang$core$List$member, 'celestial.roles/user', _p1.roles);
};
var _narkisr$elm_ui$Users_Session$logout = function (msg) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		msg,
		_elm_lang$core$Task$toResult(
			_evancz$elm_http$Http$getString('/logout')));
};
var _narkisr$elm_ui$Users_Session$Session = F5(
	function (a, b, c, d, e) {
		return {envs: a, identity: b, operations: c, roles: d, username: e};
	});
var _narkisr$elm_ui$Users_Session$emptySession = A5(
	_narkisr$elm_ui$Users_Session$Session,
	_elm_lang$core$Native_List.fromArray(
		[]),
	'',
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Native_List.fromArray(
		[]),
	'');
var _narkisr$elm_ui$Users_Session$session = A6(
	_elm_lang$core$Json_Decode$object5,
	_narkisr$elm_ui$Users_Session$Session,
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'envs',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'identity', _elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'operations',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'roles',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'username', _elm_lang$core$Json_Decode$string));
var _narkisr$elm_ui$Users_Session$getSession = function (msg) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		msg,
		_elm_lang$core$Task$toResult(
			A2(_narkisr$elm_ui$Common_Http$getJson, _narkisr$elm_ui$Users_Session$session, '/sessions')));
};

var _narkisr$elm_ui$Admin_Core$ownersList = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1.owners;
	return _elm_lang$core$List$isEmpty(_p2) ? _elm_lang$core$Native_List.fromArray(
		[_p1.owner]) : _p2;
};
var _narkisr$elm_ui$Admin_Core$setEnvironments = F2(
	function (model, es) {
		var environment = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(
				_elm_lang$core$Dict$keys(es)));
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{
					environments: _elm_lang$core$Dict$keys(es),
					environment: environment,
					rawEnvironments: es
				}));
	});
var _narkisr$elm_ui$Admin_Core$setOwners = F2(
	function (model, owners) {
		var users = A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.username;
			},
			owners);
		var user = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(users));
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{owners: users, owner: user}));
	});
var _narkisr$elm_ui$Admin_Core$Model = F5(
	function (a, b, c, d, e) {
		return {environments: a, environment: b, rawEnvironments: c, owners: d, owner: e};
	});
var _narkisr$elm_ui$Admin_Core$partialAdmin = F2(
	function (owner, environment) {
		return A5(
			_narkisr$elm_ui$Admin_Core$Model,
			_elm_lang$core$Native_List.fromArray(
				[]),
			environment,
			_elm_lang$core$Dict$empty,
			_elm_lang$core$Native_List.fromArray(
				[]),
			owner);
	});
var _narkisr$elm_ui$Admin_Core$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Admin_Core$LoadSession = function (a) {
	return {ctor: 'LoadSession', _0: a};
};
var _narkisr$elm_ui$Admin_Core$SelectEnvironment = function (a) {
	return {ctor: 'SelectEnvironment', _0: a};
};
var _narkisr$elm_ui$Admin_Core$SelectOwner = function (a) {
	return {ctor: 'SelectOwner', _0: a};
};
var _narkisr$elm_ui$Admin_Core$view = function (_p3) {
	var _p4 = _p3;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_narkisr$elm_ui$Common_Components$group$,
				'Environment',
				A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Admin_Core$SelectEnvironment, _p4.environments, _p4.environment)),
				A2(
				_narkisr$elm_ui$Common_Components$group$,
				'Owner',
				A3(
					_narkisr$elm_ui$Common_Components$selector,
					_narkisr$elm_ui$Admin_Core$SelectOwner,
					_narkisr$elm_ui$Admin_Core$ownersList(_p4),
					_p4.owner))
			]));
};
var _narkisr$elm_ui$Admin_Core$SetOwners = function (a) {
	return {ctor: 'SetOwners', _0: a};
};
var _narkisr$elm_ui$Admin_Core$setSession = F2(
	function (model, _p5) {
		var _p6 = _p5;
		return _narkisr$elm_ui$Users_Session$isUser(_p6) ? _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{owner: _p6.username})) : {
			ctor: '_Tuple2',
			_0: model,
			_1: _narkisr$elm_ui$Users_Model$getUsers(_narkisr$elm_ui$Admin_Core$SetOwners)
		};
	});
var _narkisr$elm_ui$Admin_Core$update = F2(
	function (msg, model) {
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'SetEnvironments':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p7._0,
					model,
					_narkisr$elm_ui$Admin_Core$setEnvironments(model),
					_narkisr$elm_ui$Admin_Core$NoOp);
			case 'SelectEnvironment':
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						model,
						{environment: _p7._0}));
			case 'SetOwners':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p7._0,
					model,
					_narkisr$elm_ui$Admin_Core$setOwners(model),
					_narkisr$elm_ui$Admin_Core$NoOp);
			case 'SelectOwner':
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						model,
						{owner: _p7._0}));
			case 'LoadSession':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p7._0,
					model,
					_narkisr$elm_ui$Admin_Core$setSession(model),
					_narkisr$elm_ui$Admin_Core$NoOp);
			default:
				return _narkisr$elm_ui$Common_Utils$none(model);
		}
	});
var _narkisr$elm_ui$Admin_Core$SetEnvironments = function (a) {
	return {ctor: 'SetEnvironments', _0: a};
};
var _narkisr$elm_ui$Admin_Core$init = {
	ctor: '_Tuple2',
	_0: A5(
		_narkisr$elm_ui$Admin_Core$Model,
		_elm_lang$core$Native_List.fromArray(
			[]),
		'',
		_elm_lang$core$Dict$empty,
		_elm_lang$core$Native_List.fromArray(
			[]),
		''),
	_1: _elm_lang$core$Platform_Cmd$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_narkisr$elm_ui$Environments_List$getEnvironments(_narkisr$elm_ui$Admin_Core$SetEnvironments),
				_narkisr$elm_ui$Users_Session$getSession(_narkisr$elm_ui$Admin_Core$LoadSession)
			]))
};

var _narkisr$elm_ui$Systems_Model_AWS$endpoints = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			{
			ctor: '_Tuple2',
			_0: 'us-east-1',
			_1: {
				ctor: '_Tuple3',
				_0: 'US East (N. Virginia)',
				_1: 'ec2.us-east-1.amazonaws.com',
				_2: _elm_lang$core$Native_List.fromArray(
					['a', 'b', 'd', 'e'])
			}
		},
			{
			ctor: '_Tuple2',
			_0: 'us-west-1',
			_1: {
				ctor: '_Tuple3',
				_0: 'US West (N. California)',
				_1: 'ec2.us-west-1.amazonaws.com',
				_2: _elm_lang$core$Native_List.fromArray(
					['a', 'b'])
			}
		},
			{
			ctor: '_Tuple2',
			_0: 'us-west-2',
			_1: {
				ctor: '_Tuple3',
				_0: 'US West (Oregon)',
				_1: 'ec2.us-west-2.amazonaws.com',
				_2: _elm_lang$core$Native_List.fromArray(
					['a', 'b', 'c'])
			}
		},
			{
			ctor: '_Tuple2',
			_0: 'eu-west-1',
			_1: {
				ctor: '_Tuple3',
				_0: 'EU (Ireland)',
				_1: 'ec2.eu-west-1.amazonaws.com',
				_2: _elm_lang$core$Native_List.fromArray(
					['a', 'b', 'c'])
			}
		},
			{
			ctor: '_Tuple2',
			_0: 'eu-central-1',
			_1: {
				ctor: '_Tuple3',
				_0: 'EU (Frankfurt)',
				_1: 'ec2.eu-central-1.amazonaws.com',
				_2: _elm_lang$core$Native_List.fromArray(
					['a', 'b'])
			}
		},
			{
			ctor: '_Tuple2',
			_0: 'ap-southeast-1',
			_1: {
				ctor: '_Tuple3',
				_0: 'Asia Pacific (Singapore)',
				_1: 'ec2.ap-southeast-1.amazonaws.com',
				_2: _elm_lang$core$Native_List.fromArray(
					['a', 'b'])
			}
		},
			{
			ctor: '_Tuple2',
			_0: 'ap-southeast-2',
			_1: {
				ctor: '_Tuple3',
				_0: 'Asia Pacific (Sydney)',
				_1: 'ec2.ap-southeast-2.amazonaws.com',
				_2: _elm_lang$core$Native_List.fromArray(
					['a', 'b'])
			}
		},
			{
			ctor: '_Tuple2',
			_0: 'ap-northeast-1',
			_1: {
				ctor: '_Tuple3',
				_0: 'Asia Pacific (Tokyo)',
				_1: 'ec2.ap-northeast-1.amazonaws.com',
				_2: _elm_lang$core$Native_List.fromArray(
					['a', 'c'])
			}
		},
			{
			ctor: '_Tuple2',
			_0: 'sa-east-1',
			_1: {
				ctor: '_Tuple3',
				_0: 'South America (Sao Paulo)',
				_1: 'ec2.sa-east-1.amazonaws.com',
				_2: _elm_lang$core$Native_List.fromArray(
					['a', 'b', 'c'])
			}
		}
		]));
var _narkisr$elm_ui$Systems_Model_AWS$instanceTypes = _elm_lang$core$Native_List.fromArray(
	['t1.micro', 'm1.small', 'm1.medium', 'm1.large', 'm1.xlarge', 'm3.medium', 'm3.large', 'm3.xlarge', 'm3.2xlarge', 'c1.medium', 'c1.xlarge', 'c1.xlarge', 'cc2.8xlarge', 'c3.large', 'c3.xlarge', 'c3.2xlarge', 'c3.4xlarge', 'c3.8xlarge', 'r3.large', 'r3.xlarge', 'r3.2xlarge', 'r3.4xlarge', 'r3.8xlarge', 'm2.xlarge', 'm2.2xlarge', 'm2.4xlarge', 'cr1.8xlarge', 'hi1.4xlarge', 'cg1.4xlarge']);
var _narkisr$elm_ui$Systems_Model_AWS$Volume = F5(
	function (a, b, c, d, e) {
		return {type$: a, size: b, iops: c, device: d, clear: e};
	});
var _narkisr$elm_ui$Systems_Model_AWS$emptyVolume = A5(_narkisr$elm_ui$Systems_Model_AWS$Volume, 'Magnetic', 50, _elm_lang$core$Maybe$Nothing, '', false);
var _narkisr$elm_ui$Systems_Model_AWS$Block = F2(
	function (a, b) {
		return {volume: a, device: b};
	});
var _narkisr$elm_ui$Systems_Model_AWS$emptyBlock = A2(_narkisr$elm_ui$Systems_Model_AWS$Block, '', '');
var _narkisr$elm_ui$Systems_Model_AWS$VPC = F3(
	function (a, b, c) {
		return {subnetId: a, vpcId: b, assignPublic: c};
	});
var _narkisr$elm_ui$Systems_Model_AWS$emptyVpc = A3(_narkisr$elm_ui$Systems_Model_AWS$VPC, '', '', false);
var _narkisr$elm_ui$Systems_Model_AWS$AWS = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {instanceType: a, instanceId: b, keyName: c, endpoint: d, availabilityZone: e, securityGroups: f, ebsOptimized: g, volumes: h, blockDevices: i, vpc: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _narkisr$elm_ui$Systems_Model_AWS$emptyAws = function () {
	var instanceType = function () {
		var _p0 = _elm_lang$core$List$head(_narkisr$elm_ui$Systems_Model_AWS$instanceTypes);
		if (_p0.ctor === 'Just') {
			return _p0._0;
		} else {
			return '';
		}
	}();
	var _p1 = A2(
		_elm_lang$core$Maybe$withDefault,
		{
			ctor: '_Tuple3',
			_0: '',
			_1: '',
			_2: _elm_lang$core$Native_List.fromArray(
				[])
		},
		A2(_elm_lang$core$Dict$get, 'us-east-1', _narkisr$elm_ui$Systems_Model_AWS$endpoints));
	var url = _p1._1;
	var justString = _elm_lang$core$Maybe$Just('');
	return _narkisr$elm_ui$Systems_Model_AWS$AWS(instanceType)(_elm_lang$core$Maybe$Nothing)('')(url)(_elm_lang$core$Maybe$Nothing)(
		_elm_lang$core$Maybe$Just(
			_elm_lang$core$Native_List.fromArray(
				[])))(
		_elm_lang$core$Maybe$Just(false))(
		_elm_lang$core$Maybe$Just(
			_elm_lang$core$Native_List.fromArray(
				[])))(
		_elm_lang$core$Maybe$Just(
			_elm_lang$core$Native_List.fromArray(
				[])))(
		_elm_lang$core$Maybe$Just(_narkisr$elm_ui$Systems_Model_AWS$emptyVpc));
}();

var _narkisr$elm_ui$Systems_Model_GCE$zones = _elm_lang$core$Native_List.fromArray(
	['us-east1-b', 'us-east1-c', 'us-east1-d', 'us-central1-a', 'us-central1-b', 'us-central1-c', 'us-central1-f', 'europe-west1-b', 'europe-west1-c', 'europe-west1-d', 'asia-east1-a', 'asia-east1-b', 'asia-east1-c']);
var _narkisr$elm_ui$Systems_Model_GCE$machineTypes = _elm_lang$core$Native_List.fromArray(
	['n1-standard-1', 'n1-standard-2', 'n1-standard-4', 'n1-standard-8', 'n1-standard-16', 'n1-standard-32']);
var _narkisr$elm_ui$Systems_Model_GCE$GCE = F5(
	function (a, b, c, d, e) {
		return {machineType: a, zone: b, tags: c, projectId: d, staticIp: e};
	});
var _narkisr$elm_ui$Systems_Model_GCE$emptyGce = function () {
	var zone = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(_narkisr$elm_ui$Systems_Model_GCE$zones));
	var type$ = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(_narkisr$elm_ui$Systems_Model_GCE$machineTypes));
	return A5(
		_narkisr$elm_ui$Systems_Model_GCE$GCE,
		type$,
		zone,
		_elm_lang$core$Maybe$Just(
			_elm_lang$core$Native_List.fromArray(
				[])),
		'',
		_elm_lang$core$Maybe$Just(''));
}();

var _narkisr$elm_ui$Systems_Model_Digital$regions = _elm_lang$core$Native_List.fromArray(
	['lon1', 'nyc1', 'ams1', 'sfo1', 'nyc2', 'ams2', 'sgp1']);
var _narkisr$elm_ui$Systems_Model_Digital$sizes = _elm_lang$core$Native_List.fromArray(
	['512mb', '1gb', '2gb', '4gb', '8gb', '16gb', '32gb', '48gb', '64gb']);
var _narkisr$elm_ui$Systems_Model_Digital$Digital = F3(
	function (a, b, c) {
		return {size: a, region: b, privateNetworking: c};
	});
var _narkisr$elm_ui$Systems_Model_Digital$emptyDigital = A3(
	_narkisr$elm_ui$Systems_Model_Digital$Digital,
	A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(_narkisr$elm_ui$Systems_Model_Digital$sizes)),
	A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(_narkisr$elm_ui$Systems_Model_Digital$regions)),
	false);

var _narkisr$elm_ui$Systems_Model_Openstack$Volume = F3(
	function (a, b, c) {
		return {device: a, size: b, clear: c};
	});
var _narkisr$elm_ui$Systems_Model_Openstack$emptyVolume = A3(_narkisr$elm_ui$Systems_Model_Openstack$Volume, '', 0, false);
var _narkisr$elm_ui$Systems_Model_Openstack$Openstack = F8(
	function (a, b, c, d, e, f, g, h) {
		return {flavor: a, tenant: b, keyName: c, floatingIp: d, floatingIpPool: e, securityGroups: f, networks: g, volumes: h};
	});
var _narkisr$elm_ui$Systems_Model_Openstack$emptyOpenstack = A8(
	_narkisr$elm_ui$Systems_Model_Openstack$Openstack,
	'',
	'',
	'',
	_elm_lang$core$Maybe$Nothing,
	_elm_lang$core$Maybe$Nothing,
	_elm_lang$core$Maybe$Nothing,
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Maybe$Nothing);

var _narkisr$elm_ui$Systems_Model_Physical$Physical = F2(
	function (a, b) {
		return {mac: a, broadcast: b};
	});
var _narkisr$elm_ui$Systems_Model_Physical$emptyPhysical = A2(_narkisr$elm_ui$Systems_Model_Physical$Physical, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);

var _narkisr$elm_ui$Systems_Model_KVM$KVM = function (a) {
	return {node: a};
};
var _narkisr$elm_ui$Systems_Model_KVM$emptyKVM = _narkisr$elm_ui$Systems_Model_KVM$KVM('');

var _narkisr$elm_ui$Systems_Model_Common$Machine = F7(
	function (a, b, c, d, e, f, g) {
		return {user: a, hostname: b, domain: c, ip: d, os: e, ram: f, cpu: g};
	});
var _narkisr$elm_ui$Systems_Model_Common$emptyMachine = A7(_narkisr$elm_ui$Systems_Model_Common$Machine, '', '', '', _elm_lang$core$Maybe$Nothing, '', _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
var _narkisr$elm_ui$Systems_Model_Common$resourcedMachine = F2(
	function (cpu, ram) {
		return A7(
			_narkisr$elm_ui$Systems_Model_Common$Machine,
			'',
			'',
			'',
			_elm_lang$core$Maybe$Just(''),
			'',
			_elm_lang$core$Maybe$Just(ram),
			_elm_lang$core$Maybe$Just(cpu));
	});
var _narkisr$elm_ui$Systems_Model_Common$System = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {owner: a, env: b, type$: c, machine: d, aws: e, gce: f, digital: g, openstack: h, physical: i, kvm: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _narkisr$elm_ui$Systems_Model_Common$emptySystem = function () {
	var base = A3(_narkisr$elm_ui$Systems_Model_Common$System, '', '', '');
	return A7(base, _narkisr$elm_ui$Systems_Model_Common$emptyMachine, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
}();

var _narkisr$elm_ui$Systems_Decoders$machineDecoder = A8(
	_elm_lang$core$Json_Decode$object7,
	_narkisr$elm_ui$Systems_Model_Common$Machine,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'user', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'hostname', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'domain', _elm_lang$core$Json_Decode$string),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'ip', _elm_lang$core$Json_Decode$string)),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'os', _elm_lang$core$Json_Decode$string),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'ram', _elm_lang$core$Json_Decode$int)),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'cpu', _elm_lang$core$Json_Decode$int)));
var _narkisr$elm_ui$Systems_Decoders$openstackVolumeDecoder = A4(
	_elm_lang$core$Json_Decode$object3,
	_narkisr$elm_ui$Systems_Model_Openstack$Volume,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'device', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'size', _elm_lang$core$Json_Decode$int),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'clear', _elm_lang$core$Json_Decode$bool));
var _narkisr$elm_ui$Systems_Decoders$openstackDecoder = A2(
	_narkisr$elm_ui$Common_Http$apply,
	A2(
		_narkisr$elm_ui$Common_Http$apply,
		A2(
			_narkisr$elm_ui$Common_Http$apply,
			A2(
				_narkisr$elm_ui$Common_Http$apply,
				A2(
					_narkisr$elm_ui$Common_Http$apply,
					A2(
						_narkisr$elm_ui$Common_Http$apply,
						A2(
							_narkisr$elm_ui$Common_Http$apply,
							A2(
								_elm_lang$core$Json_Decode$map,
								_narkisr$elm_ui$Systems_Model_Openstack$Openstack,
								A2(_elm_lang$core$Json_Decode_ops[':='], 'flavor', _elm_lang$core$Json_Decode$string)),
							A2(_elm_lang$core$Json_Decode_ops[':='], 'tenant', _elm_lang$core$Json_Decode$string)),
						A2(_elm_lang$core$Json_Decode_ops[':='], 'key-name', _elm_lang$core$Json_Decode$string)),
					_elm_lang$core$Json_Decode$maybe(
						A2(_elm_lang$core$Json_Decode_ops[':='], 'floating-ip', _elm_lang$core$Json_Decode$string))),
				_elm_lang$core$Json_Decode$maybe(
					A2(_elm_lang$core$Json_Decode_ops[':='], 'floating-ip-pool', _elm_lang$core$Json_Decode$string))),
			_elm_lang$core$Json_Decode$maybe(
				A2(
					_elm_lang$core$Json_Decode_ops[':='],
					'security-groups',
					_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)))),
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'networks',
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))),
	_elm_lang$core$Json_Decode$maybe(
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'volumes',
			_elm_lang$core$Json_Decode$list(_narkisr$elm_ui$Systems_Decoders$openstackVolumeDecoder))));
var _narkisr$elm_ui$Systems_Decoders$kvmDecoder = A2(
	_elm_lang$core$Json_Decode$object1,
	_narkisr$elm_ui$Systems_Model_KVM$KVM,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'node', _elm_lang$core$Json_Decode$string));
var _narkisr$elm_ui$Systems_Decoders$physicalDecoder = A3(
	_elm_lang$core$Json_Decode$object2,
	_narkisr$elm_ui$Systems_Model_Physical$Physical,
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'mac', _elm_lang$core$Json_Decode$string)),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'broadcast', _elm_lang$core$Json_Decode$string)));
var _narkisr$elm_ui$Systems_Decoders$digitalDecoder = A4(
	_elm_lang$core$Json_Decode$object3,
	_narkisr$elm_ui$Systems_Model_Digital$Digital,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'size', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'region', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'private-networking', _elm_lang$core$Json_Decode$bool));
var _narkisr$elm_ui$Systems_Decoders$gceDecoder = A6(
	_elm_lang$core$Json_Decode$object5,
	_narkisr$elm_ui$Systems_Model_GCE$GCE,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'machine-type', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'zone', _elm_lang$core$Json_Decode$string),
	_elm_lang$core$Json_Decode$maybe(
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'tags',
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'project-id', _elm_lang$core$Json_Decode$string),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'static-ip', _elm_lang$core$Json_Decode$string)));
var _narkisr$elm_ui$Systems_Decoders$awsVolumeDecoder = A6(
	_elm_lang$core$Json_Decode$object5,
	_narkisr$elm_ui$Systems_Model_AWS$Volume,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'volume-type', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'size', _elm_lang$core$Json_Decode$int),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'iops', _elm_lang$core$Json_Decode$int)),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'device', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'clear', _elm_lang$core$Json_Decode$bool));
var _narkisr$elm_ui$Systems_Decoders$blockDecoder = A3(
	_elm_lang$core$Json_Decode$object2,
	_narkisr$elm_ui$Systems_Model_AWS$Block,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'volume', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'device', _elm_lang$core$Json_Decode$string));
var _narkisr$elm_ui$Systems_Decoders$vpcDecoder = A4(
	_elm_lang$core$Json_Decode$object3,
	_narkisr$elm_ui$Systems_Model_AWS$VPC,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'subnetId', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'vpcId', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'assignIp', _elm_lang$core$Json_Decode$bool));
var _narkisr$elm_ui$Systems_Decoders$awsDecoder = A2(
	_narkisr$elm_ui$Common_Http$apply,
	A2(
		_narkisr$elm_ui$Common_Http$apply,
		A2(
			_narkisr$elm_ui$Common_Http$apply,
			A2(
				_narkisr$elm_ui$Common_Http$apply,
				A2(
					_narkisr$elm_ui$Common_Http$apply,
					A2(
						_narkisr$elm_ui$Common_Http$apply,
						A2(
							_narkisr$elm_ui$Common_Http$apply,
							A2(
								_narkisr$elm_ui$Common_Http$apply,
								A2(
									_narkisr$elm_ui$Common_Http$apply,
									A2(
										_elm_lang$core$Json_Decode$map,
										_narkisr$elm_ui$Systems_Model_AWS$AWS,
										A2(_elm_lang$core$Json_Decode_ops[':='], 'instance-type', _elm_lang$core$Json_Decode$string)),
									_elm_lang$core$Json_Decode$maybe(
										A2(_elm_lang$core$Json_Decode_ops[':='], 'instance-id', _elm_lang$core$Json_Decode$string))),
								A2(_elm_lang$core$Json_Decode_ops[':='], 'key-name', _elm_lang$core$Json_Decode$string)),
							A2(_elm_lang$core$Json_Decode_ops[':='], 'endpoint', _elm_lang$core$Json_Decode$string)),
						_elm_lang$core$Json_Decode$maybe(
							A2(_elm_lang$core$Json_Decode_ops[':='], 'availability-zone', _elm_lang$core$Json_Decode$string))),
					_elm_lang$core$Json_Decode$maybe(
						A2(
							_elm_lang$core$Json_Decode_ops[':='],
							'security-groups',
							_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)))),
				_elm_lang$core$Json_Decode$maybe(
					A2(_elm_lang$core$Json_Decode_ops[':='], 'ebs-optimized', _elm_lang$core$Json_Decode$bool))),
			_elm_lang$core$Json_Decode$maybe(
				A2(
					_elm_lang$core$Json_Decode_ops[':='],
					'volumes',
					_elm_lang$core$Json_Decode$list(_narkisr$elm_ui$Systems_Decoders$awsVolumeDecoder)))),
		_elm_lang$core$Json_Decode$maybe(
			A2(
				_elm_lang$core$Json_Decode_ops[':='],
				'block-devices',
				_elm_lang$core$Json_Decode$list(_narkisr$elm_ui$Systems_Decoders$blockDecoder)))),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'vpc', _narkisr$elm_ui$Systems_Decoders$vpcDecoder)));
var _narkisr$elm_ui$Systems_Decoders$systemDecoder = A2(
	_narkisr$elm_ui$Common_Http$apply,
	A2(
		_narkisr$elm_ui$Common_Http$apply,
		A2(
			_narkisr$elm_ui$Common_Http$apply,
			A2(
				_narkisr$elm_ui$Common_Http$apply,
				A2(
					_narkisr$elm_ui$Common_Http$apply,
					A2(
						_narkisr$elm_ui$Common_Http$apply,
						A2(
							_narkisr$elm_ui$Common_Http$apply,
							A2(
								_narkisr$elm_ui$Common_Http$apply,
								A2(
									_narkisr$elm_ui$Common_Http$apply,
									A2(
										_elm_lang$core$Json_Decode$map,
										_narkisr$elm_ui$Systems_Model_Common$System,
										A2(_elm_lang$core$Json_Decode_ops[':='], 'owner', _elm_lang$core$Json_Decode$string)),
									A2(_elm_lang$core$Json_Decode_ops[':='], 'env', _elm_lang$core$Json_Decode$string)),
								A2(_elm_lang$core$Json_Decode_ops[':='], 'type', _elm_lang$core$Json_Decode$string)),
							A2(_elm_lang$core$Json_Decode_ops[':='], 'machine', _narkisr$elm_ui$Systems_Decoders$machineDecoder)),
						_elm_lang$core$Json_Decode$maybe(
							A2(_elm_lang$core$Json_Decode_ops[':='], 'aws', _narkisr$elm_ui$Systems_Decoders$awsDecoder))),
					_elm_lang$core$Json_Decode$maybe(
						A2(_elm_lang$core$Json_Decode_ops[':='], 'gce', _narkisr$elm_ui$Systems_Decoders$gceDecoder))),
				_elm_lang$core$Json_Decode$maybe(
					A2(_elm_lang$core$Json_Decode_ops[':='], 'digital-ocean', _narkisr$elm_ui$Systems_Decoders$digitalDecoder))),
			_elm_lang$core$Json_Decode$maybe(
				A2(_elm_lang$core$Json_Decode_ops[':='], 'openstack', _narkisr$elm_ui$Systems_Decoders$openstackDecoder))),
		_elm_lang$core$Json_Decode$maybe(
			A2(_elm_lang$core$Json_Decode_ops[':='], 'physical', _narkisr$elm_ui$Systems_Decoders$physicalDecoder))),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'kvm', _narkisr$elm_ui$Systems_Decoders$kvmDecoder)));

var _narkisr$elm_ui$Pager$pageCount = function (model) {
	return _elm_lang$core$Basics$ceiling(model.total / model.offset);
};
var _narkisr$elm_ui$Pager$update = F2(
	function (msg, _p0) {
		var _p1 = _p0;
		var _p8 = _p1.slice;
		var _p7 = _p1.page;
		var _p6 = _p1;
		var _p5 = _p1.maxButtons;
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'NextPage':
				var _p3 = _p2._0;
				var newModel = _elm_lang$core$Native_Utils.update(
					_p6,
					{page: _p3});
				var end = _p8 + _p5;
				var start = _p8;
				return ((_elm_lang$core$Native_Utils.cmp(start, _p3) < 0) && (_elm_lang$core$Native_Utils.cmp(_p3, end) < 0)) ? newModel : (((_elm_lang$core$Native_Utils.cmp(_p3, end) > -1) && (_elm_lang$core$Native_Utils.cmp(
					_p3 + _p5,
					_narkisr$elm_ui$Pager$pageCount(_p6)) > -1)) ? _elm_lang$core$Native_Utils.update(
					newModel,
					{slice: _p3 - _p5}) : ((_elm_lang$core$Native_Utils.cmp(_p3, end) > -1) ? _elm_lang$core$Native_Utils.update(
					newModel,
					{slice: _p3 - 1}) : (_elm_lang$core$Native_Utils.eq(_p3, 1) ? _elm_lang$core$Native_Utils.update(
					newModel,
					{slice: 0}) : ((_elm_lang$core$Native_Utils.cmp(_p3, start) < 1) ? _elm_lang$core$Native_Utils.update(
					newModel,
					{slice: _p3 - 1}) : newModel))));
			case 'UpdateTotal':
				var _p4 = _p2._0;
				return (_elm_lang$core$Native_Utils.cmp(
					_p4,
					_elm_lang$core$Basics$toFloat(_p7)) < 0) ? _elm_lang$core$Native_Utils.update(
					_p6,
					{total: _p4, page: 1}) : _elm_lang$core$Native_Utils.update(
					_p6,
					{total: _p4, page: _p7});
			default:
				return _p6;
		}
	});
var _narkisr$elm_ui$Pager$init = {total: 0, page: 1, offset: 10, maxButtons: 5, slice: 0};
var _narkisr$elm_ui$Pager$Model = F5(
	function (a, b, c, d, e) {
		return {total: a, page: b, offset: c, maxButtons: d, slice: e};
	});
var _narkisr$elm_ui$Pager$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Pager$UpdateTotal = function (a) {
	return {ctor: 'UpdateTotal', _0: a};
};
var _narkisr$elm_ui$Pager$NextPage = function (a) {
	return {ctor: 'NextPage', _0: a};
};
var _narkisr$elm_ui$Pager$arrows = F2(
	function (shapes, active) {
		var _p9 = shapes;
		var firstShape = _p9._0._0;
		var firstPos = _p9._0._1;
		var secondShape = _p9._1._0;
		var secondPos = _p9._1._1;
		var isActive = active ? '' : 'disabled';
		var operation = function (p) {
			return active ? _narkisr$elm_ui$Pager$NextPage(p) : _narkisr$elm_ui$Pager$NoOp;
		};
		return _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$li,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class(isActive)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$a,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(
								operation(firstPos))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(firstShape)
							]))
					])),
				A2(
				_elm_lang$html$Html$li,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class(isActive)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$a,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Events$onClick(
								operation(secondPos))
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(secondShape)
							]))
					]))
			]);
	});
var _narkisr$elm_ui$Pager$pageLinks = function (_p10) {
	var _p11 = _p10;
	var _p14 = _p11.slice;
	var _p13 = _p11;
	var _p12 = _p11.maxButtons;
	var last = A2(
		_narkisr$elm_ui$Pager$arrows,
		{
			ctor: '_Tuple2',
			_0: {ctor: '_Tuple2', _0: '<<', _1: 1},
			_1: {ctor: '_Tuple2', _0: '<', _1: _p13.page - 1}
		},
		_elm_lang$core$Native_Utils.cmp(_p13.page, 1) > 0);
	var next = A2(
		_narkisr$elm_ui$Pager$arrows,
		{
			ctor: '_Tuple2',
			_0: {ctor: '_Tuple2', _0: '>', _1: _p13.page + 1},
			_1: {
				ctor: '_Tuple2',
				_0: '>>',
				_1: _narkisr$elm_ui$Pager$pageCount(_p13)
			}
		},
		_elm_lang$core$Native_Utils.cmp(
			_p13.page,
			_narkisr$elm_ui$Pager$pageCount(_p13)) < 0);
	var isActive = function (page) {
		return _elm_lang$core$Native_Utils.eq(_p13.page, page) ? 'active' : '';
	};
	var pageLink = function (page) {
		return A2(
			_elm_lang$html$Html$li,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class(
					isActive(page))
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$a,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Events$onClick(
							_narkisr$elm_ui$Pager$NextPage(page))
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(
							_elm_lang$core$Basics$toString(page))
						]))
				]));
	};
	var links = A2(
		_elm_lang$core$Array$map,
		function (p) {
			return pageLink(p + 1);
		},
		A2(
			_elm_lang$core$Array$initialize,
			_narkisr$elm_ui$Pager$pageCount(_p13),
			_elm_lang$core$Basics$identity));
	var sliced = A3(_elm_lang$core$Array$slice, _p14, _p14 + _p12, links);
	var windowed = (_elm_lang$core$Native_Utils.cmp(
		_elm_lang$core$Array$length(links),
		_p12) > 0) ? sliced : links;
	return _elm_lang$core$List$concat(
		_elm_lang$core$Native_List.fromArray(
			[
				last,
				_elm_lang$core$Array$toList(windowed),
				next
			]));
};
var _narkisr$elm_ui$Pager$view = function (model) {
	return A2(
		_elm_lang$html$Html$p,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('text-center')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$nav,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$ul,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('pagination')
							]),
						_narkisr$elm_ui$Pager$pageLinks(model))
					]))
			]));
};

var _narkisr$elm_ui$Table$withCaption = F3(
	function (enabled, title, body) {
		return enabled ? A2(
			_elm_lang$core$List$append,
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$caption,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(title)
						]))
				]),
			body) : body;
	});
var _narkisr$elm_ui$Table$headersMap = function (keys) {
	return A2(
		_elm_lang$core$List$map,
		function (k) {
			return A2(
				_elm_lang$html$Html$th,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(k)
					]));
		},
		keys);
};
var _narkisr$elm_ui$Table$update = F2(
	function (msg, _p0) {
		var _p1 = _p0;
		var _p7 = _p1.selected;
		var _p6 = _p1;
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'UpdateRows':
				return _elm_lang$core$Native_Utils.update(
					_p6,
					{rows: _p2._0, selected: _elm_lang$core$Set$empty});
			case 'SelectAll':
				var all = _elm_lang$core$Set$fromList(
					A2(
						_elm_lang$core$List$map,
						function (_p3) {
							var _p4 = _p3;
							return _p4._0;
						},
						_p1.rows));
				return _elm_lang$core$Native_Utils.eq(_p7, all) ? _elm_lang$core$Native_Utils.update(
					_p6,
					{selected: _elm_lang$core$Set$empty}) : _elm_lang$core$Native_Utils.update(
					_p6,
					{selected: all});
			case 'Select':
				var _p5 = _p2._0;
				return A2(_elm_lang$core$Set$member, _p5, _p6.selected) ? _elm_lang$core$Native_Utils.update(
					_p6,
					{
						selected: A2(_elm_lang$core$Set$remove, _p5, _p7)
					}) : _elm_lang$core$Native_Utils.update(
					_p6,
					{
						selected: A2(_elm_lang$core$Set$insert, _p5, _p7)
					});
			default:
				return _p6;
		}
	});
var _narkisr$elm_ui$Table$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {id: a, caption: b, rows: c, headers: d, selected: e, title: f, rowFn: g};
	});
var _narkisr$elm_ui$Table$init = F5(
	function (id, caption, hs, f, title) {
		return A7(
			_narkisr$elm_ui$Table$Model,
			id,
			caption,
			_elm_lang$core$Native_List.fromArray(
				[]),
			hs,
			_elm_lang$core$Set$empty,
			title,
			f);
	});
var _narkisr$elm_ui$Table$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Table$UpdateRows = function (a) {
	return {ctor: 'UpdateRows', _0: a};
};
var _narkisr$elm_ui$Table$SelectAll = {ctor: 'SelectAll'};
var _narkisr$elm_ui$Table$View = function (a) {
	return {ctor: 'View', _0: a};
};
var _narkisr$elm_ui$Table$Select = function (a) {
	return {ctor: 'Select', _0: a};
};
var _narkisr$elm_ui$Table$applySelect = F3(
	function (model, id, cols) {
		var background = A2(_elm_lang$core$Set$member, id, model.selected) ? '#e7e7e7' : '';
		return A2(
			_elm_lang$html$Html$tr,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$style(
					_elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: 'background', _1: background}
						])),
					_elm_lang$html$Html_Events$onClick(
					_narkisr$elm_ui$Table$Select(id)),
					_elm_lang$html$Html_Events$onDoubleClick(
					_narkisr$elm_ui$Table$View(id))
				]),
			cols);
	});
var _narkisr$elm_ui$Table$view = function (model) {
	return A2(
		_elm_lang$html$Html$table,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('table table-bordered'),
				_elm_lang$html$Html_Attributes$id(model.id)
			]),
		A3(
			_narkisr$elm_ui$Table$withCaption,
			model.caption,
			model.title,
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$thead,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$html$Html$tr,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html_Events$onClick(_narkisr$elm_ui$Table$SelectAll)
								]),
							_narkisr$elm_ui$Table$headersMap(model.headers))
						])),
					A2(
					_elm_lang$html$Html$tbody,
					_elm_lang$core$Native_List.fromArray(
						[]),
					A2(
						_elm_lang$core$List$map,
						function (_p8) {
							var _p9 = _p8;
							var _p10 = _p9._0;
							return A3(
								_narkisr$elm_ui$Table$applySelect,
								model,
								_p10,
								A2(model.rowFn, _p10, _p9._1));
						},
						model.rows))
				])));
};

var _narkisr$elm_ui$Search$update = F2(
	function (msg, model) {
		var _p0 = msg;
		if (_p0.ctor === 'Result') {
			if (_p0._0 === true) {
				return _elm_lang$core$Native_Utils.update(
					model,
					{parsed: _p0._1.result, input: _p0._1.source, error: ''});
			} else {
				return _elm_lang$core$Native_Utils.update(
					model,
					{error: _p0._1.message, input: _p0._1.source});
			}
		} else {
			return model;
		}
	});
var _narkisr$elm_ui$Search$init = {input: '', parsed: '', error: ''};
var _narkisr$elm_ui$Search$Model = F3(
	function (a, b, c) {
		return {input: a, parsed: b, error: c};
	});
var _narkisr$elm_ui$Search$ParseResult = F3(
	function (a, b, c) {
		return {message: a, source: b, result: c};
	});
var _narkisr$elm_ui$Search$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Search$Result = F2(
	function (a, b) {
		return {ctor: 'Result', _0: a, _1: b};
	});
var _narkisr$elm_ui$Search$Parse = function (a) {
	return {ctor: 'Parse', _0: a};
};
var _narkisr$elm_ui$Search$searchForm = function (model) {
	return A2(
		_elm_lang$html$Html$form,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('form-horizontal')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('form-group'),
						A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$label,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$for('systemSearch'),
								_elm_lang$html$Html_Attributes$class('col-sm-1 control-label')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Filter:')
							])),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('col-sm-6')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$input,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$class('form-control'),
										_elm_lang$html$Html_Attributes$type$('search'),
										_elm_lang$html$Html_Attributes$id('systemSearch'),
										_elm_lang$html$Html_Attributes$placeholder(''),
										_elm_lang$html$Html_Events$onInput(_narkisr$elm_ui$Search$Parse)
									]),
								_elm_lang$core$Native_List.fromArray(
									[]))
							]))
					]))
			]));
};
var _narkisr$elm_ui$Search$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('container-fluid')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('col-md-8 col-md-offset-2')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_narkisr$elm_ui$Search$searchForm(model)
							]))
					]))
			]));
};

var _narkisr$elm_ui$Systems_List$systemPair = A3(
	_elm_lang$core$Json_Decode$tuple2,
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}),
	_elm_lang$core$Json_Decode$string,
	_narkisr$elm_ui$Systems_Decoders$systemDecoder);
var _narkisr$elm_ui$Systems_List$systemPage = A3(
	_elm_lang$core$Json_Decode$object2,
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'meta',
		_elm_lang$core$Json_Decode$dict(_elm_lang$core$Json_Decode$int)),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'systems',
		_elm_lang$core$Json_Decode$list(_narkisr$elm_ui$Systems_List$systemPair)));
var _narkisr$elm_ui$Systems_List$flash = function (model) {
	var result = _elm_lang$html$Html$div(
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('callout callout-danger')
			]));
	var _p0 = model.error;
	switch (_p0.ctor) {
		case 'NoError':
			return A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[]));
		case 'NoSystemSelected':
			return A2(
				_narkisr$elm_ui$Common_Components$callout,
				'danger',
				_narkisr$elm_ui$Common_Components$info('Please select a system first'));
		default:
			return A2(
				_narkisr$elm_ui$Common_Components$callout,
				'danger',
				_narkisr$elm_ui$Common_Components$info(_p0._0));
	}
};
var _narkisr$elm_ui$Systems_List$systemRow = F2(
	function (id, _p1) {
		var _p2 = _p1;
		return _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(id)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						function (_) {
							return _.hostname;
						}(_p2.machine))
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p2.type$)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p2.env)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p2.owner)
					]))
			]);
	});
var _narkisr$elm_ui$Systems_List$setSystems = F2(
	function (model, _p3) {
		var _p4 = _p3;
		var newTable = A2(
			_narkisr$elm_ui$Table$update,
			_narkisr$elm_ui$Table$UpdateRows(_p4._1),
			model.table);
		var total = A2(
			_elm_lang$core$Maybe$withDefault,
			0,
			A2(_elm_lang$core$Dict$get, 'total', _p4._0));
		var newPager = A2(
			_narkisr$elm_ui$Pager$update,
			_narkisr$elm_ui$Pager$UpdateTotal(
				_elm_lang$core$Basics$toFloat(total)),
			model.pager);
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{systems: _p4, pager: newPager, table: newTable}));
	});
var _narkisr$elm_ui$Systems_List$Model = F5(
	function (a, b, c, d, e) {
		return {error: a, systems: b, pager: c, table: d, search: e};
	});
var _narkisr$elm_ui$Systems_List$NoError = {ctor: 'NoError'};
var _narkisr$elm_ui$Systems_List$SearchParseFailed = function (a) {
	return {ctor: 'SearchParseFailed', _0: a};
};
var _narkisr$elm_ui$Systems_List$NoSystemSelected = {ctor: 'NoSystemSelected'};
var _narkisr$elm_ui$Systems_List$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Systems_List$Searching = function (a) {
	return {ctor: 'Searching', _0: a};
};
var _narkisr$elm_ui$Systems_List$LoadPage = function (a) {
	return {ctor: 'LoadPage', _0: a};
};
var _narkisr$elm_ui$Systems_List$GotoPage = function (a) {
	return {ctor: 'GotoPage', _0: a};
};
var _narkisr$elm_ui$Systems_List$view = function (model) {
	var _p5 = model.systems;
	var meta = _p5._0;
	var systems = _p5._1;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('col-md-12')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html_App$map,
								_narkisr$elm_ui$Systems_List$Searching,
								_narkisr$elm_ui$Search$view(model.search))
							]))
					])),
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				_elm_lang$core$Native_List.fromArray(
					[
						_narkisr$elm_ui$Systems_List$flash(model),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('col-md-offset-1 col-md-10')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_circuithub$elm_bootstrap_html$Bootstrap_Html$panelDefault_(
								_elm_lang$core$Native_List.fromArray(
									[
										A2(
										_elm_lang$html$Html_App$map,
										_narkisr$elm_ui$Systems_List$LoadPage,
										_narkisr$elm_ui$Table$view(model.table))
									]))
							]))
					])),
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html_App$map,
						_narkisr$elm_ui$Systems_List$GotoPage,
						_narkisr$elm_ui$Pager$view(model.pager))
					]))
			]));
};
var _narkisr$elm_ui$Systems_List$SetSystems = function (a) {
	return {ctor: 'SetSystems', _0: a};
};
var _narkisr$elm_ui$Systems_List$getSystems = F2(
	function (page, offset) {
		return A3(
			_elm_lang$core$Task$perform,
			_elm_community$basics_extra$Basics_Extra$never,
			_narkisr$elm_ui$Systems_List$SetSystems,
			_elm_lang$core$Task$toResult(
				A2(
					_narkisr$elm_ui$Common_Http$getJson,
					_narkisr$elm_ui$Systems_List$systemPage,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/systems?page=',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(page),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'&offset=',
								_elm_lang$core$Basics$toString(offset)))))));
	});
var _narkisr$elm_ui$Systems_List$init = function () {
	var search = _narkisr$elm_ui$Search$init;
	var table = A5(
		_narkisr$elm_ui$Table$init,
		'systemsListing',
		true,
		_elm_lang$core$Native_List.fromArray(
			['#', 'Hostname', 'Type', 'Env', 'Owner']),
		_narkisr$elm_ui$Systems_List$systemRow,
		'Systems');
	var systems = {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Dict$empty,
		_1: _elm_lang$core$Native_List.fromArray(
			[
				{ctor: '_Tuple2', _0: '', _1: _narkisr$elm_ui$Systems_Model_Common$emptySystem}
			])
	};
	return {
		ctor: '_Tuple2',
		_0: A5(_narkisr$elm_ui$Systems_List$Model, _narkisr$elm_ui$Systems_List$NoError, systems, _narkisr$elm_ui$Pager$init, table, search),
		_1: A2(_narkisr$elm_ui$Systems_List$getSystems, 1, 10)
	};
}();
var _narkisr$elm_ui$Systems_List$getSystemsQuery = F3(
	function (page, offset, query) {
		return A3(
			_elm_lang$core$Task$perform,
			_elm_community$basics_extra$Basics_Extra$never,
			_narkisr$elm_ui$Systems_List$SetSystems,
			_elm_lang$core$Task$toResult(
				A2(
					_narkisr$elm_ui$Common_Http$getJson,
					_narkisr$elm_ui$Systems_List$systemPage,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/systems/query?page=',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(page),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'&offset=',
								A2(
									_elm_lang$core$Basics_ops['++'],
									_elm_lang$core$Basics$toString(offset),
									A2(_elm_lang$core$Basics_ops['++'], '&query=', query))))))));
	});
var _narkisr$elm_ui$Systems_List$update = F2(
	function (msg, _p6) {
		var _p7 = _p6;
		var _p14 = _p7;
		var _p8 = msg;
		switch (_p8.ctor) {
			case 'SetSystems':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p8._0,
					_p14,
					_narkisr$elm_ui$Systems_List$setSystems(_p14),
					_narkisr$elm_ui$Systems_List$NoOp);
			case 'GotoPage':
				var _p11 = _p8._0;
				var _p9 = _p11;
				if (_p9.ctor === 'NextPage') {
					var _p10 = _p9._0;
					var newPager = A2(_narkisr$elm_ui$Pager$update, _p11, _p14.pager);
					return _elm_lang$core$String$isEmpty(_p14.search.input) ? {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p14,
							{pager: newPager}),
						_1: A2(_narkisr$elm_ui$Systems_List$getSystems, _p10, 10)
					} : {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p14,
							{pager: newPager}),
						_1: A3(_narkisr$elm_ui$Systems_List$getSystemsQuery, _p10, 10, _p14.search.parsed)
					};
				} else {
					return _narkisr$elm_ui$Common_Utils$none(_p14);
				}
			case 'Searching':
				var _p13 = _p8._0;
				var newSearch = A2(_narkisr$elm_ui$Search$update, _p13, _p14.search);
				var _p12 = _p13;
				if (_p12.ctor === 'Result') {
					if (_p12._0 === true) {
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								_p14,
								{search: newSearch, error: _narkisr$elm_ui$Systems_List$NoError}),
							_1: A3(_narkisr$elm_ui$Systems_List$getSystemsQuery, _p14.pager.page, 10, newSearch.parsed)
						};
					} else {
						return _elm_lang$core$String$isEmpty(newSearch.input) ? {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								_p14,
								{search: newSearch, error: _narkisr$elm_ui$Systems_List$NoError}),
							_1: A2(_narkisr$elm_ui$Systems_List$getSystems, _p14.pager.page, 10)
						} : _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p14,
								{
									search: newSearch,
									error: _narkisr$elm_ui$Systems_List$SearchParseFailed(newSearch.error)
								}));
					}
				} else {
					return _narkisr$elm_ui$Common_Utils$none(_p14);
				}
			case 'LoadPage':
				var newTable = A2(_narkisr$elm_ui$Table$update, _p8._0, _p14.table);
				return (_elm_lang$core$Native_Utils.eq(_p7.error, _narkisr$elm_ui$Systems_List$NoSystemSelected) && (!_elm_lang$core$Native_Utils.eq(newTable.selected, _elm_lang$core$Set$empty))) ? _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p14,
						{table: newTable, error: _narkisr$elm_ui$Systems_List$NoError})) : _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p14,
						{table: newTable}));
			default:
				return _narkisr$elm_ui$Common_Utils$none(_p14);
		}
	});

var _narkisr$elm_ui$Common_Summary$tablizedRow = F2(
	function (props, v) {
		return A2(
			_elm_lang$html$Html$tr,
			_elm_lang$core$Native_List.fromArray(
				[]),
			A2(
				_elm_lang$core$List$map,
				function (prop) {
					return A2(
						_elm_lang$html$Html$td,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(
								prop(v))
							]));
				},
				props));
	});
var _narkisr$elm_ui$Common_Summary$tablizedSection = F4(
	function (title, headers, rows, props) {
		return _elm_lang$core$Basics$not(
			_elm_lang$core$List$isEmpty(rows)) ? _elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(title),
				A2(
				_elm_lang$html$Html$table,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('table'),
						_elm_lang$html$Html_Attributes$id(title)
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$thead,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$tr,
								_elm_lang$core$Native_List.fromArray(
									[]),
								A2(
									_elm_lang$core$List$map,
									function (k) {
										return A2(
											_elm_lang$html$Html$th,
											_elm_lang$core$Native_List.fromArray(
												[]),
											_elm_lang$core$Native_List.fromArray(
												[
													_elm_lang$html$Html$text(k)
												]));
									},
									headers))
							])),
						A2(
						_elm_lang$html$Html$tbody,
						_elm_lang$core$Native_List.fromArray(
							[]),
						A2(
							_elm_lang$core$List$map,
							function (value) {
								return A2(_narkisr$elm_ui$Common_Summary$tablizedRow, props, value);
							},
							rows))
					]))
			]) : _elm_lang$core$Native_List.fromArray(
			[]);
	});
var _narkisr$elm_ui$Common_Summary$summaryPanel = function (contents) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('panel col-md-4 col-md-offset-1')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('panel-body')
						]),
					contents)
				]))
		]);
};
var _narkisr$elm_ui$Common_Summary$overviewSection = F3(
	function (title, headers, values) {
		return _elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(title),
				A2(
				_elm_lang$html$Html$ul,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$style(
						_elm_lang$core$Native_List.fromArray(
							[
								{ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'}
							]))
					]),
				A3(
					_elm_lang$core$List$map2,
					F2(
						function (title, value) {
							return A2(
								_elm_lang$html$Html$li,
								_elm_lang$core$Native_List.fromArray(
									[]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text(
										A2(
											_elm_lang$core$Basics_ops['++'],
											title,
											A2(_elm_lang$core$Basics_ops['++'], ': ', value)))
									]));
						}),
					headers,
					values))
			]);
	});
var _narkisr$elm_ui$Common_Summary$optionalSection = F4(
	function (title, headers, values, pred) {
		return pred ? A3(_narkisr$elm_ui$Common_Summary$overviewSection, title, headers, values) : _elm_lang$core$Native_List.fromArray(
			[]);
	});

var _narkisr$elm_ui$Systems_View_AWS$view = function (model) {
	return _narkisr$elm_ui$Common_Components$fixedPanel(
		A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])));
};
var _narkisr$elm_ui$Systems_View_AWS$summarySections = function (_p0) {
	var _p1 = _p0;
	var _p6 = _p1._1;
	var _p5 = _p1._0;
	return A2(
		_elm_lang$core$List$filter,
		function (_p2) {
			return _elm_lang$core$Basics$not(
				_elm_lang$core$List$isEmpty(_p2));
		},
		_elm_lang$core$Native_List.fromArray(
			[
				A3(
				_narkisr$elm_ui$Common_Summary$overviewSection,
				'Instance',
				_elm_lang$core$Native_List.fromArray(
					['type', 'os', 'endpoint', 'availability zone']),
				_elm_lang$core$Native_List.fromArray(
					[
						_p5.instanceType,
						_p6.os,
						_p5.endpoint,
						A2(_elm_lang$core$Maybe$withDefault, '', _p5.availabilityZone)
					])),
				A3(
				_narkisr$elm_ui$Common_Summary$overviewSection,
				'Security',
				_elm_lang$core$Native_List.fromArray(
					['user', 'keypair', 'security groups']),
				_elm_lang$core$Native_List.fromArray(
					[
						_p6.user,
						_p5.keyName,
						A2(
						_elm_lang$core$String$join,
						' ',
						A2(
							_elm_lang$core$Maybe$withDefault,
							_elm_lang$core$Native_List.fromArray(
								[]),
							_p5.securityGroups))
					])),
				A3(
				_narkisr$elm_ui$Common_Summary$overviewSection,
				'DNS',
				_elm_lang$core$Native_List.fromArray(
					['hostname', 'domain', 'ip']),
				_elm_lang$core$Native_List.fromArray(
					[
						_p6.hostname,
						_p6.domain,
						A2(_elm_lang$core$Maybe$withDefault, '', _p6.ip)
					])),
				A4(
				_narkisr$elm_ui$Common_Summary$optionalSection,
				'VPC',
				_elm_lang$core$Native_List.fromArray(
					['VPC id', 'Subnet id', 'Assign IP']),
				A2(
					_elm_lang$core$List$map,
					A2(_narkisr$elm_ui$Common_Utils$withDefaultProp, _p5.vpc, ''),
					_elm_lang$core$Native_List.fromArray(
						[
							function (_) {
							return _.vpcId;
						},
							function (_) {
							return _.subnetId;
						}
						])),
				!_elm_lang$core$Native_Utils.eq(_p5.vpc, _elm_lang$core$Maybe$Nothing)),
				A4(
				_narkisr$elm_ui$Common_Summary$tablizedSection,
				'EBS volumes',
				_elm_lang$core$Native_List.fromArray(
					['device', 'size', 'type', 'clear']),
				A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_p5.volumes),
				_elm_lang$core$Native_List.fromArray(
					[
						function (_) {
						return _.device;
					},
						function (_p3) {
						return _elm_lang$core$Basics$toString(
							function (_) {
								return _.size;
							}(_p3));
					},
						function (_) {
						return _.type$;
					},
						function (_p4) {
						return _elm_lang$core$Basics$toString(
							function (_) {
								return _.clear;
							}(_p4));
					}
					])),
				A4(
				_narkisr$elm_ui$Common_Summary$tablizedSection,
				'Instance store blocks',
				_elm_lang$core$Native_List.fromArray(
					['device', 'volume']),
				A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_p5.blockDevices),
				_elm_lang$core$Native_List.fromArray(
					[
						function (_) {
						return _.device;
					},
						function (_) {
						return _.volume;
					}
					]))
			]));
};
var _narkisr$elm_ui$Systems_View_AWS$summarize = function (model) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$h4,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('System overview')
						])),
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$style(
							_elm_lang$core$Native_List.fromArray(
								[
									{ctor: '_Tuple2', _0: 'line-height', _1: '1.8'},
									{ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'}
								]))
						]),
					A2(
						_elm_lang$core$List$map,
						_circuithub$elm_bootstrap_html$Bootstrap_Html$row_,
						A2(
							_elm_lang$core$List$map,
							_elm_lang$core$List$concat,
							A2(
								_narkisr$elm_ui$Common_Utils$partition,
								2,
								A2(
									_elm_lang$core$List$map,
									_narkisr$elm_ui$Common_Summary$summaryPanel,
									_narkisr$elm_ui$Systems_View_AWS$summarySections(model))))))
				]))
		]);
};
var _narkisr$elm_ui$Systems_View_AWS$Model = function (a) {
	return {id: a};
};
var _narkisr$elm_ui$Systems_View_AWS$init = _narkisr$elm_ui$Common_Utils$none(
	_narkisr$elm_ui$Systems_View_AWS$Model(0));

var _narkisr$elm_ui$Common_Wizard$hasPrev = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$core$Basics$not(
		_elm_lang$core$List$isEmpty(_p1.wizard.prev));
};
var _narkisr$elm_ui$Common_Wizard$hasNext = function (_p2) {
	var _p3 = _p2;
	return _elm_lang$core$Basics$not(
		_elm_lang$core$List$isEmpty(_p3.wizard.next));
};
var _narkisr$elm_ui$Common_Wizard$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _narkisr$elm_ui$Common_Wizard$update = F3(
	function (noErrors, msg, _p4) {
		var _p5 = _p4;
		var _p11 = _p5.zero;
		var _p10 = _p5.step;
		var _p9 = _p5.prev;
		var _p8 = _p5.next;
		var _p7 = _p5;
		var _p6 = msg;
		switch (_p6.ctor) {
			case 'Next':
				var prevSteps = (!_elm_lang$core$Native_Utils.eq(_p10, _p11)) ? A2(
					_elm_lang$core$List$append,
					_p9,
					_elm_lang$core$Native_List.fromArray(
						[_p10])) : _p9;
				var nextSteps = _narkisr$elm_ui$Common_Utils$defaultEmpty(
					_elm_lang$core$List$tail(_p8));
				var nextStep = A2(
					_elm_lang$core$Maybe$withDefault,
					_p5.$default,
					_elm_lang$core$List$head(_p8));
				return noErrors ? _elm_lang$core$Native_Utils.update(
					_p7,
					{step: nextStep, next: nextSteps, prev: prevSteps}) : _p7;
			case 'Back':
				var nextSteps = (!_elm_lang$core$Native_Utils.eq(_p10, _p11)) ? A2(
					_elm_lang$core$List$append,
					_elm_lang$core$Native_List.fromArray(
						[_p10]),
					_p8) : _p8;
				var prevSteps = A2(
					_elm_lang$core$List$take,
					_elm_lang$core$List$length(_p9) - 1,
					_p9);
				var prevStep = A2(
					_elm_lang$core$Maybe$withDefault,
					_p11,
					_elm_lang$core$List$head(
						_elm_lang$core$List$reverse(_p9)));
				return noErrors ? _elm_lang$core$Native_Utils.update(
					_p7,
					{step: prevStep, next: nextSteps, prev: prevSteps}) : _p7;
			default:
				return _p7;
		}
	});
var _narkisr$elm_ui$Common_Wizard$Model = F5(
	function (a, b, c, d, e) {
		return {zero: a, step: b, $default: c, prev: d, next: e};
	});
var _narkisr$elm_ui$Common_Wizard$init = F3(
	function (zero, $default, steps) {
		return A5(
			_narkisr$elm_ui$Common_Wizard$Model,
			zero,
			zero,
			$default,
			_elm_lang$core$Native_List.fromArray(
				[]),
			steps);
	});
var _narkisr$elm_ui$Common_Wizard$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Common_Wizard$Back = {ctor: 'Back'};
var _narkisr$elm_ui$Common_Wizard$Next = {ctor: 'Next'};

var _narkisr$elm_ui$Systems_Add_AWS$ebsTypes = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			{ctor: '_Tuple2', _0: 'Magnetic', _1: 'standard'},
			{ctor: '_Tuple2', _0: 'General Purpose (SSD)', _1: 'gp2'},
			{ctor: '_Tuple2', _0: 'Provisioned IOPS (SSD)', _1: 'io1'}
		]));
var _narkisr$elm_ui$Systems_Add_AWS$ignoreDevices = function (_p0) {
	var _p1 = _p0;
	var ignored = A2(
		_elm_lang$core$Dict$remove,
		'Volume',
		A2(
			_elm_lang$core$Dict$remove,
			'Instance Device',
			A2(_elm_lang$core$Dict$remove, 'EBS Device', _p1.errors)));
	return _elm_lang$core$Native_Utils.update(
		_p1,
		{errors: ignored});
};
var _narkisr$elm_ui$Systems_Add_AWS$setBlock = F2(
	function (f, _p2) {
		var _p3 = _p2;
		var newBlock = f(_p3.block);
		return _elm_lang$core$Native_Utils.update(
			_p3,
			{block: newBlock});
	});
var _narkisr$elm_ui$Systems_Add_AWS$setVolume = F2(
	function (f, _p4) {
		var _p5 = _p4;
		var newVolume = f(_p5.volume);
		return _elm_lang$core$Native_Utils.update(
			_p5,
			{volume: newVolume});
	});
var _narkisr$elm_ui$Systems_Add_AWS$setAWS = F2(
	function (f, _p6) {
		var _p7 = _p6;
		var newAws = f(_p7.aws);
		return _elm_lang$core$Native_Utils.update(
			_p7,
			{aws: newAws});
	});
var _narkisr$elm_ui$Systems_Add_AWS$Model = F7(
	function (a, b, c, d, e, f, g) {
		return {wizard: a, aws: b, machine: c, environment: d, errors: e, volume: f, block: g};
	});
var _narkisr$elm_ui$Systems_Add_AWS$BlockRemove = function (a) {
	return {ctor: 'BlockRemove', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$blockRow = function (_p8) {
	var _p9 = _p8;
	var props = _elm_lang$core$Native_List.fromArray(
		[
			function (_) {
			return _.device;
		},
			function (_) {
			return _.volume;
		}
		]);
	var remove = A2(
		_elm_lang$html$Html$span,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('glyphicon glyphicon-remove'),
				A2(_elm_lang$html$Html_Attributes$attribute, 'aria-hidden', 'true'),
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'top', _1: '5px'}
					])),
				_elm_lang$html$Html_Events$onClick(
				_narkisr$elm_ui$Systems_Add_AWS$BlockRemove(_p9.device))
			]),
		_elm_lang$core$Native_List.fromArray(
			[]));
	return A2(
		_elm_lang$html$Html$tr,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(
			_elm_lang$core$List$append,
			A2(
				_elm_lang$core$List$map,
				function (prop) {
					return A2(
						_elm_lang$html$Html$td,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(
								prop(_p9))
							]));
				},
				props),
			_elm_lang$core$Native_List.fromArray(
				[remove])));
};
var _narkisr$elm_ui$Systems_Add_AWS$blocks = function (bs) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('col-md-8 col-md-offset-2 ')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$table,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('table'),
						_elm_lang$html$Html_Attributes$id('instanceVolumes')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$thead,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$tr,
								_elm_lang$core$Native_List.fromArray(
									[]),
								A2(
									_elm_lang$core$List$map,
									function (k) {
										return A2(
											_elm_lang$html$Html$th,
											_elm_lang$core$Native_List.fromArray(
												[]),
											_elm_lang$core$Native_List.fromArray(
												[
													_elm_lang$html$Html$text(k)
												]));
									},
									_elm_lang$core$Native_List.fromArray(
										['device', 'volume', ''])))
							])),
						A2(
						_elm_lang$html$Html$tbody,
						_elm_lang$core$Native_List.fromArray(
							[]),
						A2(
							_elm_lang$core$List$map,
							function (block) {
								return _narkisr$elm_ui$Systems_Add_AWS$blockRow(block);
							},
							bs))
					]))
			]));
};
var _narkisr$elm_ui$Systems_Add_AWS$BlockAdd = {ctor: 'BlockAdd'};
var _narkisr$elm_ui$Systems_Add_AWS$InstanceVolumeInput = function (a) {
	return {ctor: 'InstanceVolumeInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$InstanceDeviceInput = function (a) {
	return {ctor: 'InstanceDeviceInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$store = function (_p10) {
	var _p11 = _p10;
	var _p12 = _p11.block;
	var check = _narkisr$elm_ui$Common_Components$withErrors(_p11.errors);
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-horizontal'),
					A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Instance Store')
						])),
					A2(
					check,
					'Instance Device',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_AWS$InstanceDeviceInput, 'sdb', _p12.device)),
					A2(
					check,
					'Volume',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_AWS$InstanceVolumeInput, 'ephemeral0', _p12.volume)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'',
					A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('btn btn-sm col-md-2'),
								_elm_lang$html$Html_Events$onClick(_narkisr$elm_ui$Systems_Add_AWS$BlockAdd)
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Add')
							]))),
					_narkisr$elm_ui$Systems_Add_AWS$blocks(
					_narkisr$elm_ui$Common_Utils$defaultEmpty(_p11.aws.blockDevices))
				]))
		]);
};
var _narkisr$elm_ui$Systems_Add_AWS$AssignIp = {ctor: 'AssignIp'};
var _narkisr$elm_ui$Systems_Add_AWS$SubnetIdInput = function (a) {
	return {ctor: 'SubnetIdInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$VPCIdInput = function (a) {
	return {ctor: 'VPCIdInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$EBSClear = {ctor: 'EBSClear'};
var _narkisr$elm_ui$Systems_Add_AWS$EBSOptimized = {ctor: 'EBSOptimized'};
var _narkisr$elm_ui$Systems_Add_AWS$VolumeRemove = function (a) {
	return {ctor: 'VolumeRemove', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$volumeRow = function (_p13) {
	var _p14 = _p13;
	var props = _elm_lang$core$Native_List.fromArray(
		[
			function (_) {
			return _.device;
		},
			function (_p15) {
			return _elm_lang$core$Basics$toString(
				function (_) {
					return _.size;
				}(_p15));
		},
			function (_) {
			return _.type$;
		},
			function (_p16) {
			return _elm_lang$core$Basics$toString(
				function (_) {
					return _.clear;
				}(_p16));
		}
		]);
	var remove = A2(
		_elm_lang$html$Html$span,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('glyphicon glyphicon-remove'),
				A2(_elm_lang$html$Html_Attributes$attribute, 'aria-hidden', 'true'),
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'top', _1: '5px'}
					])),
				_elm_lang$html$Html_Events$onClick(
				_narkisr$elm_ui$Systems_Add_AWS$VolumeRemove(_p14.device))
			]),
		_elm_lang$core$Native_List.fromArray(
			[]));
	return A2(
		_elm_lang$html$Html$tr,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(
			_elm_lang$core$List$append,
			A2(
				_elm_lang$core$List$map,
				function (prop) {
					return A2(
						_elm_lang$html$Html$td,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(
								prop(_p14))
							]));
				},
				props),
			_elm_lang$core$Native_List.fromArray(
				[remove])));
};
var _narkisr$elm_ui$Systems_Add_AWS$volumes = function (vs) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('col-md-8 col-md-offset-2 ')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$table,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('table'),
						_elm_lang$html$Html_Attributes$id('ebsVolumes')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$thead,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$tr,
								_elm_lang$core$Native_List.fromArray(
									[]),
								A2(
									_elm_lang$core$List$map,
									function (k) {
										return A2(
											_elm_lang$html$Html$th,
											_elm_lang$core$Native_List.fromArray(
												[]),
											_elm_lang$core$Native_List.fromArray(
												[
													_elm_lang$html$Html$text(k)
												]));
									},
									_elm_lang$core$Native_List.fromArray(
										['device', 'size', 'type', 'clear', ''])))
							])),
						A2(
						_elm_lang$html$Html$tbody,
						_elm_lang$core$Native_List.fromArray(
							[]),
						A2(
							_elm_lang$core$List$map,
							function (volume) {
								return _narkisr$elm_ui$Systems_Add_AWS$volumeRow(volume);
							},
							vs))
					]))
			]));
};
var _narkisr$elm_ui$Systems_Add_AWS$VolumeAdd = {ctor: 'VolumeAdd'};
var _narkisr$elm_ui$Systems_Add_AWS$EBSDeviceInput = function (a) {
	return {ctor: 'EBSDeviceInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$EBSIOPSInput = function (a) {
	return {ctor: 'EBSIOPSInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$EBSSizeInput = function (a) {
	return {ctor: 'EBSSizeInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$SelectEBSType = function (a) {
	return {ctor: 'SelectEBSType', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$ebs = function (_p17) {
	var _p18 = _p17;
	var _p20 = _p18.volume;
	var _p19 = _p18.aws;
	var check = _narkisr$elm_ui$Common_Components$withErrors(_p18.errors);
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-horizontal'),
					A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Global')
						])),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'EBS Optimized',
					A2(
						_narkisr$elm_ui$Common_Components$checkbox,
						_narkisr$elm_ui$Systems_Add_AWS$EBSOptimized,
						A2(_elm_lang$core$Maybe$withDefault, false, _p19.ebsOptimized))),
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Devices')
						])),
					A2(
					check,
					'EBS Device',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_AWS$EBSDeviceInput, 'sdh', _p20.device)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Size',
					A3(
						_narkisr$elm_ui$Common_Components$inputNumber,
						_narkisr$elm_ui$Systems_Add_AWS$EBSSizeInput,
						'',
						_elm_lang$core$Basics$toString(_p20.size))),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Type',
					A3(
						_narkisr$elm_ui$Common_Components$selector,
						_narkisr$elm_ui$Systems_Add_AWS$SelectEBSType,
						_elm_lang$core$Dict$keys(_narkisr$elm_ui$Systems_Add_AWS$ebsTypes),
						_p20.type$)),
					_elm_lang$core$Native_Utils.eq(_p20.type$, 'Provisioned IOPS (SSD)') ? A2(
					_narkisr$elm_ui$Common_Components$group$,
					'IOPS',
					A3(
						_narkisr$elm_ui$Common_Components$inputNumber,
						_narkisr$elm_ui$Systems_Add_AWS$EBSIOPSInput,
						'50',
						_elm_lang$core$Basics$toString(
							A2(_elm_lang$core$Maybe$withDefault, 50, _p20.iops)))) : A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[])),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Clear',
					A2(_narkisr$elm_ui$Common_Components$checkbox, _narkisr$elm_ui$Systems_Add_AWS$EBSClear, _p20.clear)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'',
					A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('btn btn-sm col-md-2'),
								_elm_lang$html$Html_Events$onClick(_narkisr$elm_ui$Systems_Add_AWS$VolumeAdd)
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Add')
							]))),
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Volumes')
						])),
					_narkisr$elm_ui$Systems_Add_AWS$volumes(
					_narkisr$elm_ui$Common_Utils$defaultEmpty(_p19.volumes))
				]))
		]);
};
var _narkisr$elm_ui$Systems_Add_AWS$IPInput = function (a) {
	return {ctor: 'IPInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$DomainInput = function (a) {
	return {ctor: 'DomainInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$HostnameInput = function (a) {
	return {ctor: 'HostnameInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$networking = function (_p21) {
	var _p22 = _p21;
	var _p24 = _p22.machine;
	var _p23 = _p22.aws;
	var check = _narkisr$elm_ui$Common_Components$withErrors(_p22.errors);
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-horizontal'),
					A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('DNS')
						])),
					A2(
					check,
					'Hostname',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_AWS$HostnameInput, '', _p24.hostname)),
					A2(
					check,
					'Domain',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_AWS$DomainInput, '', _p24.domain)),
					A2(
					check,
					'IP',
					A3(
						_narkisr$elm_ui$Common_Components$inputText,
						_narkisr$elm_ui$Systems_Add_AWS$IPInput,
						'',
						A2(_elm_lang$core$Maybe$withDefault, '', _p24.ip))),
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('VPC')
						])),
					A2(
					check,
					'VPC Id',
					A3(
						_narkisr$elm_ui$Common_Components$inputText,
						_narkisr$elm_ui$Systems_Add_AWS$VPCIdInput,
						'',
						A3(
							_narkisr$elm_ui$Common_Utils$withDefaultProp,
							_p23.vpc,
							'',
							function (_) {
								return _.vpcId;
							}))),
					A2(
					check,
					'Subnet Id',
					A3(
						_narkisr$elm_ui$Common_Components$inputText,
						_narkisr$elm_ui$Systems_Add_AWS$SubnetIdInput,
						'',
						A3(
							_narkisr$elm_ui$Common_Utils$withDefaultProp,
							_p23.vpc,
							'',
							function (_) {
								return _.subnetId;
							}))),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Assign public IP',
					A2(
						_narkisr$elm_ui$Common_Components$checkbox,
						_narkisr$elm_ui$Systems_Add_AWS$AssignIp,
						A3(
							_narkisr$elm_ui$Common_Utils$withDefaultProp,
							_p23.vpc,
							false,
							function (_) {
								return _.assignPublic;
							})))
				]))
		]);
};
var _narkisr$elm_ui$Systems_Add_AWS$UserInput = function (a) {
	return {ctor: 'UserInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$SecurityGroupsInput = function (a) {
	return {ctor: 'SecurityGroupsInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$KeyPairInput = function (a) {
	return {ctor: 'KeyPairInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$SelectZone = function (a) {
	return {ctor: 'SelectZone', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$SelectEndpoint = function (a) {
	return {ctor: 'SelectEndpoint', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$SelectOS = function (a) {
	return {ctor: 'SelectOS', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$SelectInstanceType = function (a) {
	return {ctor: 'SelectInstanceType', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$instance = function (_p25) {
	var _p26 = _p25;
	var _p33 = _p26;
	var _p32 = _p26.aws;
	var zone = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(
			_elm_lang$core$Dict$keys(
				A2(
					_elm_lang$core$Dict$filter,
					F2(
						function (k, _p27) {
							var _p28 = _p27;
							return _elm_lang$core$Native_Utils.eq(_p28._1, _p32.endpoint);
						}),
					_narkisr$elm_ui$Systems_Model_AWS$endpoints))));
	var _p29 = A2(
		_elm_lang$core$Maybe$withDefault,
		{
			ctor: '_Tuple3',
			_0: '',
			_1: '',
			_2: _elm_lang$core$Native_List.fromArray(
				[])
		},
		A2(_elm_lang$core$Dict$get, zone, _narkisr$elm_ui$Systems_Model_AWS$endpoints));
	var name = _p29._0;
	var zones = _p29._2;
	var zoneOptions = A2(
		_elm_lang$core$List$append,
		_elm_lang$core$Native_List.fromArray(
			['']),
		A2(
			_elm_lang$core$List$map,
			function (k) {
				return A2(_elm_lang$core$Basics_ops['++'], zone, k);
			},
			zones));
	var points = A2(
		_elm_lang$core$List$map,
		function (_p30) {
			var _p31 = _p30;
			return _p31._0;
		},
		_elm_lang$core$Dict$values(_narkisr$elm_ui$Systems_Model_AWS$endpoints));
	var groups = A2(
		_elm_lang$core$String$join,
		' ',
		_narkisr$elm_ui$Common_Utils$defaultEmpty(_p32.securityGroups));
	var check = _narkisr$elm_ui$Common_Components$withErrors(_p26.errors);
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-horizontal'),
					A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Properties')
						])),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Instance type',
					A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Systems_Add_AWS$SelectInstanceType, _narkisr$elm_ui$Systems_Model_AWS$instanceTypes, _p32.instanceType)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'OS',
					A3(
						_narkisr$elm_ui$Common_Components$selector,
						_narkisr$elm_ui$Systems_Add_AWS$SelectOS,
						_elm_lang$core$Dict$keys(
							A2(_narkisr$elm_ui$Systems_Add_Common$getOses, 'aws', _p33)),
						_p26.machine.os)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Endpoint',
					A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Systems_Add_AWS$SelectEndpoint, points, name)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Availability Zone',
					A3(
						_narkisr$elm_ui$Common_Components$selector,
						_narkisr$elm_ui$Systems_Add_AWS$SelectZone,
						zoneOptions,
						A2(_elm_lang$core$Maybe$withDefault, '', _p32.availabilityZone))),
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Security')
						])),
					A2(
					check,
					'User',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_AWS$UserInput, '', _p33.machine.user)),
					A2(
					check,
					'Keypair',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_AWS$KeyPairInput, '', _p32.keyName)),
					A2(
					check,
					'Security groups',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_AWS$SecurityGroupsInput, ' ', groups))
				]))
		]);
};
var _narkisr$elm_ui$Systems_Add_AWS$stepView = function (_p34) {
	var _p35 = _p34;
	var _p38 = _p35.wizard;
	var _p37 = _p35;
	var _p36 = _p38.step;
	switch (_p36.ctor) {
		case 'Instance':
			return _narkisr$elm_ui$Systems_Add_AWS$instance(_p37);
		case 'Networking':
			return _narkisr$elm_ui$Systems_Add_AWS$networking(_p37);
		case 'EBS':
			return _narkisr$elm_ui$Systems_Add_AWS$ebs(_p37);
		case 'Store':
			return _narkisr$elm_ui$Systems_Add_AWS$store(_p37);
		case 'Summary':
			return _narkisr$elm_ui$Systems_View_AWS$summarize(
				{ctor: '_Tuple2', _0: _p35.aws, _1: _p35.machine});
		default:
			return A2(
				_elm_lang$core$Debug$log,
				_elm_lang$core$Basics$toString(_p38.step),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					]));
	}
};
var _narkisr$elm_ui$Systems_Add_AWS$view = function (model) {
	return _narkisr$elm_ui$Common_Components$fixedPanel(
		A2(
			_elm_lang$html$Html$form,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_narkisr$elm_ui$Systems_Add_AWS$stepView(model)));
};
var _narkisr$elm_ui$Systems_Add_AWS$Update = function (a) {
	return {ctor: 'Update', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$WizardMsg = function (a) {
	return {ctor: 'WizardMsg', _0: a};
};
var _narkisr$elm_ui$Systems_Add_AWS$Summary = {ctor: 'Summary'};
var _narkisr$elm_ui$Systems_Add_AWS$Store = {ctor: 'Store'};
var _narkisr$elm_ui$Systems_Add_AWS$EBS = {ctor: 'EBS'};
var _narkisr$elm_ui$Systems_Add_AWS$tupleValidations = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_AWS$EBS,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'EBS Device',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'EBS Device',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notContained]),
						function (_p39) {
							var _p40 = _p39;
							return {
								ctor: '_Tuple2',
								_0: _p40.volume.device,
								_1: A2(
									_elm_lang$core$List$map,
									function (_) {
										return _.device;
									},
									_narkisr$elm_ui$Common_Utils$defaultEmpty(_p40.aws.volumes))
							};
						})
				}
				])),
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_AWS$Store,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'Instance Device',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Instance Device',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notContained]),
						function (_p41) {
							var _p42 = _p41;
							return {
								ctor: '_Tuple2',
								_0: _p42.block.device,
								_1: A2(
									_elm_lang$core$List$map,
									function (_) {
										return _.device;
									},
									_narkisr$elm_ui$Common_Utils$defaultEmpty(_p42.aws.blockDevices))
							};
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'Volume',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Volume',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notContained]),
						function (_p43) {
							var _p44 = _p43;
							return {
								ctor: '_Tuple2',
								_0: _p44.block.volume,
								_1: A2(
									_elm_lang$core$List$map,
									function (_) {
										return _.volume;
									},
									A2(
										_elm_lang$core$Maybe$withDefault,
										_elm_lang$core$Native_List.fromArray(
											[]),
										_p44.aws.blockDevices))
							};
						})
				}
				]))
		]));
var _narkisr$elm_ui$Systems_Add_AWS$Networking = {ctor: 'Networking'};
var _narkisr$elm_ui$Systems_Add_AWS$Instance = {ctor: 'Instance'};
var _narkisr$elm_ui$Systems_Add_AWS$stringValidations = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_AWS$Networking,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'Hostname',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Hostname',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p45) {
							var _p46 = _p45;
							return _p46.machine.hostname;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'Domain',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Domain',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p47) {
							var _p48 = _p47;
							return _p48.machine.domain;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'IP',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'IP',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$validIp]),
						function (_p49) {
							var _p50 = _p49;
							return A2(_elm_lang$core$Maybe$withDefault, '', _p50.machine.ip);
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'VPC Id',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'VPC Id',
						_elm_lang$core$Native_List.fromArray(
							[
								A3(_narkisr$elm_ui$Systems_Add_Validations$validId, 12, 'vpc-', true)
							]),
						function (_p51) {
							var _p52 = _p51;
							return A3(
								_narkisr$elm_ui$Common_Utils$withDefaultProp,
								_p52.aws.vpc,
								'',
								function (_) {
									return _.vpcId;
								});
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'Subnet Id',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Subnet Id',
						_elm_lang$core$Native_List.fromArray(
							[
								A3(_narkisr$elm_ui$Systems_Add_Validations$validId, 15, 'subnet-', true)
							]),
						function (_p53) {
							var _p54 = _p53;
							return A3(
								_narkisr$elm_ui$Common_Utils$withDefaultProp,
								_p54.aws.vpc,
								'',
								function (_) {
									return _.subnetId;
								});
						})
				}
				])),
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_AWS$Instance,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'User',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'User',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p55) {
							var _p56 = _p55;
							return _p56.machine.user;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'Keypair',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Keypair',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p57) {
							var _p58 = _p57;
							return _p58.aws.keyName;
						})
				}
				]))
		]));
var _narkisr$elm_ui$Systems_Add_AWS$listValidations = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_AWS$Instance,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'Security groups',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Security groups',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$hasItems]),
						function (_p59) {
							var _p60 = _p59;
							return _narkisr$elm_ui$Common_Utils$defaultEmpty(_p60.aws.securityGroups);
						})
				}
				]))
		]));
var _narkisr$elm_ui$Systems_Add_AWS$validateAWS = _narkisr$elm_ui$Systems_Add_Validations$validateAll(
	_elm_lang$core$Native_List.fromArray(
		[_narkisr$elm_ui$Systems_Add_AWS$listValidations, _narkisr$elm_ui$Systems_Add_AWS$stringValidations]));
var _narkisr$elm_ui$Systems_Add_AWS$update = F2(
	function (msg, _p61) {
		var _p62 = _p61;
		var _p74 = _p62.wizard;
		var _p73 = _p62;
		var _p72 = _p62.aws;
		var _p63 = msg;
		switch (_p63.ctor) {
			case 'WizardMsg':
				var _p64 = _narkisr$elm_ui$Systems_Add_AWS$ignoreDevices(
					A2(_narkisr$elm_ui$Systems_Add_AWS$validateAWS, _p74.step, _p73));
				var newModel = _p64;
				var errors = _p64.errors;
				var newWizard = A3(
					_narkisr$elm_ui$Common_Wizard$update,
					_narkisr$elm_ui$Systems_Add_Validations$notAny(errors),
					_p63._0,
					_p74);
				return _elm_lang$core$Native_Utils.update(
					newModel,
					{wizard: newWizard});
			case 'Update':
				return A2(
					_narkisr$elm_ui$Systems_Add_Common$setDefaultOS,
					'aws',
					_elm_lang$core$Native_Utils.update(
						_p73,
						{environment: _p63._0}));
			case 'SelectInstanceType':
				return A2(
					_narkisr$elm_ui$Systems_Add_AWS$setAWS,
					function (aws) {
						return _elm_lang$core$Native_Utils.update(
							aws,
							{instanceType: _p63._0});
					},
					_p73);
			case 'SelectOS':
				return A2(
					_narkisr$elm_ui$Systems_Add_Common$setMachine,
					function (machine) {
						return _elm_lang$core$Native_Utils.update(
							machine,
							{os: _p63._0});
					},
					_p73);
			case 'SelectEndpoint':
				var _p65 = A2(
					_elm_lang$core$Maybe$withDefault,
					{
						ctor: '_Tuple3',
						_0: '',
						_1: '',
						_2: _elm_lang$core$Native_List.fromArray(
							[])
					},
					_elm_lang$core$List$head(
						A2(
							_elm_lang$core$List$filter,
							function (_p66) {
								var _p67 = _p66;
								return _elm_lang$core$Native_Utils.eq(_p67._0, _p63._0);
							},
							_elm_lang$core$Dict$values(_narkisr$elm_ui$Systems_Model_AWS$endpoints))));
				var url = _p65._1;
				return A2(
					_narkisr$elm_ui$Systems_Add_AWS$setAWS,
					function (aws) {
						return _elm_lang$core$Native_Utils.update(
							aws,
							{endpoint: url});
					},
					_p73);
			case 'SelectZone':
				return A2(
					_narkisr$elm_ui$Systems_Add_AWS$setAWS,
					function (aws) {
						return _elm_lang$core$Native_Utils.update(
							aws,
							{
								availabilityZone: _elm_lang$core$Maybe$Just(_p63._0)
							});
					},
					_p73);
			case 'KeyPairInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p74.step,
					'Keypair',
					_narkisr$elm_ui$Systems_Add_AWS$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_AWS$setAWS,
						function (aws) {
							return _elm_lang$core$Native_Utils.update(
								aws,
								{keyName: _p63._0});
						},
						_p73));
			case 'SecurityGroupsInput':
				var splited = A2(_elm_lang$core$String$split, ' ', _p63._0);
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p74.step,
					'Security groups',
					_narkisr$elm_ui$Systems_Add_AWS$listValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_AWS$setAWS,
						function (aws) {
							return _elm_lang$core$Native_Utils.update(
								aws,
								{
									securityGroups: _elm_lang$core$Maybe$Just(
										_elm_lang$core$Native_Utils.eq(
											splited,
											_elm_lang$core$Native_List.fromArray(
												[''])) ? _elm_lang$core$Native_List.fromArray(
											[]) : splited)
								});
						},
						_p73));
			case 'UserInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p74.step,
					'User',
					_narkisr$elm_ui$Systems_Add_AWS$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{user: _p63._0});
						},
						_p73));
			case 'HostnameInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p74.step,
					'Hostname',
					_narkisr$elm_ui$Systems_Add_AWS$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{hostname: _p63._0});
						},
						_p73));
			case 'DomainInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p74.step,
					'Domain',
					_narkisr$elm_ui$Systems_Add_AWS$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{domain: _p63._0});
						},
						_p73));
			case 'IPInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p74.step,
					'IP',
					_narkisr$elm_ui$Systems_Add_AWS$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{
									ip: _elm_lang$core$Maybe$Just(_p63._0)
								});
						},
						_p73));
			case 'VPCIdInput':
				var newVpc = A2(_elm_lang$core$Maybe$withDefault, _narkisr$elm_ui$Systems_Model_AWS$emptyVpc, _p72.vpc);
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p74.step,
					'VPC Id',
					_narkisr$elm_ui$Systems_Add_AWS$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_AWS$setAWS,
						function (aws) {
							return _elm_lang$core$Native_Utils.update(
								aws,
								{
									vpc: _elm_lang$core$Maybe$Just(
										_elm_lang$core$Native_Utils.update(
											newVpc,
											{vpcId: _p63._0}))
								});
						},
						_p73));
			case 'SubnetIdInput':
				var newVpc = A2(_elm_lang$core$Maybe$withDefault, _narkisr$elm_ui$Systems_Model_AWS$emptyVpc, _p72.vpc);
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p74.step,
					'Subnet Id',
					_narkisr$elm_ui$Systems_Add_AWS$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_AWS$setAWS,
						function (aws) {
							return _elm_lang$core$Native_Utils.update(
								aws,
								{
									vpc: _elm_lang$core$Maybe$Just(
										_elm_lang$core$Native_Utils.update(
											newVpc,
											{subnetId: _p63._0}))
								});
						},
						_p73));
			case 'AssignIp':
				var newVpc = A2(_elm_lang$core$Maybe$withDefault, _narkisr$elm_ui$Systems_Model_AWS$emptyVpc, _p72.vpc);
				return A2(
					_narkisr$elm_ui$Systems_Add_AWS$setAWS,
					function (aws) {
						return _elm_lang$core$Native_Utils.update(
							aws,
							{
								vpc: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Native_Utils.update(
										newVpc,
										{
											assignPublic: _elm_lang$core$Basics$not(newVpc.assignPublic)
										}))
							});
					},
					_p73);
			case 'SelectEBSType':
				return A2(
					_narkisr$elm_ui$Systems_Add_AWS$setVolume,
					function (volume) {
						return _elm_lang$core$Native_Utils.update(
							volume,
							{type$: _p63._0});
					},
					_p73);
			case 'EBSSizeInput':
				var _p68 = _elm_lang$core$String$toInt(_p63._0);
				if (_p68.ctor === 'Ok') {
					return A2(
						_narkisr$elm_ui$Systems_Add_AWS$setVolume,
						function (volume) {
							return _elm_lang$core$Native_Utils.update(
								volume,
								{size: _p68._0});
						},
						_p73);
				} else {
					return _p73;
				}
			case 'EBSIOPSInput':
				var _p69 = _elm_lang$core$String$toInt(_p63._0);
				if (_p69.ctor === 'Ok') {
					return A2(
						_narkisr$elm_ui$Systems_Add_AWS$setVolume,
						function (volume) {
							return _elm_lang$core$Native_Utils.update(
								volume,
								{
									iops: _elm_lang$core$Maybe$Just(_p69._0)
								});
						},
						_p73);
				} else {
					return _p73;
				}
			case 'EBSDeviceInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p74.step,
					'EBS Device',
					_narkisr$elm_ui$Systems_Add_AWS$tupleValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_AWS$setVolume,
						function (volume) {
							return _elm_lang$core$Native_Utils.update(
								volume,
								{device: _p63._0});
						},
						_p73));
			case 'EBSOptimized':
				return A2(
					_narkisr$elm_ui$Systems_Add_AWS$setAWS,
					function (aws) {
						return _elm_lang$core$Native_Utils.update(
							aws,
							{
								ebsOptimized: _elm_lang$core$Maybe$Just(
									_elm_lang$core$Basics$not(
										A2(_elm_lang$core$Maybe$withDefault, false, aws.ebsOptimized)))
							});
					},
					_p73);
			case 'EBSClear':
				return A2(
					_narkisr$elm_ui$Systems_Add_AWS$setVolume,
					function (volume) {
						return _elm_lang$core$Native_Utils.update(
							volume,
							{
								clear: _elm_lang$core$Basics$not(volume.clear)
							});
					},
					_p73);
			case 'VolumeAdd':
				var newAws = _elm_lang$core$Native_Utils.update(
					_p72,
					{
						volumes: _elm_lang$core$Maybe$Just(
							A2(
								_elm_lang$core$List$append,
								_elm_lang$core$Native_List.fromArray(
									[_p62.volume]),
								_narkisr$elm_ui$Common_Utils$defaultEmpty(_p72.volumes)))
					});
				var _p70 = A4(_narkisr$elm_ui$Systems_Add_Validations$validate, _p74.step, 'EBS Device', _narkisr$elm_ui$Systems_Add_AWS$tupleValidations, _p73);
				var newModel = _p70;
				var errors = _p70.errors;
				return _narkisr$elm_ui$Systems_Add_Validations$notAny(errors) ? _elm_lang$core$Native_Utils.update(
					newModel,
					{volume: _narkisr$elm_ui$Systems_Model_AWS$emptyVolume, aws: newAws}) : _elm_lang$core$Native_Utils.update(
					newModel,
					{aws: _p72});
			case 'InstanceDeviceInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p74.step,
					'Instance Device',
					_narkisr$elm_ui$Systems_Add_AWS$tupleValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_AWS$setBlock,
						function (block) {
							return _elm_lang$core$Native_Utils.update(
								block,
								{device: _p63._0});
						},
						_p73));
			case 'InstanceVolumeInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p74.step,
					'Volume',
					_narkisr$elm_ui$Systems_Add_AWS$tupleValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_AWS$setBlock,
						function (block) {
							return _elm_lang$core$Native_Utils.update(
								block,
								{volume: _p63._0});
						},
						_p73));
			case 'BlockAdd':
				var newAws = _elm_lang$core$Native_Utils.update(
					_p72,
					{
						blockDevices: _elm_lang$core$Maybe$Just(
							A2(
								_elm_lang$core$List$append,
								_elm_lang$core$Native_List.fromArray(
									[_p62.block]),
								_narkisr$elm_ui$Common_Utils$defaultEmpty(_p72.blockDevices)))
					});
				var _p71 = A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p74.step,
					'Volume',
					_narkisr$elm_ui$Systems_Add_AWS$tupleValidations,
					A4(_narkisr$elm_ui$Systems_Add_Validations$validate, _p74.step, 'Instance Device', _narkisr$elm_ui$Systems_Add_AWS$tupleValidations, _p73));
				var newModel = _p71;
				var errors = _p71.errors;
				return _narkisr$elm_ui$Systems_Add_Validations$notAny(errors) ? _elm_lang$core$Native_Utils.update(
					newModel,
					{block: _narkisr$elm_ui$Systems_Model_AWS$emptyBlock, aws: newAws}) : _elm_lang$core$Native_Utils.update(
					newModel,
					{aws: _p72});
			case 'VolumeRemove':
				var newVolumes = A2(
					_elm_lang$core$List$filter,
					function (volume) {
						return !_elm_lang$core$Native_Utils.eq(volume.device, _p63._0);
					},
					_narkisr$elm_ui$Common_Utils$defaultEmpty(_p72.volumes));
				var newAws = _elm_lang$core$Native_Utils.update(
					_p72,
					{
						volumes: _elm_lang$core$Maybe$Just(newVolumes)
					});
				return _elm_lang$core$Native_Utils.update(
					_p73,
					{aws: newAws});
			default:
				var newBlocks = A2(
					_elm_lang$core$List$filter,
					function (block) {
						return !_elm_lang$core$Native_Utils.eq(block.device, _p63._0);
					},
					_narkisr$elm_ui$Common_Utils$defaultEmpty(_p72.blockDevices));
				var newAws = _elm_lang$core$Native_Utils.update(
					_p72,
					{
						blockDevices: _elm_lang$core$Maybe$Just(newBlocks)
					});
				return _elm_lang$core$Native_Utils.update(
					_p73,
					{aws: newAws});
		}
	});
var _narkisr$elm_ui$Systems_Add_AWS$next = F2(
	function (model, environment) {
		return A2(
			_narkisr$elm_ui$Systems_Add_AWS$update,
			_narkisr$elm_ui$Systems_Add_AWS$WizardMsg(_narkisr$elm_ui$Common_Wizard$Next),
			A2(
				_narkisr$elm_ui$Systems_Add_AWS$update,
				_narkisr$elm_ui$Systems_Add_AWS$Update(environment),
				model));
	});
var _narkisr$elm_ui$Systems_Add_AWS$back = function (model) {
	return A2(
		_narkisr$elm_ui$Systems_Add_AWS$update,
		_narkisr$elm_ui$Systems_Add_AWS$WizardMsg(_narkisr$elm_ui$Common_Wizard$Back),
		model);
};
var _narkisr$elm_ui$Systems_Add_AWS$Zero = {ctor: 'Zero'};
var _narkisr$elm_ui$Systems_Add_AWS$init = function () {
	var wizard = A3(
		_narkisr$elm_ui$Common_Wizard$init,
		_narkisr$elm_ui$Systems_Add_AWS$Zero,
		_narkisr$elm_ui$Systems_Add_AWS$Instance,
		_elm_lang$core$Native_List.fromArray(
			[_narkisr$elm_ui$Systems_Add_AWS$Instance, _narkisr$elm_ui$Systems_Add_AWS$Networking, _narkisr$elm_ui$Systems_Add_AWS$EBS, _narkisr$elm_ui$Systems_Add_AWS$Store, _narkisr$elm_ui$Systems_Add_AWS$Summary]));
	return A7(_narkisr$elm_ui$Systems_Add_AWS$Model, wizard, _narkisr$elm_ui$Systems_Model_AWS$emptyAws, _narkisr$elm_ui$Systems_Model_Common$emptyMachine, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty, _narkisr$elm_ui$Systems_Model_AWS$emptyVolume, _narkisr$elm_ui$Systems_Model_AWS$emptyBlock);
}();

var _narkisr$elm_ui$Systems_View_Physical$view = function (model) {
	return _narkisr$elm_ui$Common_Components$fixedPanel(
		A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])));
};
var _narkisr$elm_ui$Systems_View_Physical$summarySections = function (_p0) {
	var _p1 = _p0;
	var _p3 = _p1._0;
	var _p2 = _p1._1;
	return _elm_lang$core$Native_List.fromArray(
		[
			A3(
			_narkisr$elm_ui$Common_Summary$overviewSection,
			'Instance',
			_elm_lang$core$Native_List.fromArray(
				['os', 'user']),
			_elm_lang$core$Native_List.fromArray(
				[_p2.os, _p2.user])),
			A3(
			_narkisr$elm_ui$Common_Summary$overviewSection,
			'Networking',
			_elm_lang$core$Native_List.fromArray(
				['ip', 'hostname', 'domain']),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_elm_lang$core$Maybe$withDefault, '', _p2.ip),
					_p2.hostname,
					_p2.domain
				])),
			A3(
			_narkisr$elm_ui$Common_Summary$overviewSection,
			'Interface',
			_elm_lang$core$Native_List.fromArray(
				['MAC', 'Broadcast']),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(_elm_lang$core$Maybe$withDefault, '', _p3.mac),
					A2(_elm_lang$core$Maybe$withDefault, '', _p3.broadcast)
				]))
		]);
};
var _narkisr$elm_ui$Systems_View_Physical$summarize = function (model) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$h4,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('System overview')
						])),
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$style(
							_elm_lang$core$Native_List.fromArray(
								[
									{ctor: '_Tuple2', _0: 'line-height', _1: '1.8'},
									{ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'}
								]))
						]),
					A2(
						_elm_lang$core$List$map,
						_circuithub$elm_bootstrap_html$Bootstrap_Html$row_,
						A2(
							_elm_lang$core$List$map,
							_elm_lang$core$List$concat,
							A2(
								_narkisr$elm_ui$Common_Utils$partition,
								2,
								A2(
									_elm_lang$core$List$map,
									_narkisr$elm_ui$Common_Summary$summaryPanel,
									_narkisr$elm_ui$Systems_View_Physical$summarySections(model))))))
				]))
		]);
};
var _narkisr$elm_ui$Systems_View_Physical$Model = function (a) {
	return {id: a};
};
var _narkisr$elm_ui$Systems_View_Physical$init = _narkisr$elm_ui$Common_Utils$none(
	_narkisr$elm_ui$Systems_View_Physical$Model(0));

var _narkisr$elm_ui$Systems_Add_Physical$getOses = function (model) {
	var hypervisor = A2(
		_elm_lang$core$Maybe$withDefault,
		_narkisr$elm_ui$Environments_List$OSTemplates(_elm_lang$core$Dict$empty),
		A2(_elm_lang$core$Dict$get, 'physical', model.environment));
	var _p0 = hypervisor;
	if (_p0.ctor === 'OSTemplates') {
		return _p0._0;
	} else {
		return _elm_lang$core$Dict$empty;
	}
};
var _narkisr$elm_ui$Systems_Add_Physical$setPhysical = F2(
	function (f, _p1) {
		var _p2 = _p1;
		var newPhysical = f(_p2.physical);
		return _elm_lang$core$Native_Utils.update(
			_p2,
			{physical: newPhysical});
	});
var _narkisr$elm_ui$Systems_Add_Physical$Model = F5(
	function (a, b, c, d, e) {
		return {wizard: a, physical: b, machine: c, environment: d, errors: e};
	});
var _narkisr$elm_ui$Systems_Add_Physical$IPInput = function (a) {
	return {ctor: 'IPInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Physical$BroadcastInput = function (a) {
	return {ctor: 'BroadcastInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Physical$MacInput = function (a) {
	return {ctor: 'MacInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Physical$DomainInput = function (a) {
	return {ctor: 'DomainInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Physical$HostnameInput = function (a) {
	return {ctor: 'HostnameInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Physical$UserInput = function (a) {
	return {ctor: 'UserInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Physical$instance = function (_p3) {
	var _p4 = _p3;
	var _p6 = _p4.physical;
	var _p5 = _p4.machine;
	var check = _narkisr$elm_ui$Common_Components$withErrors(_p4.errors);
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-horizontal'),
					A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Security')
						])),
					A2(
					check,
					'User',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Physical$UserInput, '', _p5.user)),
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Networking')
						])),
					A2(
					check,
					'IP',
					A3(
						_narkisr$elm_ui$Common_Components$inputText,
						_narkisr$elm_ui$Systems_Add_Physical$IPInput,
						'',
						A2(_elm_lang$core$Maybe$withDefault, '', _p5.ip))),
					A2(
					check,
					'Hostname',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Physical$HostnameInput, '', _p5.hostname)),
					A2(
					check,
					'Domain',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Physical$DomainInput, '', _p5.domain)),
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('WOL')
						])),
					A2(
					check,
					'Mac',
					A3(
						_narkisr$elm_ui$Common_Components$inputText,
						_narkisr$elm_ui$Systems_Add_Physical$MacInput,
						'',
						A2(_elm_lang$core$Maybe$withDefault, '', _p6.mac))),
					A2(
					check,
					'Broadcast',
					A3(
						_narkisr$elm_ui$Common_Components$inputText,
						_narkisr$elm_ui$Systems_Add_Physical$BroadcastInput,
						'',
						A2(_elm_lang$core$Maybe$withDefault, '', _p6.broadcast)))
				]))
		]);
};
var _narkisr$elm_ui$Systems_Add_Physical$stepView = function (_p7) {
	var _p8 = _p7;
	var _p10 = _p8.wizard;
	var _p9 = _p10.step;
	switch (_p9.ctor) {
		case 'Instance':
			return _narkisr$elm_ui$Systems_Add_Physical$instance(_p8);
		case 'Summary':
			return _narkisr$elm_ui$Systems_View_Physical$summarize(
				{ctor: '_Tuple2', _0: _p8.physical, _1: _p8.machine});
		default:
			return A2(
				_elm_lang$core$Debug$log,
				_elm_lang$core$Basics$toString(_p10.step),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					]));
	}
};
var _narkisr$elm_ui$Systems_Add_Physical$view = function (model) {
	return _narkisr$elm_ui$Common_Components$fixedPanel(
		A2(
			_elm_lang$html$Html$form,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_narkisr$elm_ui$Systems_Add_Physical$stepView(model)));
};
var _narkisr$elm_ui$Systems_Add_Physical$SelectOS = function (a) {
	return {ctor: 'SelectOS', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Physical$Update = function (a) {
	return {ctor: 'Update', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Physical$WizardMsg = function (a) {
	return {ctor: 'WizardMsg', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Physical$Summary = {ctor: 'Summary'};
var _narkisr$elm_ui$Systems_Add_Physical$Instance = {ctor: 'Instance'};
var _narkisr$elm_ui$Systems_Add_Physical$stringValidations = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_Physical$Instance,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'Hostname',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Hostname',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p11) {
							var _p12 = _p11;
							return _p12.machine.hostname;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'Domain',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Domain',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p13) {
							var _p14 = _p13;
							return _p14.machine.domain;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'User',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'User',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p15) {
							var _p16 = _p15;
							return _p16.machine.user;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'IP',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'IP',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$validIp, _narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p17) {
							var _p18 = _p17;
							return A2(_elm_lang$core$Maybe$withDefault, '', _p18.machine.ip);
						})
				}
				]))
		]));
var _narkisr$elm_ui$Systems_Add_Physical$validatePhysical = _narkisr$elm_ui$Systems_Add_Validations$validateAll(
	_elm_lang$core$Native_List.fromArray(
		[_narkisr$elm_ui$Systems_Add_Physical$stringValidations]));
var _narkisr$elm_ui$Systems_Add_Physical$update = F2(
	function (msg, _p19) {
		var _p20 = _p19;
		var _p26 = _p20.wizard;
		var _p25 = _p20;
		var _p24 = _p20.machine;
		var _p21 = msg;
		switch (_p21.ctor) {
			case 'WizardMsg':
				var _p22 = A2(_narkisr$elm_ui$Systems_Add_Physical$validatePhysical, _p26.step, _p25);
				var newModel = _p22;
				var errors = _p22.errors;
				var newWizard = A3(
					_narkisr$elm_ui$Common_Wizard$update,
					_narkisr$elm_ui$Systems_Add_Validations$notAny(errors),
					_p21._0,
					_p26);
				return _elm_lang$core$Native_Utils.update(
					newModel,
					{wizard: newWizard});
			case 'Update':
				var newModel = _elm_lang$core$Native_Utils.update(
					_p25,
					{environment: _p21._0});
				var _p23 = _elm_lang$core$List$head(
					_elm_lang$core$Dict$keys(
						_narkisr$elm_ui$Systems_Add_Physical$getOses(newModel)));
				if (_p23.ctor === 'Just') {
					return _elm_lang$core$String$isEmpty(_p24.os) ? _elm_lang$core$Native_Utils.update(
						newModel,
						{
							machine: _elm_lang$core$Native_Utils.update(
								_p24,
								{os: _p23._0})
						}) : newModel;
				} else {
					return newModel;
				}
			case 'SelectOS':
				return A2(
					_narkisr$elm_ui$Systems_Add_Common$setMachine,
					function (machine) {
						return _elm_lang$core$Native_Utils.update(
							machine,
							{os: _p21._0});
					},
					_p25);
			case 'UserInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p26.step,
					'User',
					_narkisr$elm_ui$Systems_Add_Physical$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{user: _p21._0});
						},
						_p25));
			case 'HostnameInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p26.step,
					'Hostname',
					_narkisr$elm_ui$Systems_Add_Physical$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{hostname: _p21._0});
						},
						_p25));
			case 'DomainInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p26.step,
					'Domain',
					_narkisr$elm_ui$Systems_Add_Physical$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{domain: _p21._0});
						},
						_p25));
			case 'MacInput':
				return A2(
					_narkisr$elm_ui$Systems_Add_Physical$setPhysical,
					function (physical) {
						return _elm_lang$core$Native_Utils.update(
							physical,
							{
								mac: _elm_lang$core$Maybe$Just(_p21._0)
							});
					},
					_p25);
			case 'BroadcastInput':
				return A2(
					_narkisr$elm_ui$Systems_Add_Physical$setPhysical,
					function (physical) {
						return _elm_lang$core$Native_Utils.update(
							physical,
							{
								broadcast: _elm_lang$core$Maybe$Just(_p21._0)
							});
					},
					_p25);
			default:
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p26.step,
					'IP',
					_narkisr$elm_ui$Systems_Add_Physical$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{
									ip: _elm_lang$core$Maybe$Just(_p21._0)
								});
						},
						_p25));
		}
	});
var _narkisr$elm_ui$Systems_Add_Physical$next = F2(
	function (model, environment) {
		return A2(
			_narkisr$elm_ui$Systems_Add_Physical$update,
			_narkisr$elm_ui$Systems_Add_Physical$WizardMsg(_narkisr$elm_ui$Common_Wizard$Next),
			A2(
				_narkisr$elm_ui$Systems_Add_Physical$update,
				_narkisr$elm_ui$Systems_Add_Physical$Update(environment),
				model));
	});
var _narkisr$elm_ui$Systems_Add_Physical$back = function (model) {
	return A2(
		_narkisr$elm_ui$Systems_Add_Physical$update,
		_narkisr$elm_ui$Systems_Add_Physical$WizardMsg(_narkisr$elm_ui$Common_Wizard$Back),
		model);
};
var _narkisr$elm_ui$Systems_Add_Physical$Zero = {ctor: 'Zero'};
var _narkisr$elm_ui$Systems_Add_Physical$init = function () {
	var wizard = A3(
		_narkisr$elm_ui$Common_Wizard$init,
		_narkisr$elm_ui$Systems_Add_Physical$Zero,
		_narkisr$elm_ui$Systems_Add_Physical$Instance,
		_elm_lang$core$Native_List.fromArray(
			[_narkisr$elm_ui$Systems_Add_Physical$Instance, _narkisr$elm_ui$Systems_Add_Physical$Summary]));
	return A5(_narkisr$elm_ui$Systems_Add_Physical$Model, wizard, _narkisr$elm_ui$Systems_Model_Physical$emptyPhysical, _narkisr$elm_ui$Systems_Model_Common$emptyMachine, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty);
}();

var _narkisr$elm_ui$Systems_View_Openstack$view = function (model) {
	return _narkisr$elm_ui$Common_Components$fixedPanel(
		A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])));
};
var _narkisr$elm_ui$Systems_View_Openstack$summarySections = function (_p0) {
	var _p1 = _p0;
	var _p6 = _p1._0;
	var _p5 = _p1._1;
	return A2(
		_elm_lang$core$List$filter,
		function (_p2) {
			return _elm_lang$core$Basics$not(
				_elm_lang$core$List$isEmpty(_p2));
		},
		_elm_lang$core$Native_List.fromArray(
			[
				A3(
				_narkisr$elm_ui$Common_Summary$overviewSection,
				'Instance',
				_elm_lang$core$Native_List.fromArray(
					['flavor', 'os', 'tenant']),
				_elm_lang$core$Native_List.fromArray(
					[_p6.flavor, _p5.os, _p6.tenant])),
				A3(
				_narkisr$elm_ui$Common_Summary$overviewSection,
				'Security',
				_elm_lang$core$Native_List.fromArray(
					['user', 'keypair', 'security groups']),
				_elm_lang$core$Native_List.fromArray(
					[
						_p5.user,
						_p6.keyName,
						A2(
						_elm_lang$core$String$join,
						' ',
						A2(
							_elm_lang$core$Maybe$withDefault,
							_elm_lang$core$Native_List.fromArray(
								[]),
							_p6.securityGroups))
					])),
				A3(
				_narkisr$elm_ui$Common_Summary$overviewSection,
				'Networking',
				_elm_lang$core$Native_List.fromArray(
					['hostname', 'domain', 'ip', 'ip pool', 'networks']),
				_elm_lang$core$Native_List.fromArray(
					[
						_p5.hostname,
						_p5.domain,
						A2(_elm_lang$core$Maybe$withDefault, '', _p6.floatingIp),
						A2(_elm_lang$core$Maybe$withDefault, '', _p6.floatingIpPool),
						A2(_elm_lang$core$String$join, ' ', _p6.networks)
					])),
				A4(
				_narkisr$elm_ui$Common_Summary$tablizedSection,
				'Volumes',
				_elm_lang$core$Native_List.fromArray(
					['device', 'size', 'clear']),
				A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_p6.volumes),
				_elm_lang$core$Native_List.fromArray(
					[
						function (_) {
						return _.device;
					},
						function (_p3) {
						return _elm_lang$core$Basics$toString(
							function (_) {
								return _.size;
							}(_p3));
					},
						function (_p4) {
						return _elm_lang$core$Basics$toString(
							function (_) {
								return _.clear;
							}(_p4));
					}
					]))
			]));
};
var _narkisr$elm_ui$Systems_View_Openstack$summarize = function (model) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$h4,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('System overview')
						])),
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$style(
							_elm_lang$core$Native_List.fromArray(
								[
									{ctor: '_Tuple2', _0: 'line-height', _1: '1.8'},
									{ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'}
								]))
						]),
					A2(
						_elm_lang$core$List$map,
						_circuithub$elm_bootstrap_html$Bootstrap_Html$row_,
						A2(
							_elm_lang$core$List$map,
							_elm_lang$core$List$concat,
							A2(
								_narkisr$elm_ui$Common_Utils$partition,
								2,
								A2(
									_elm_lang$core$List$map,
									_narkisr$elm_ui$Common_Summary$summaryPanel,
									_narkisr$elm_ui$Systems_View_Openstack$summarySections(model))))))
				]))
		]);
};
var _narkisr$elm_ui$Systems_View_Openstack$Model = function (a) {
	return {id: a};
};
var _narkisr$elm_ui$Systems_View_Openstack$init = _narkisr$elm_ui$Common_Utils$none(
	_narkisr$elm_ui$Systems_View_Openstack$Model(0));

var _narkisr$elm_ui$Systems_Add_Openstack$getFlavors = function (model) {
	var hypervisor = A2(
		_elm_lang$core$Maybe$withDefault,
		_narkisr$elm_ui$Environments_List$Empty,
		A2(_elm_lang$core$Dict$get, 'openstack', model.environment));
	var _p0 = hypervisor;
	if (_p0.ctor === 'Openstack') {
		return _p0._0;
	} else {
		return _elm_lang$core$Dict$empty;
	}
};
var _narkisr$elm_ui$Systems_Add_Openstack$setDefaultFlavor = F2(
	function (hyp, _p1) {
		var _p2 = _p1;
		var _p5 = _p2.openstack;
		var _p4 = _p2;
		var _p3 = _elm_lang$core$List$head(
			_elm_lang$core$Dict$keys(
				_narkisr$elm_ui$Systems_Add_Openstack$getFlavors(_p4)));
		if (_p3.ctor === 'Just') {
			return _elm_lang$core$String$isEmpty(_p5.flavor) ? _elm_lang$core$Native_Utils.update(
				_p4,
				{
					openstack: _elm_lang$core$Native_Utils.update(
						_p5,
						{flavor: _p3._0})
				}) : _p4;
		} else {
			return _p4;
		}
	});
var _narkisr$elm_ui$Systems_Add_Openstack$ignoreDevices = function (_p6) {
	var _p7 = _p6;
	var ignored = A2(
		_elm_lang$core$Dict$remove,
		'Volume',
		A2(
			_elm_lang$core$Dict$remove,
			'Instance Device',
			A2(_elm_lang$core$Dict$remove, 'Cinder Device', _p7.errors)));
	return _elm_lang$core$Native_Utils.update(
		_p7,
		{errors: ignored});
};
var _narkisr$elm_ui$Systems_Add_Openstack$setVolume = F2(
	function (f, _p8) {
		var _p9 = _p8;
		var newVolume = f(_p9.volume);
		return _elm_lang$core$Native_Utils.update(
			_p9,
			{volume: newVolume});
	});
var _narkisr$elm_ui$Systems_Add_Openstack$setOpenstack = F2(
	function (f, _p10) {
		var _p11 = _p10;
		var newOpenstack = f(_p11.openstack);
		return _elm_lang$core$Native_Utils.update(
			_p11,
			{openstack: newOpenstack});
	});
var _narkisr$elm_ui$Systems_Add_Openstack$Model = F6(
	function (a, b, c, d, e, f) {
		return {wizard: a, openstack: b, machine: c, environment: d, errors: e, volume: f};
	});
var _narkisr$elm_ui$Systems_Add_Openstack$VolumeRemove = function (a) {
	return {ctor: 'VolumeRemove', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$volumeRow = function (_p12) {
	var _p13 = _p12;
	var props = _elm_lang$core$Native_List.fromArray(
		[
			function (_) {
			return _.device;
		},
			function (_p14) {
			return _elm_lang$core$Basics$toString(
				function (_) {
					return _.size;
				}(_p14));
		},
			function (_p15) {
			return _elm_lang$core$Basics$toString(
				function (_) {
					return _.clear;
				}(_p15));
		}
		]);
	var remove = A2(
		_elm_lang$html$Html$span,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('glyphicon glyphicon-remove'),
				A2(_elm_lang$html$Html_Attributes$attribute, 'aria-hidden', 'true'),
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'top', _1: '5px'}
					])),
				_elm_lang$html$Html_Events$onClick(
				_narkisr$elm_ui$Systems_Add_Openstack$VolumeRemove(_p13.device))
			]),
		_elm_lang$core$Native_List.fromArray(
			[]));
	return A2(
		_elm_lang$html$Html$tr,
		_elm_lang$core$Native_List.fromArray(
			[]),
		A2(
			_elm_lang$core$List$append,
			A2(
				_elm_lang$core$List$map,
				function (prop) {
					return A2(
						_elm_lang$html$Html$td,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text(
								prop(_p13))
							]));
				},
				props),
			_elm_lang$core$Native_List.fromArray(
				[remove])));
};
var _narkisr$elm_ui$Systems_Add_Openstack$volumes = function (vs) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('col-md-8 col-md-offset-2 ')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$table,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('table'),
						_elm_lang$html$Html_Attributes$id('ebsVolumes')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$thead,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$tr,
								_elm_lang$core$Native_List.fromArray(
									[]),
								A2(
									_elm_lang$core$List$map,
									function (k) {
										return A2(
											_elm_lang$html$Html$th,
											_elm_lang$core$Native_List.fromArray(
												[]),
											_elm_lang$core$Native_List.fromArray(
												[
													_elm_lang$html$Html$text(k)
												]));
									},
									_elm_lang$core$Native_List.fromArray(
										['device', 'size', 'clear', ''])))
							])),
						A2(
						_elm_lang$html$Html$tbody,
						_elm_lang$core$Native_List.fromArray(
							[]),
						A2(
							_elm_lang$core$List$map,
							function (volume) {
								return _narkisr$elm_ui$Systems_Add_Openstack$volumeRow(volume);
							},
							vs))
					]))
			]));
};
var _narkisr$elm_ui$Systems_Add_Openstack$VolumeAdd = {ctor: 'VolumeAdd'};
var _narkisr$elm_ui$Systems_Add_Openstack$CinderClear = {ctor: 'CinderClear'};
var _narkisr$elm_ui$Systems_Add_Openstack$CinderDeviceInput = function (a) {
	return {ctor: 'CinderDeviceInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$CinderSizeInput = function (a) {
	return {ctor: 'CinderSizeInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$cinder = function (_p16) {
	var _p17 = _p16;
	var _p18 = _p17.volume;
	var check = _narkisr$elm_ui$Common_Components$withErrors(_p17.errors);
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-horizontal'),
					A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Devices')
						])),
					A2(
					check,
					'Cinder Device',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Openstack$CinderDeviceInput, 'sdh', _p18.device)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Size',
					A3(
						_narkisr$elm_ui$Common_Components$inputNumber,
						_narkisr$elm_ui$Systems_Add_Openstack$CinderSizeInput,
						'',
						_elm_lang$core$Basics$toString(_p18.size))),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Clear',
					A2(_narkisr$elm_ui$Common_Components$checkbox, _narkisr$elm_ui$Systems_Add_Openstack$CinderClear, _p18.clear)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'',
					A2(
						_elm_lang$html$Html$button,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('btn btn-sm col-md-2'),
								_elm_lang$html$Html_Events$onClick(_narkisr$elm_ui$Systems_Add_Openstack$VolumeAdd)
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('Add')
							]))),
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Volumes')
						])),
					_narkisr$elm_ui$Systems_Add_Openstack$volumes(
					_narkisr$elm_ui$Common_Utils$defaultEmpty(_p17.openstack.volumes))
				]))
		]);
};
var _narkisr$elm_ui$Systems_Add_Openstack$NetworksInput = function (a) {
	return {ctor: 'NetworksInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$IPPoolInput = function (a) {
	return {ctor: 'IPPoolInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$IPInput = function (a) {
	return {ctor: 'IPInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$DomainInput = function (a) {
	return {ctor: 'DomainInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$HostnameInput = function (a) {
	return {ctor: 'HostnameInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$networking = function (_p19) {
	var _p20 = _p19;
	var _p22 = _p20.openstack;
	var _p21 = _p20.machine;
	var networks = A2(_elm_lang$core$String$join, ' ', _p22.networks);
	var check = _narkisr$elm_ui$Common_Components$withErrors(_p20.errors);
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-horizontal'),
					A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Networking')
						])),
					A2(
					check,
					'Hostname',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Openstack$HostnameInput, '', _p21.hostname)),
					A2(
					check,
					'Domain',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Openstack$DomainInput, '', _p21.domain)),
					A2(
					check,
					'IP',
					A3(
						_narkisr$elm_ui$Common_Components$inputText,
						_narkisr$elm_ui$Systems_Add_Openstack$IPInput,
						'',
						A2(_elm_lang$core$Maybe$withDefault, '', _p22.floatingIp))),
					A2(
					check,
					'IP-Pool',
					A3(
						_narkisr$elm_ui$Common_Components$inputText,
						_narkisr$elm_ui$Systems_Add_Openstack$IPPoolInput,
						'',
						A2(_elm_lang$core$Maybe$withDefault, '', _p22.floatingIpPool))),
					A2(
					check,
					'Networks',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Openstack$NetworksInput, ' ', networks))
				]))
		]);
};
var _narkisr$elm_ui$Systems_Add_Openstack$TenantInput = function (a) {
	return {ctor: 'TenantInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$UserInput = function (a) {
	return {ctor: 'UserInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$SecurityGroupsInput = function (a) {
	return {ctor: 'SecurityGroupsInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$KeyPairInput = function (a) {
	return {ctor: 'KeyPairInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$SelectOS = function (a) {
	return {ctor: 'SelectOS', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$SelectFlavor = function (a) {
	return {ctor: 'SelectFlavor', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$instance = function (_p23) {
	var _p24 = _p23;
	var _p27 = _p24.openstack;
	var _p26 = _p24;
	var _p25 = _p24.machine;
	var oses = _elm_lang$core$Dict$keys(
		A2(_narkisr$elm_ui$Systems_Add_Common$getOses, 'openstack', _p26));
	var flavors = _elm_lang$core$Dict$keys(
		_narkisr$elm_ui$Systems_Add_Openstack$getFlavors(_p26));
	var groups = A2(
		_elm_lang$core$String$join,
		' ',
		_narkisr$elm_ui$Common_Utils$defaultEmpty(_p27.securityGroups));
	var check = _narkisr$elm_ui$Common_Components$withErrors(_p24.errors);
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-horizontal'),
					A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Properties')
						])),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Flavor',
					A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Systems_Add_Openstack$SelectFlavor, flavors, _p27.flavor)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'OS',
					A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Systems_Add_Openstack$SelectOS, oses, _p25.os)),
					A2(
					check,
					'Tenant',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Openstack$TenantInput, '', _p27.tenant)),
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Security')
						])),
					A2(
					check,
					'User',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Openstack$UserInput, '', _p25.user)),
					A2(
					check,
					'Keypair',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Openstack$KeyPairInput, '', _p27.keyName)),
					A2(
					check,
					'Security groups',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Openstack$SecurityGroupsInput, ' ', groups))
				]))
		]);
};
var _narkisr$elm_ui$Systems_Add_Openstack$stepView = function (_p28) {
	var _p29 = _p28;
	var _p32 = _p29.wizard;
	var _p31 = _p29;
	var _p30 = _p32.step;
	switch (_p30.ctor) {
		case 'Instance':
			return _narkisr$elm_ui$Systems_Add_Openstack$instance(_p31);
		case 'Networking':
			return _narkisr$elm_ui$Systems_Add_Openstack$networking(_p31);
		case 'Cinder':
			return _narkisr$elm_ui$Systems_Add_Openstack$cinder(_p31);
		case 'Summary':
			return _narkisr$elm_ui$Systems_View_Openstack$summarize(
				{ctor: '_Tuple2', _0: _p29.openstack, _1: _p29.machine});
		default:
			return A2(
				_elm_lang$core$Debug$log,
				_elm_lang$core$Basics$toString(_p32.step),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					]));
	}
};
var _narkisr$elm_ui$Systems_Add_Openstack$view = function (model) {
	return _narkisr$elm_ui$Common_Components$fixedPanel(
		A2(
			_elm_lang$html$Html$form,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_narkisr$elm_ui$Systems_Add_Openstack$stepView(model)));
};
var _narkisr$elm_ui$Systems_Add_Openstack$Update = function (a) {
	return {ctor: 'Update', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$WizardMsg = function (a) {
	return {ctor: 'WizardMsg', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Openstack$Summary = {ctor: 'Summary'};
var _narkisr$elm_ui$Systems_Add_Openstack$Cinder = {ctor: 'Cinder'};
var _narkisr$elm_ui$Systems_Add_Openstack$tupleValidations = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_Openstack$Cinder,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'Cinder Device',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Cinder Device',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notContained]),
						function (_p33) {
							var _p34 = _p33;
							return {
								ctor: '_Tuple2',
								_0: _p34.volume.device,
								_1: A2(
									_elm_lang$core$List$map,
									function (_) {
										return _.device;
									},
									_narkisr$elm_ui$Common_Utils$defaultEmpty(_p34.openstack.volumes))
							};
						})
				}
				]))
		]));
var _narkisr$elm_ui$Systems_Add_Openstack$Networking = {ctor: 'Networking'};
var _narkisr$elm_ui$Systems_Add_Openstack$Instance = {ctor: 'Instance'};
var _narkisr$elm_ui$Systems_Add_Openstack$stringValidations = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_Openstack$Networking,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'Hostname',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Hostname',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p35) {
							var _p36 = _p35;
							return _p36.machine.hostname;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'Domain',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Domain',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p37) {
							var _p38 = _p37;
							return _p38.machine.domain;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'IP',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'IP',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$validIp]),
						function (_p39) {
							var _p40 = _p39;
							return A2(_elm_lang$core$Maybe$withDefault, '', _p40.openstack.floatingIp);
						})
				}
				])),
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_Openstack$Instance,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'User',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'User',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p41) {
							var _p42 = _p41;
							return _p42.machine.user;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'Keypair',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Keypair',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p43) {
							var _p44 = _p43;
							return _p44.openstack.keyName;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'Tenant',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Tenant',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p45) {
							var _p46 = _p45;
							return _p46.openstack.tenant;
						})
				}
				]))
		]));
var _narkisr$elm_ui$Systems_Add_Openstack$listValidations = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_Openstack$Instance,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'Security groups',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Security groups',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$hasItems]),
						function (_p47) {
							var _p48 = _p47;
							return _narkisr$elm_ui$Common_Utils$defaultEmpty(_p48.openstack.securityGroups);
						})
				}
				])),
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_Openstack$Networking,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'Networks',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Networks',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$hasItems]),
						function (_p49) {
							var _p50 = _p49;
							return _p50.openstack.networks;
						})
				}
				]))
		]));
var _narkisr$elm_ui$Systems_Add_Openstack$validateOpenstack = _narkisr$elm_ui$Systems_Add_Validations$validateAll(
	_elm_lang$core$Native_List.fromArray(
		[_narkisr$elm_ui$Systems_Add_Openstack$stringValidations, _narkisr$elm_ui$Systems_Add_Openstack$listValidations]));
var _narkisr$elm_ui$Systems_Add_Openstack$update = F2(
	function (msg, _p51) {
		var _p52 = _p51;
		var _p59 = _p52.wizard;
		var _p58 = _p52.openstack;
		var _p57 = _p52;
		var _p53 = msg;
		switch (_p53.ctor) {
			case 'WizardMsg':
				var _p54 = _narkisr$elm_ui$Systems_Add_Openstack$ignoreDevices(
					A2(_narkisr$elm_ui$Systems_Add_Openstack$validateOpenstack, _p59.step, _p57));
				var newModel = _p54;
				var errors = _p54.errors;
				var newWizard = A3(
					_narkisr$elm_ui$Common_Wizard$update,
					_narkisr$elm_ui$Systems_Add_Validations$notAny(errors),
					_p53._0,
					_p59);
				return _elm_lang$core$Native_Utils.update(
					newModel,
					{wizard: newWizard});
			case 'Update':
				return A2(
					_narkisr$elm_ui$Systems_Add_Openstack$setDefaultFlavor,
					_p57,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setDefaultOS,
						'openstack',
						_elm_lang$core$Native_Utils.update(
							_p57,
							{environment: _p53._0})));
			case 'SelectFlavor':
				return A2(
					_narkisr$elm_ui$Systems_Add_Openstack$setOpenstack,
					function (openstack) {
						return _elm_lang$core$Native_Utils.update(
							openstack,
							{flavor: _p53._0});
					},
					_p57);
			case 'SelectOS':
				return A2(
					_narkisr$elm_ui$Systems_Add_Common$setMachine,
					function (machine) {
						return _elm_lang$core$Native_Utils.update(
							machine,
							{os: _p53._0});
					},
					_p57);
			case 'TenantInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p59.step,
					'Tenant',
					_narkisr$elm_ui$Systems_Add_Openstack$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Openstack$setOpenstack,
						function (openstack) {
							return _elm_lang$core$Native_Utils.update(
								openstack,
								{tenant: _p53._0});
						},
						_p57));
			case 'KeyPairInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p59.step,
					'Keypair',
					_narkisr$elm_ui$Systems_Add_Openstack$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Openstack$setOpenstack,
						function (openstack) {
							return _elm_lang$core$Native_Utils.update(
								openstack,
								{keyName: _p53._0});
						},
						_p57));
			case 'SecurityGroupsInput':
				var splited = A2(_elm_lang$core$String$split, ' ', _p53._0);
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p59.step,
					'Security groups',
					_narkisr$elm_ui$Systems_Add_Openstack$listValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Openstack$setOpenstack,
						function (openstack) {
							return _elm_lang$core$Native_Utils.update(
								openstack,
								{
									securityGroups: _elm_lang$core$Maybe$Just(
										_elm_lang$core$Native_Utils.eq(
											splited,
											_elm_lang$core$Native_List.fromArray(
												[''])) ? _elm_lang$core$Native_List.fromArray(
											[]) : splited)
								});
						},
						_p57));
			case 'NetworksInput':
				var splited = A2(_elm_lang$core$String$split, ' ', _p53._0);
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p59.step,
					'Networks',
					_narkisr$elm_ui$Systems_Add_Openstack$listValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Openstack$setOpenstack,
						function (openstack) {
							return _elm_lang$core$Native_Utils.update(
								openstack,
								{networks: splited});
						},
						_p57));
			case 'UserInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p59.step,
					'User',
					_narkisr$elm_ui$Systems_Add_Openstack$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{user: _p53._0});
						},
						_p57));
			case 'HostnameInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p59.step,
					'Hostname',
					_narkisr$elm_ui$Systems_Add_Openstack$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{hostname: _p53._0});
						},
						_p57));
			case 'DomainInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p59.step,
					'Domain',
					_narkisr$elm_ui$Systems_Add_Openstack$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{domain: _p53._0});
						},
						_p57));
			case 'IPInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p59.step,
					'IP',
					_narkisr$elm_ui$Systems_Add_Openstack$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Openstack$setOpenstack,
						function (openstack) {
							return _elm_lang$core$Native_Utils.update(
								openstack,
								{
									floatingIp: _elm_lang$core$Maybe$Just(_p53._0)
								});
						},
						_p57));
			case 'IPPoolInput':
				return A2(
					_narkisr$elm_ui$Systems_Add_Openstack$setOpenstack,
					function (openstack) {
						return _elm_lang$core$Native_Utils.update(
							openstack,
							{
								floatingIpPool: _elm_lang$core$Maybe$Just(_p53._0)
							});
					},
					_p57);
			case 'CinderSizeInput':
				var _p55 = _elm_lang$core$String$toInt(_p53._0);
				if (_p55.ctor === 'Ok') {
					return A2(
						_narkisr$elm_ui$Systems_Add_Openstack$setVolume,
						function (volume) {
							return _elm_lang$core$Native_Utils.update(
								volume,
								{size: _p55._0});
						},
						_p57);
				} else {
					return _p57;
				}
			case 'CinderDeviceInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p59.step,
					'Cinder Device',
					_narkisr$elm_ui$Systems_Add_Openstack$tupleValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Openstack$setVolume,
						function (volume) {
							return _elm_lang$core$Native_Utils.update(
								volume,
								{device: _p53._0});
						},
						_p57));
			case 'CinderClear':
				return A2(
					_narkisr$elm_ui$Systems_Add_Openstack$setVolume,
					function (volume) {
						return _elm_lang$core$Native_Utils.update(
							volume,
							{
								clear: _elm_lang$core$Basics$not(volume.clear)
							});
					},
					_p57);
			case 'VolumeAdd':
				var newOpenstack = _elm_lang$core$Native_Utils.update(
					_p58,
					{
						volumes: _elm_lang$core$Maybe$Just(
							A2(
								_elm_lang$core$List$append,
								_elm_lang$core$Native_List.fromArray(
									[_p52.volume]),
								_narkisr$elm_ui$Common_Utils$defaultEmpty(_p58.volumes)))
					});
				var _p56 = A4(_narkisr$elm_ui$Systems_Add_Validations$validate, _p59.step, 'Cinder Device', _narkisr$elm_ui$Systems_Add_Openstack$tupleValidations, _p57);
				var newModel = _p56;
				var errors = _p56.errors;
				return _narkisr$elm_ui$Systems_Add_Validations$notAny(errors) ? _elm_lang$core$Native_Utils.update(
					newModel,
					{volume: _narkisr$elm_ui$Systems_Model_Openstack$emptyVolume, openstack: newOpenstack}) : _elm_lang$core$Native_Utils.update(
					newModel,
					{openstack: _p58});
			default:
				var newVolumes = A2(
					_elm_lang$core$List$filter,
					function (volume) {
						return !_elm_lang$core$Native_Utils.eq(volume.device, _p53._0);
					},
					_narkisr$elm_ui$Common_Utils$defaultEmpty(_p58.volumes));
				var newOpenstack = _elm_lang$core$Native_Utils.update(
					_p58,
					{
						volumes: _elm_lang$core$Maybe$Just(newVolumes)
					});
				return _elm_lang$core$Native_Utils.update(
					_p57,
					{openstack: newOpenstack});
		}
	});
var _narkisr$elm_ui$Systems_Add_Openstack$next = F2(
	function (model, environment) {
		return A2(
			_narkisr$elm_ui$Systems_Add_Openstack$update,
			_narkisr$elm_ui$Systems_Add_Openstack$WizardMsg(_narkisr$elm_ui$Common_Wizard$Next),
			A2(
				_narkisr$elm_ui$Systems_Add_Openstack$update,
				_narkisr$elm_ui$Systems_Add_Openstack$Update(environment),
				model));
	});
var _narkisr$elm_ui$Systems_Add_Openstack$back = function (model) {
	return A2(
		_narkisr$elm_ui$Systems_Add_Openstack$update,
		_narkisr$elm_ui$Systems_Add_Openstack$WizardMsg(_narkisr$elm_ui$Common_Wizard$Back),
		model);
};
var _narkisr$elm_ui$Systems_Add_Openstack$Zero = {ctor: 'Zero'};
var _narkisr$elm_ui$Systems_Add_Openstack$init = function () {
	var wizard = A3(
		_narkisr$elm_ui$Common_Wizard$init,
		_narkisr$elm_ui$Systems_Add_Openstack$Zero,
		_narkisr$elm_ui$Systems_Add_Openstack$Instance,
		_elm_lang$core$Native_List.fromArray(
			[_narkisr$elm_ui$Systems_Add_Openstack$Instance, _narkisr$elm_ui$Systems_Add_Openstack$Networking, _narkisr$elm_ui$Systems_Add_Openstack$Cinder, _narkisr$elm_ui$Systems_Add_Openstack$Summary]));
	return A6(_narkisr$elm_ui$Systems_Add_Openstack$Model, wizard, _narkisr$elm_ui$Systems_Model_Openstack$emptyOpenstack, _narkisr$elm_ui$Systems_Model_Common$emptyMachine, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty, _narkisr$elm_ui$Systems_Model_Openstack$emptyVolume);
}();

var _narkisr$elm_ui$Systems_View_KVM$view = function (model) {
	return _narkisr$elm_ui$Common_Components$fixedPanel(
		A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])));
};
var _narkisr$elm_ui$Systems_View_KVM$summarySections = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1._1;
	return _elm_lang$core$Native_List.fromArray(
		[
			A3(
			_narkisr$elm_ui$Common_Summary$overviewSection,
			'Network',
			_elm_lang$core$Native_List.fromArray(
				['user', 'hostname', 'domain']),
			_elm_lang$core$Native_List.fromArray(
				[_p2.os, _p2.user, _p2.hostname, _p2.domain])),
			A3(
			_narkisr$elm_ui$Common_Summary$overviewSection,
			'Domain',
			_elm_lang$core$Native_List.fromArray(
				['os', 'node']),
			_elm_lang$core$Native_List.fromArray(
				[_p2.os, _p1._0.node])),
			A3(
			_narkisr$elm_ui$Common_Summary$overviewSection,
			'Resources',
			_elm_lang$core$Native_List.fromArray(
				['cpu', 'ram']),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Basics$toString(
					A2(_elm_lang$core$Maybe$withDefault, 0, _p2.cpu)),
					_elm_lang$core$Basics$toString(
					A2(_elm_lang$core$Maybe$withDefault, 0, _p2.ram))
				]))
		]);
};
var _narkisr$elm_ui$Systems_View_KVM$summarize = function (model) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$h4,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('System overview')
						])),
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$style(
							_elm_lang$core$Native_List.fromArray(
								[
									{ctor: '_Tuple2', _0: 'line-height', _1: '1.8'},
									{ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'}
								]))
						]),
					A2(
						_elm_lang$core$List$map,
						_circuithub$elm_bootstrap_html$Bootstrap_Html$row_,
						A2(
							_elm_lang$core$List$map,
							_elm_lang$core$List$concat,
							A2(
								_narkisr$elm_ui$Common_Utils$partition,
								2,
								A2(
									_elm_lang$core$List$map,
									_narkisr$elm_ui$Common_Summary$summaryPanel,
									_narkisr$elm_ui$Systems_View_KVM$summarySections(model))))))
				]))
		]);
};
var _narkisr$elm_ui$Systems_View_KVM$Model = function (a) {
	return {id: a};
};
var _narkisr$elm_ui$Systems_View_KVM$init = _narkisr$elm_ui$Common_Utils$none(
	_narkisr$elm_ui$Systems_View_KVM$Model(0));

var _narkisr$elm_ui$Systems_Add_KVM$setKVM = F2(
	function (f, _p0) {
		var _p1 = _p0;
		var newKvm = f(_p1.kvm);
		return _elm_lang$core$Native_Utils.update(
			_p1,
			{kvm: newKvm});
	});
var _narkisr$elm_ui$Systems_Add_KVM$getNodes = function (model) {
	var hypervisor = A2(
		_elm_lang$core$Maybe$withDefault,
		_narkisr$elm_ui$Environments_List$Empty,
		A2(_elm_lang$core$Dict$get, 'kvm', model.environment));
	var _p2 = hypervisor;
	if (_p2.ctor === 'KVM') {
		return _p2._1;
	} else {
		return _elm_lang$core$Dict$empty;
	}
};
var _narkisr$elm_ui$Systems_Add_KVM$setDefaultNode = F2(
	function (hyp, _p3) {
		var _p4 = _p3;
		var _p7 = _p4;
		var _p6 = _p4.kvm;
		var _p5 = _elm_lang$core$List$head(
			_elm_lang$core$Dict$keys(
				_narkisr$elm_ui$Systems_Add_KVM$getNodes(_p7)));
		if (_p5.ctor === 'Just') {
			return _elm_lang$core$String$isEmpty(_p6.node) ? _elm_lang$core$Native_Utils.update(
				_p7,
				{
					kvm: _elm_lang$core$Native_Utils.update(
						_p6,
						{node: _p5._0})
				}) : _p7;
		} else {
			return _p7;
		}
	});
var _narkisr$elm_ui$Systems_Add_KVM$Model = F5(
	function (a, b, c, d, e) {
		return {wizard: a, kvm: b, machine: c, environment: d, errors: e};
	});
var _narkisr$elm_ui$Systems_Add_KVM$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Systems_Add_KVM$DomainInput = function (a) {
	return {ctor: 'DomainInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_KVM$HostnameInput = function (a) {
	return {ctor: 'HostnameInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_KVM$RamInput = function (a) {
	return {ctor: 'RamInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_KVM$CpuInput = function (a) {
	return {ctor: 'CpuInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_KVM$UserInput = function (a) {
	return {ctor: 'UserInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_KVM$SelectNode = function (a) {
	return {ctor: 'SelectNode', _0: a};
};
var _narkisr$elm_ui$Systems_Add_KVM$SelectOS = function (a) {
	return {ctor: 'SelectOS', _0: a};
};
var _narkisr$elm_ui$Systems_Add_KVM$instance = function (_p8) {
	var _p9 = _p8;
	var _p11 = _p9;
	var _p10 = _p9.machine;
	var nodes = _elm_lang$core$Dict$keys(
		_narkisr$elm_ui$Systems_Add_KVM$getNodes(_p11));
	var oses = _elm_lang$core$Dict$keys(
		A2(_narkisr$elm_ui$Systems_Add_Common$getOses, 'kvm', _p11));
	var check = _narkisr$elm_ui$Common_Components$withErrors(_p9.errors);
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-horizontal'),
					A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Domain')
						])),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'OS',
					A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Systems_Add_KVM$SelectOS, oses, _p10.os)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Node',
					A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Systems_Add_KVM$SelectNode, nodes, _p9.kvm.node)),
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Resources')
						])),
					A2(
					check,
					'Cpu',
					A3(
						_narkisr$elm_ui$Common_Components$inputText,
						_narkisr$elm_ui$Systems_Add_KVM$CpuInput,
						'',
						_elm_lang$core$Basics$toString(
							A2(_elm_lang$core$Maybe$withDefault, 0, _p10.cpu)))),
					A2(
					check,
					'Ram (mb)',
					A3(
						_narkisr$elm_ui$Common_Components$inputText,
						_narkisr$elm_ui$Systems_Add_KVM$RamInput,
						'',
						_elm_lang$core$Basics$toString(
							A2(_elm_lang$core$Maybe$withDefault, 0, _p10.ram)))),
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Network')
						])),
					A2(
					check,
					'User',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_KVM$UserInput, '', _p10.user)),
					A2(
					check,
					'Hostname',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_KVM$HostnameInput, '', _p10.hostname)),
					A2(
					check,
					'Domain',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_KVM$DomainInput, '', _p10.domain))
				]))
		]);
};
var _narkisr$elm_ui$Systems_Add_KVM$stepView = function (_p12) {
	var _p13 = _p12;
	var _p14 = _p13.wizard.step;
	switch (_p14.ctor) {
		case 'Instance':
			return _narkisr$elm_ui$Systems_Add_KVM$instance(_p13);
		case 'Summary':
			return _narkisr$elm_ui$Systems_View_KVM$summarize(
				{ctor: '_Tuple2', _0: _p13.kvm, _1: _p13.machine});
		default:
			return _elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[]))
				]);
	}
};
var _narkisr$elm_ui$Systems_Add_KVM$view = function (model) {
	return _narkisr$elm_ui$Common_Components$fixedPanel(
		A2(
			_elm_lang$html$Html$form,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_narkisr$elm_ui$Systems_Add_KVM$stepView(model)));
};
var _narkisr$elm_ui$Systems_Add_KVM$Update = function (a) {
	return {ctor: 'Update', _0: a};
};
var _narkisr$elm_ui$Systems_Add_KVM$WizardMsg = function (a) {
	return {ctor: 'WizardMsg', _0: a};
};
var _narkisr$elm_ui$Systems_Add_KVM$Summary = {ctor: 'Summary'};
var _narkisr$elm_ui$Systems_Add_KVM$Instance = {ctor: 'Instance'};
var _narkisr$elm_ui$Systems_Add_KVM$stringValidations = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_KVM$Instance,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'User',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'User',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p15) {
							var _p16 = _p15;
							return _p16.machine.user;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'Hostname',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Hostname',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p17) {
							var _p18 = _p17;
							return _p18.machine.hostname;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'Domain',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Domain',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p19) {
							var _p20 = _p19;
							return _p20.machine.domain;
						})
				}
				]))
		]));
var _narkisr$elm_ui$Systems_Add_KVM$validateKvm = _narkisr$elm_ui$Systems_Add_Validations$validateAll(
	_elm_lang$core$Native_List.fromArray(
		[_narkisr$elm_ui$Systems_Add_KVM$stringValidations]));
var _narkisr$elm_ui$Systems_Add_KVM$update = F2(
	function (msg, _p21) {
		var _p22 = _p21;
		var _p28 = _p22.wizard;
		var _p27 = _p22;
		var _p23 = msg;
		switch (_p23.ctor) {
			case 'WizardMsg':
				var _p24 = A2(_narkisr$elm_ui$Systems_Add_KVM$validateKvm, _p28.step, _p27);
				var newModel = _p24;
				var errors = _p24.errors;
				var newWizard = A3(
					_narkisr$elm_ui$Common_Wizard$update,
					_narkisr$elm_ui$Systems_Add_Validations$notAny(errors),
					_p23._0,
					_p28);
				return _elm_lang$core$Native_Utils.update(
					newModel,
					{wizard: newWizard});
			case 'Update':
				return A2(
					_narkisr$elm_ui$Systems_Add_KVM$setDefaultNode,
					_p27,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setDefaultOS,
						'kvm',
						_elm_lang$core$Native_Utils.update(
							_p27,
							{environment: _p23._0})));
			case 'SelectOS':
				return A2(
					_narkisr$elm_ui$Systems_Add_Common$setMachine,
					function (machine) {
						return _elm_lang$core$Native_Utils.update(
							machine,
							{os: _p23._0});
					},
					_p27);
			case 'SelectNode':
				return A2(
					_narkisr$elm_ui$Systems_Add_KVM$setKVM,
					function (kvm) {
						return _elm_lang$core$Native_Utils.update(
							kvm,
							{node: _p23._0});
					},
					_p27);
			case 'UserInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p28.step,
					'User',
					_narkisr$elm_ui$Systems_Add_KVM$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{user: _p23._0});
						},
						_p27));
			case 'HostnameInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p28.step,
					'Hostname',
					_narkisr$elm_ui$Systems_Add_KVM$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{hostname: _p23._0});
						},
						_p27));
			case 'DomainInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p28.step,
					'Domain',
					_narkisr$elm_ui$Systems_Add_KVM$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{domain: _p23._0});
						},
						_p27));
			case 'CpuInput':
				var _p25 = A2(
					_elm_lang$core$Debug$log,
					'',
					_elm_lang$core$String$toInt(_p23._0));
				if (_p25.ctor === 'Ok') {
					return A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{
									cpu: _elm_lang$core$Maybe$Just(_p25._0)
								});
						},
						_p27);
				} else {
					return _p27;
				}
			case 'RamInput':
				var _p26 = _elm_lang$core$String$toInt(_p23._0);
				if (_p26.ctor === 'Ok') {
					return A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{
									ram: _elm_lang$core$Maybe$Just(_p26._0)
								});
						},
						_p27);
				} else {
					return _p27;
				}
			default:
				return _p27;
		}
	});
var _narkisr$elm_ui$Systems_Add_KVM$next = F2(
	function (model, environment) {
		return A2(
			_narkisr$elm_ui$Systems_Add_KVM$update,
			_narkisr$elm_ui$Systems_Add_KVM$WizardMsg(_narkisr$elm_ui$Common_Wizard$Next),
			A2(
				_narkisr$elm_ui$Systems_Add_KVM$update,
				_narkisr$elm_ui$Systems_Add_KVM$Update(environment),
				model));
	});
var _narkisr$elm_ui$Systems_Add_KVM$back = function (model) {
	return A2(
		_narkisr$elm_ui$Systems_Add_KVM$update,
		_narkisr$elm_ui$Systems_Add_KVM$WizardMsg(_narkisr$elm_ui$Common_Wizard$Back),
		model);
};
var _narkisr$elm_ui$Systems_Add_KVM$Zero = {ctor: 'Zero'};
var _narkisr$elm_ui$Systems_Add_KVM$init = function () {
	var wizard = A3(
		_narkisr$elm_ui$Common_Wizard$init,
		_narkisr$elm_ui$Systems_Add_KVM$Zero,
		_narkisr$elm_ui$Systems_Add_KVM$Instance,
		_elm_lang$core$Native_List.fromArray(
			[_narkisr$elm_ui$Systems_Add_KVM$Instance, _narkisr$elm_ui$Systems_Add_KVM$Summary]));
	return A5(
		_narkisr$elm_ui$Systems_Add_KVM$Model,
		wizard,
		_narkisr$elm_ui$Systems_Model_KVM$emptyKVM,
		A2(_narkisr$elm_ui$Systems_Model_Common$resourcedMachine, 1, 512),
		_elm_lang$core$Dict$empty,
		_elm_lang$core$Dict$empty);
}();

var _narkisr$elm_ui$Systems_View_GCE$view = function (model) {
	return _narkisr$elm_ui$Common_Components$fixedPanel(
		A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])));
};
var _narkisr$elm_ui$Systems_View_GCE$summarySections = function (_p0) {
	var _p1 = _p0;
	var _p4 = _p1._1;
	var _p3 = _p1._0;
	return A2(
		_elm_lang$core$List$filter,
		function (_p2) {
			return _elm_lang$core$Basics$not(
				_elm_lang$core$List$isEmpty(_p2));
		},
		_elm_lang$core$Native_List.fromArray(
			[
				A3(
				_narkisr$elm_ui$Common_Summary$overviewSection,
				'Instance',
				_elm_lang$core$Native_List.fromArray(
					['type', 'os', 'zone', 'project id']),
				_elm_lang$core$Native_List.fromArray(
					[_p3.machineType, _p4.os, _p3.zone, _p3.projectId])),
				A3(
				_narkisr$elm_ui$Common_Summary$overviewSection,
				'Security',
				_elm_lang$core$Native_List.fromArray(
					['user', 'tags']),
				_elm_lang$core$Native_List.fromArray(
					[
						_p4.user,
						A2(
						_elm_lang$core$String$join,
						' ',
						A2(
							_elm_lang$core$Maybe$withDefault,
							_elm_lang$core$Native_List.fromArray(
								[]),
							_p3.tags))
					])),
				A3(
				_narkisr$elm_ui$Common_Summary$overviewSection,
				'Networking',
				_elm_lang$core$Native_List.fromArray(
					['hostname', 'domain', 'ip', 'static ip']),
				_elm_lang$core$Native_List.fromArray(
					[
						_p4.hostname,
						_p4.domain,
						A2(_elm_lang$core$Maybe$withDefault, '', _p4.ip),
						A2(_elm_lang$core$Maybe$withDefault, '', _p3.staticIp)
					]))
			]));
};
var _narkisr$elm_ui$Systems_View_GCE$summarize = function (model) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$h4,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('System overview')
						])),
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$style(
							_elm_lang$core$Native_List.fromArray(
								[
									{ctor: '_Tuple2', _0: 'line-height', _1: '1.8'},
									{ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'}
								]))
						]),
					A2(
						_elm_lang$core$List$map,
						_circuithub$elm_bootstrap_html$Bootstrap_Html$row_,
						A2(
							_elm_lang$core$List$map,
							_elm_lang$core$List$concat,
							A2(
								_narkisr$elm_ui$Common_Utils$partition,
								2,
								A2(
									_elm_lang$core$List$map,
									_narkisr$elm_ui$Common_Summary$summaryPanel,
									_narkisr$elm_ui$Systems_View_GCE$summarySections(model))))))
				]))
		]);
};
var _narkisr$elm_ui$Systems_View_GCE$Model = function (a) {
	return {id: a};
};
var _narkisr$elm_ui$Systems_View_GCE$init = _narkisr$elm_ui$Common_Utils$none(
	_narkisr$elm_ui$Systems_View_GCE$Model(0));

var _narkisr$elm_ui$Systems_Add_GCE$getOses = function (model) {
	var hypervisor = A2(
		_elm_lang$core$Maybe$withDefault,
		_narkisr$elm_ui$Environments_List$OSTemplates(_elm_lang$core$Dict$empty),
		A2(_elm_lang$core$Dict$get, 'gce', model.environment));
	var _p0 = hypervisor;
	if (_p0.ctor === 'OSTemplates') {
		return _p0._0;
	} else {
		return _elm_lang$core$Dict$empty;
	}
};
var _narkisr$elm_ui$Systems_Add_GCE$setGCE = F2(
	function (f, _p1) {
		var _p2 = _p1;
		var newGce = f(_p2.gce);
		return _elm_lang$core$Native_Utils.update(
			_p2,
			{gce: newGce});
	});
var _narkisr$elm_ui$Systems_Add_GCE$Model = F5(
	function (a, b, c, d, e) {
		return {wizard: a, gce: b, machine: c, environment: d, errors: e};
	});
var _narkisr$elm_ui$Systems_Add_GCE$IPInput = function (a) {
	return {ctor: 'IPInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_GCE$DomainInput = function (a) {
	return {ctor: 'DomainInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_GCE$HostnameInput = function (a) {
	return {ctor: 'HostnameInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_GCE$networking = function (_p3) {
	var _p4 = _p3;
	var _p5 = _p4.machine;
	var check = _narkisr$elm_ui$Common_Components$withErrors(_p4.errors);
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-horizontal'),
					A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('DNS')
						])),
					A2(
					check,
					'Hostname',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_GCE$HostnameInput, '', _p5.hostname)),
					A2(
					check,
					'Domain',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_GCE$DomainInput, '', _p5.domain)),
					A2(
					check,
					'IP',
					A3(
						_narkisr$elm_ui$Common_Components$inputText,
						_narkisr$elm_ui$Systems_Add_GCE$IPInput,
						'',
						A2(_elm_lang$core$Maybe$withDefault, '', _p4.gce.staticIp)))
				]))
		]);
};
var _narkisr$elm_ui$Systems_Add_GCE$TagsInput = function (a) {
	return {ctor: 'TagsInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_GCE$ProjectIdInput = function (a) {
	return {ctor: 'ProjectIdInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_GCE$UserInput = function (a) {
	return {ctor: 'UserInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_GCE$SelectZone = function (a) {
	return {ctor: 'SelectZone', _0: a};
};
var _narkisr$elm_ui$Systems_Add_GCE$SelectOS = function (a) {
	return {ctor: 'SelectOS', _0: a};
};
var _narkisr$elm_ui$Systems_Add_GCE$SelectMachineType = function (a) {
	return {ctor: 'SelectMachineType', _0: a};
};
var _narkisr$elm_ui$Systems_Add_GCE$instance = function (_p6) {
	var _p7 = _p6;
	var _p9 = _p7;
	var _p8 = _p7.gce;
	var zone = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(_narkisr$elm_ui$Systems_Model_GCE$zones));
	var tags = A2(
		_elm_lang$core$String$join,
		' ',
		_narkisr$elm_ui$Common_Utils$defaultEmpty(_p8.tags));
	var check = _narkisr$elm_ui$Common_Components$withErrors(_p7.errors);
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-horizontal'),
					A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Properties')
						])),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Machine type',
					A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Systems_Add_GCE$SelectMachineType, _narkisr$elm_ui$Systems_Model_GCE$machineTypes, _p8.machineType)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'OS',
					A3(
						_narkisr$elm_ui$Common_Components$selector,
						_narkisr$elm_ui$Systems_Add_GCE$SelectOS,
						_elm_lang$core$Dict$keys(
							_narkisr$elm_ui$Systems_Add_GCE$getOses(_p9)),
						_p7.machine.os)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Zone',
					A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Systems_Add_GCE$SelectZone, _narkisr$elm_ui$Systems_Model_GCE$zones, _p8.zone)),
					A2(
					check,
					'Project id',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_GCE$ProjectIdInput, '', _p8.projectId)),
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Security')
						])),
					A2(
					check,
					'User',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_GCE$UserInput, '', _p9.machine.user)),
					A2(
					check,
					'Tags',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_GCE$TagsInput, ' ', tags))
				]))
		]);
};
var _narkisr$elm_ui$Systems_Add_GCE$stepView = function (_p10) {
	var _p11 = _p10;
	var _p14 = _p11.wizard;
	var _p13 = _p11;
	var _p12 = _p14.step;
	switch (_p12.ctor) {
		case 'Instance':
			return _narkisr$elm_ui$Systems_Add_GCE$instance(_p13);
		case 'Networking':
			return _narkisr$elm_ui$Systems_Add_GCE$networking(_p13);
		case 'Summary':
			return _narkisr$elm_ui$Systems_View_GCE$summarize(
				{ctor: '_Tuple2', _0: _p11.gce, _1: _p11.machine});
		default:
			return A2(
				_elm_lang$core$Debug$log,
				_elm_lang$core$Basics$toString(_p14.step),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					]));
	}
};
var _narkisr$elm_ui$Systems_Add_GCE$view = function (model) {
	return _narkisr$elm_ui$Common_Components$fixedPanel(
		A2(
			_elm_lang$html$Html$form,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_narkisr$elm_ui$Systems_Add_GCE$stepView(model)));
};
var _narkisr$elm_ui$Systems_Add_GCE$Update = function (a) {
	return {ctor: 'Update', _0: a};
};
var _narkisr$elm_ui$Systems_Add_GCE$WizardMsg = function (a) {
	return {ctor: 'WizardMsg', _0: a};
};
var _narkisr$elm_ui$Systems_Add_GCE$Summary = {ctor: 'Summary'};
var _narkisr$elm_ui$Systems_Add_GCE$Networking = {ctor: 'Networking'};
var _narkisr$elm_ui$Systems_Add_GCE$Instance = {ctor: 'Instance'};
var _narkisr$elm_ui$Systems_Add_GCE$stringValidations = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_GCE$Networking,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'Hostname',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Hostname',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p15) {
							var _p16 = _p15;
							return _p16.machine.hostname;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'Domain',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Domain',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p17) {
							var _p18 = _p17;
							return _p18.machine.domain;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'IP',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'IP',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$validIp]),
						function (_p19) {
							var _p20 = _p19;
							return A2(_elm_lang$core$Maybe$withDefault, '', _p20.gce.staticIp);
						})
				}
				])),
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_GCE$Instance,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'User',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'User',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p21) {
							var _p22 = _p21;
							return _p22.machine.user;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'Project id',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Project id',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p23) {
							var _p24 = _p23;
							return _p24.gce.projectId;
						})
				}
				]))
		]));
var _narkisr$elm_ui$Systems_Add_GCE$listValidations = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_GCE$Instance,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'Tags',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Tags',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$hasItems]),
						function (_p25) {
							var _p26 = _p25;
							return _narkisr$elm_ui$Common_Utils$defaultEmpty(_p26.gce.tags);
						})
				}
				]))
		]));
var _narkisr$elm_ui$Systems_Add_GCE$validateGce = _narkisr$elm_ui$Systems_Add_Validations$validateAll(
	_elm_lang$core$Native_List.fromArray(
		[_narkisr$elm_ui$Systems_Add_GCE$listValidations, _narkisr$elm_ui$Systems_Add_GCE$stringValidations]));
var _narkisr$elm_ui$Systems_Add_GCE$update = F2(
	function (msg, _p27) {
		var _p28 = _p27;
		var _p34 = _p28.wizard;
		var _p33 = _p28;
		var _p32 = _p28.machine;
		var _p29 = msg;
		switch (_p29.ctor) {
			case 'WizardMsg':
				var _p30 = A2(_narkisr$elm_ui$Systems_Add_GCE$validateGce, _p34.step, _p33);
				var newModel = _p30;
				var errors = _p30.errors;
				var newWizard = A3(
					_narkisr$elm_ui$Common_Wizard$update,
					_narkisr$elm_ui$Systems_Add_Validations$notAny(errors),
					_p29._0,
					_p34);
				return _elm_lang$core$Native_Utils.update(
					newModel,
					{wizard: newWizard});
			case 'Update':
				var newModel = _elm_lang$core$Native_Utils.update(
					_p33,
					{environment: _p29._0});
				var _p31 = _elm_lang$core$List$head(
					_elm_lang$core$Dict$keys(
						_narkisr$elm_ui$Systems_Add_GCE$getOses(newModel)));
				if (_p31.ctor === 'Just') {
					return _elm_lang$core$String$isEmpty(_p32.os) ? _elm_lang$core$Native_Utils.update(
						newModel,
						{
							machine: _elm_lang$core$Native_Utils.update(
								_p32,
								{os: _p31._0})
						}) : newModel;
				} else {
					return newModel;
				}
			case 'SelectMachineType':
				return A2(
					_narkisr$elm_ui$Systems_Add_GCE$setGCE,
					function (gce) {
						return _elm_lang$core$Native_Utils.update(
							gce,
							{machineType: _p29._0});
					},
					_p33);
			case 'SelectOS':
				return A2(
					_narkisr$elm_ui$Systems_Add_Common$setMachine,
					function (machine) {
						return _elm_lang$core$Native_Utils.update(
							machine,
							{os: _p29._0});
					},
					_p33);
			case 'SelectZone':
				return A2(
					_narkisr$elm_ui$Systems_Add_GCE$setGCE,
					function (gce) {
						return _elm_lang$core$Native_Utils.update(
							gce,
							{zone: _p29._0});
					},
					_p33);
			case 'UserInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p34.step,
					'User',
					_narkisr$elm_ui$Systems_Add_GCE$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{user: _p29._0});
						},
						_p33));
			case 'HostnameInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p34.step,
					'Hostname',
					_narkisr$elm_ui$Systems_Add_GCE$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{hostname: _p29._0});
						},
						_p33));
			case 'ProjectIdInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p34.step,
					'Project id',
					_narkisr$elm_ui$Systems_Add_GCE$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_GCE$setGCE,
						function (gce) {
							return _elm_lang$core$Native_Utils.update(
								gce,
								{projectId: _p29._0});
						},
						_p33));
			case 'TagsInput':
				var splited = A2(_elm_lang$core$String$split, ' ', _p29._0);
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p34.step,
					'Tags',
					_narkisr$elm_ui$Systems_Add_GCE$listValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_GCE$setGCE,
						function (gce) {
							return _elm_lang$core$Native_Utils.update(
								gce,
								{
									tags: _elm_lang$core$Maybe$Just(
										_elm_lang$core$Native_Utils.eq(
											splited,
											_elm_lang$core$Native_List.fromArray(
												[''])) ? _elm_lang$core$Native_List.fromArray(
											[]) : splited)
								});
						},
						_p33));
			case 'DomainInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p34.step,
					'Domain',
					_narkisr$elm_ui$Systems_Add_GCE$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{domain: _p29._0});
						},
						_p33));
			default:
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p34.step,
					'IP',
					_narkisr$elm_ui$Systems_Add_GCE$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_GCE$setGCE,
						function (gce) {
							return _elm_lang$core$Native_Utils.update(
								gce,
								{
									staticIp: _elm_lang$core$Maybe$Just(_p29._0)
								});
						},
						_p33));
		}
	});
var _narkisr$elm_ui$Systems_Add_GCE$next = F2(
	function (model, environment) {
		return A2(
			_narkisr$elm_ui$Systems_Add_GCE$update,
			_narkisr$elm_ui$Systems_Add_GCE$WizardMsg(_narkisr$elm_ui$Common_Wizard$Next),
			A2(
				_narkisr$elm_ui$Systems_Add_GCE$update,
				_narkisr$elm_ui$Systems_Add_GCE$Update(environment),
				model));
	});
var _narkisr$elm_ui$Systems_Add_GCE$back = function (model) {
	return A2(
		_narkisr$elm_ui$Systems_Add_GCE$update,
		_narkisr$elm_ui$Systems_Add_GCE$WizardMsg(_narkisr$elm_ui$Common_Wizard$Back),
		model);
};
var _narkisr$elm_ui$Systems_Add_GCE$Zero = {ctor: 'Zero'};
var _narkisr$elm_ui$Systems_Add_GCE$init = function () {
	var wizard = A3(
		_narkisr$elm_ui$Common_Wizard$init,
		_narkisr$elm_ui$Systems_Add_GCE$Zero,
		_narkisr$elm_ui$Systems_Add_GCE$Instance,
		_elm_lang$core$Native_List.fromArray(
			[_narkisr$elm_ui$Systems_Add_GCE$Instance, _narkisr$elm_ui$Systems_Add_GCE$Networking, _narkisr$elm_ui$Systems_Add_GCE$Summary]));
	return A5(_narkisr$elm_ui$Systems_Add_GCE$Model, wizard, _narkisr$elm_ui$Systems_Model_GCE$emptyGce, _narkisr$elm_ui$Systems_Model_Common$emptyMachine, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty);
}();

var _narkisr$elm_ui$Systems_View_Digital$view = function (model) {
	return _narkisr$elm_ui$Common_Components$fixedPanel(
		A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])));
};
var _narkisr$elm_ui$Systems_View_Digital$summarySections = function (_p0) {
	var _p1 = _p0;
	var _p3 = _p1._1;
	var _p2 = _p1._0;
	return _elm_lang$core$Native_List.fromArray(
		[
			A3(
			_narkisr$elm_ui$Common_Summary$overviewSection,
			'Instance',
			_elm_lang$core$Native_List.fromArray(
				['size', 'os', 'region']),
			_elm_lang$core$Native_List.fromArray(
				[_p2.size, _p3.os, _p2.region])),
			A3(
			_narkisr$elm_ui$Common_Summary$overviewSection,
			'Security',
			_elm_lang$core$Native_List.fromArray(
				['user']),
			_elm_lang$core$Native_List.fromArray(
				[_p3.user])),
			A3(
			_narkisr$elm_ui$Common_Summary$overviewSection,
			'Networking',
			_elm_lang$core$Native_List.fromArray(
				['hostname', 'domain', 'private networking']),
			_elm_lang$core$Native_List.fromArray(
				[
					_p3.hostname,
					_p3.domain,
					_elm_lang$core$Basics$toString(_p2.privateNetworking)
				]))
		]);
};
var _narkisr$elm_ui$Systems_View_Digital$summarize = function (model) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$h4,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('System overview')
						])),
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$style(
							_elm_lang$core$Native_List.fromArray(
								[
									{ctor: '_Tuple2', _0: 'line-height', _1: '1.8'},
									{ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'}
								]))
						]),
					A2(
						_elm_lang$core$List$map,
						_circuithub$elm_bootstrap_html$Bootstrap_Html$row_,
						A2(
							_elm_lang$core$List$map,
							_elm_lang$core$List$concat,
							A2(
								_narkisr$elm_ui$Common_Utils$partition,
								2,
								A2(
									_elm_lang$core$List$map,
									_narkisr$elm_ui$Common_Summary$summaryPanel,
									_narkisr$elm_ui$Systems_View_Digital$summarySections(model))))))
				]))
		]);
};
var _narkisr$elm_ui$Systems_View_Digital$Model = function (a) {
	return {id: a};
};
var _narkisr$elm_ui$Systems_View_Digital$init = _narkisr$elm_ui$Common_Utils$none(
	_narkisr$elm_ui$Systems_View_Digital$Model(0));

var _narkisr$elm_ui$Systems_Add_Digital$getOses = function (model) {
	var hypervisor = A2(
		_elm_lang$core$Maybe$withDefault,
		_narkisr$elm_ui$Environments_List$OSTemplates(_elm_lang$core$Dict$empty),
		A2(_elm_lang$core$Dict$get, 'digital-ocean', model.environment));
	var _p0 = hypervisor;
	if (_p0.ctor === 'OSTemplates') {
		return _p0._0;
	} else {
		return _elm_lang$core$Dict$empty;
	}
};
var _narkisr$elm_ui$Systems_Add_Digital$setDigital = F2(
	function (f, _p1) {
		var _p2 = _p1;
		var newDigital = f(
			A2(_elm_lang$core$Debug$log, '', _p2.digital));
		return _elm_lang$core$Native_Utils.update(
			_p2,
			{digital: newDigital});
	});
var _narkisr$elm_ui$Systems_Add_Digital$Model = F5(
	function (a, b, c, d, e) {
		return {wizard: a, digital: b, machine: c, environment: d, errors: e};
	});
var _narkisr$elm_ui$Systems_Add_Digital$DomainInput = function (a) {
	return {ctor: 'DomainInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Digital$HostnameInput = function (a) {
	return {ctor: 'HostnameInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Digital$UserInput = function (a) {
	return {ctor: 'UserInput', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Digital$SelectRegion = function (a) {
	return {ctor: 'SelectRegion', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Digital$PrivateNetworking = {ctor: 'PrivateNetworking'};
var _narkisr$elm_ui$Systems_Add_Digital$SelectOS = function (a) {
	return {ctor: 'SelectOS', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Digital$SelectSize = function (a) {
	return {ctor: 'SelectSize', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Digital$instance = function (_p3) {
	var _p4 = _p3;
	var _p6 = _p4.machine;
	var _p5 = _p4.digital;
	var region = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(_narkisr$elm_ui$Systems_Model_Digital$regions));
	var check = _narkisr$elm_ui$Common_Components$withErrors(_p4.errors);
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-horizontal'),
					A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Properties')
						])),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Size',
					A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Systems_Add_Digital$SelectSize, _narkisr$elm_ui$Systems_Model_Digital$sizes, _p5.size)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'OS',
					A3(
						_narkisr$elm_ui$Common_Components$selector,
						_narkisr$elm_ui$Systems_Add_Digital$SelectOS,
						_elm_lang$core$Dict$keys(
							_narkisr$elm_ui$Systems_Add_Digital$getOses(_p4)),
						_p6.os)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Region',
					A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Systems_Add_Digital$SelectRegion, _narkisr$elm_ui$Systems_Model_Digital$regions, _p5.region)),
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Security')
						])),
					A2(
					check,
					'User',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Digital$UserInput, '', _p6.user)),
					A2(
					_elm_lang$html$Html$legend,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Networking')
						])),
					A2(
					check,
					'Hostname',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Digital$HostnameInput, '', _p6.hostname)),
					A2(
					check,
					'Domain',
					A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Systems_Add_Digital$DomainInput, '', _p6.domain)),
					A2(
					_narkisr$elm_ui$Common_Components$group$,
					'Private Networking',
					A2(_narkisr$elm_ui$Common_Components$checkbox, _narkisr$elm_ui$Systems_Add_Digital$PrivateNetworking, _p5.privateNetworking))
				]))
		]);
};
var _narkisr$elm_ui$Systems_Add_Digital$stepView = function (_p7) {
	var _p8 = _p7;
	var _p10 = _p8.wizard;
	var _p9 = _p10.step;
	switch (_p9.ctor) {
		case 'Instance':
			return _narkisr$elm_ui$Systems_Add_Digital$instance(_p8);
		case 'Summary':
			return _narkisr$elm_ui$Systems_View_Digital$summarize(
				{ctor: '_Tuple2', _0: _p8.digital, _1: _p8.machine});
		default:
			return A2(
				_elm_lang$core$Debug$log,
				_elm_lang$core$Basics$toString(_p10.step),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					]));
	}
};
var _narkisr$elm_ui$Systems_Add_Digital$view = function (model) {
	return _narkisr$elm_ui$Common_Components$fixedPanel(
		A2(
			_elm_lang$html$Html$form,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_narkisr$elm_ui$Systems_Add_Digital$stepView(model)));
};
var _narkisr$elm_ui$Systems_Add_Digital$Update = function (a) {
	return {ctor: 'Update', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Digital$WizardMsg = function (a) {
	return {ctor: 'WizardMsg', _0: a};
};
var _narkisr$elm_ui$Systems_Add_Digital$Summary = {ctor: 'Summary'};
var _narkisr$elm_ui$Systems_Add_Digital$Instance = {ctor: 'Instance'};
var _narkisr$elm_ui$Systems_Add_Digital$stringValidations = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_narkisr$elm_ui$Systems_Add_Validations$vpair,
			_narkisr$elm_ui$Systems_Add_Digital$Instance,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'Hostname',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Hostname',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p11) {
							var _p12 = _p11;
							return _p12.machine.hostname;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'Domain',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'Domain',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p13) {
							var _p14 = _p13;
							return _p14.machine.domain;
						})
				},
					{
					ctor: '_Tuple2',
					_0: 'User',
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Validations$validationOf,
						'User',
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Systems_Add_Validations$notEmpty]),
						function (_p15) {
							var _p16 = _p15;
							return _p16.machine.user;
						})
				}
				]))
		]));
var _narkisr$elm_ui$Systems_Add_Digital$validateDigital = _narkisr$elm_ui$Systems_Add_Validations$validateAll(
	_elm_lang$core$Native_List.fromArray(
		[_narkisr$elm_ui$Systems_Add_Digital$stringValidations]));
var _narkisr$elm_ui$Systems_Add_Digital$update = F2(
	function (msg, _p17) {
		var _p18 = _p17;
		var _p24 = _p18.wizard;
		var _p23 = _p18;
		var _p22 = _p18.machine;
		var _p19 = msg;
		switch (_p19.ctor) {
			case 'WizardMsg':
				var _p20 = A2(_narkisr$elm_ui$Systems_Add_Digital$validateDigital, _p24.step, _p23);
				var newModel = _p20;
				var errors = _p20.errors;
				var newWizard = A3(
					_narkisr$elm_ui$Common_Wizard$update,
					_narkisr$elm_ui$Systems_Add_Validations$notAny(errors),
					_p19._0,
					_p24);
				return _elm_lang$core$Native_Utils.update(
					newModel,
					{wizard: newWizard});
			case 'Update':
				var newModel = _elm_lang$core$Native_Utils.update(
					_p23,
					{environment: _p19._0});
				var _p21 = _elm_lang$core$List$head(
					_elm_lang$core$Dict$keys(
						_narkisr$elm_ui$Systems_Add_Digital$getOses(newModel)));
				if (_p21.ctor === 'Just') {
					return _elm_lang$core$String$isEmpty(_p22.os) ? _elm_lang$core$Native_Utils.update(
						newModel,
						{
							machine: _elm_lang$core$Native_Utils.update(
								_p22,
								{os: _p21._0})
						}) : newModel;
				} else {
					return newModel;
				}
			case 'SelectSize':
				return A2(
					_narkisr$elm_ui$Systems_Add_Digital$setDigital,
					function (digital) {
						return _elm_lang$core$Native_Utils.update(
							digital,
							{size: _p19._0});
					},
					_p23);
			case 'SelectOS':
				return A2(
					_narkisr$elm_ui$Systems_Add_Common$setMachine,
					function (machine) {
						return _elm_lang$core$Native_Utils.update(
							machine,
							{os: _p19._0});
					},
					_p23);
			case 'SelectRegion':
				return A2(
					_narkisr$elm_ui$Systems_Add_Digital$setDigital,
					function (digital) {
						return _elm_lang$core$Native_Utils.update(
							digital,
							{region: _p19._0});
					},
					_p23);
			case 'UserInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p24.step,
					'User',
					_narkisr$elm_ui$Systems_Add_Digital$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{user: _p19._0});
						},
						_p23));
			case 'HostnameInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p24.step,
					'Hostname',
					_narkisr$elm_ui$Systems_Add_Digital$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{hostname: _p19._0});
						},
						_p23));
			case 'DomainInput':
				return A4(
					_narkisr$elm_ui$Systems_Add_Validations$validate,
					_p24.step,
					'Domain',
					_narkisr$elm_ui$Systems_Add_Digital$stringValidations,
					A2(
						_narkisr$elm_ui$Systems_Add_Common$setMachine,
						function (machine) {
							return _elm_lang$core$Native_Utils.update(
								machine,
								{domain: _p19._0});
						},
						_p23));
			default:
				return A2(
					_narkisr$elm_ui$Systems_Add_Digital$setDigital,
					function (digital) {
						return _elm_lang$core$Native_Utils.update(
							digital,
							{
								privateNetworking: _elm_lang$core$Basics$not(digital.privateNetworking)
							});
					},
					_p23);
		}
	});
var _narkisr$elm_ui$Systems_Add_Digital$next = F2(
	function (model, environment) {
		return A2(
			_narkisr$elm_ui$Systems_Add_Digital$update,
			_narkisr$elm_ui$Systems_Add_Digital$WizardMsg(_narkisr$elm_ui$Common_Wizard$Next),
			A2(
				_narkisr$elm_ui$Systems_Add_Digital$update,
				_narkisr$elm_ui$Systems_Add_Digital$Update(environment),
				model));
	});
var _narkisr$elm_ui$Systems_Add_Digital$back = function (model) {
	return A2(
		_narkisr$elm_ui$Systems_Add_Digital$update,
		_narkisr$elm_ui$Systems_Add_Digital$WizardMsg(_narkisr$elm_ui$Common_Wizard$Back),
		model);
};
var _narkisr$elm_ui$Systems_Add_Digital$Zero = {ctor: 'Zero'};
var _narkisr$elm_ui$Systems_Add_Digital$init = function () {
	var wizard = A3(
		_narkisr$elm_ui$Common_Wizard$init,
		_narkisr$elm_ui$Systems_Add_Digital$Zero,
		_narkisr$elm_ui$Systems_Add_Digital$Instance,
		_elm_lang$core$Native_List.fromArray(
			[_narkisr$elm_ui$Systems_Add_Digital$Instance, _narkisr$elm_ui$Systems_Add_Digital$Summary]));
	return A5(_narkisr$elm_ui$Systems_Add_Digital$Model, wizard, _narkisr$elm_ui$Systems_Model_Digital$emptyDigital, _narkisr$elm_ui$Systems_Model_Common$emptyMachine, _elm_lang$core$Dict$empty, _elm_lang$core$Dict$empty);
}();

var _narkisr$elm_ui$Types_Model$classesDecoder = _elm_lang$core$Json_Decode$dict(
	_narkisr$elm_ui$Common_Model$option(
		{ctor: '_Tuple0'}));
var _narkisr$elm_ui$Types_Model$decodeClasses = function (json) {
	var _p0 = A2(_elm_lang$core$Json_Decode$decodeString, _narkisr$elm_ui$Types_Model$classesDecoder, json);
	if (_p0.ctor === 'Ok') {
		return _p0._0;
	} else {
		return A2(_elm_lang$core$Debug$log, _p0._0, _elm_lang$core$Dict$empty);
	}
};
var _narkisr$elm_ui$Types_Model$Module = F3(
	function (a, b, c) {
		return {name: a, src: b, options: c};
	});
var _narkisr$elm_ui$Types_Model$module$ = A4(
	_elm_lang$core$Json_Decode$object3,
	_narkisr$elm_ui$Types_Model$Module,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'src', _elm_lang$core$Json_Decode$string),
	_elm_lang$core$Json_Decode$maybe(
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'options',
			_elm_lang$core$Json_Decode$dict(
				_narkisr$elm_ui$Common_Model$option(
					{ctor: '_Tuple0'})))));
var _narkisr$elm_ui$Types_Model$emptyModule = A3(_narkisr$elm_ui$Types_Model$Module, '', '', _elm_lang$core$Maybe$Nothing);
var _narkisr$elm_ui$Types_Model$PuppetStd = F3(
	function (a, b, c) {
		return {module$: a, args: b, classes: c};
	});
var _narkisr$elm_ui$Types_Model$puppetStd = A4(
	_elm_lang$core$Json_Decode$object3,
	_narkisr$elm_ui$Types_Model$PuppetStd,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'module', _narkisr$elm_ui$Types_Model$module$),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'args',
		_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string)),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'classes',
		_elm_lang$core$Json_Decode$dict(
			_narkisr$elm_ui$Common_Model$option(
				{ctor: '_Tuple0'}))));
var _narkisr$elm_ui$Types_Model$emptyPuppet = A3(
	_narkisr$elm_ui$Types_Model$PuppetStd,
	_narkisr$elm_ui$Types_Model$emptyModule,
	_elm_lang$core$Native_List.fromArray(
		[]),
	_elm_lang$core$Dict$empty);
var _narkisr$elm_ui$Types_Model$Type = F3(
	function (a, b, c) {
		return {type$: a, description: b, puppetStd: c};
	});
var _narkisr$elm_ui$Types_Model$type$ = A4(
	_elm_lang$core$Json_Decode$object3,
	_narkisr$elm_ui$Types_Model$Type,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'type', _elm_lang$core$Json_Decode$string),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'description', _elm_lang$core$Json_Decode$string)),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'puppet-std',
		_elm_lang$core$Json_Decode$dict(_narkisr$elm_ui$Types_Model$puppetStd)));
var _narkisr$elm_ui$Types_Model$emptyType = A3(_narkisr$elm_ui$Types_Model$Type, '', _elm_lang$core$Maybe$Nothing, _elm_lang$core$Dict$empty);
var _narkisr$elm_ui$Types_Model$puppetBase = F4(
	function (name, src, unsecure, args) {
		var module$ = A3(
			_narkisr$elm_ui$Types_Model$Module,
			name,
			src,
			_elm_lang$core$Maybe$Just(
				_elm_lang$core$Dict$fromList(
					_elm_lang$core$Native_List.fromArray(
						[
							{
							ctor: '_Tuple2',
							_0: 'unsecure',
							_1: _narkisr$elm_ui$Common_Model$BoolOption(unsecure)
						}
						]))));
		var puppet = A3(
			_narkisr$elm_ui$Types_Model$PuppetStd,
			module$,
			A2(_elm_lang$core$String$split, ' ', args),
			_elm_lang$core$Dict$empty);
		return _elm_lang$core$Native_Utils.update(
			_narkisr$elm_ui$Types_Model$emptyType,
			{
				puppetStd: _elm_lang$core$Dict$fromList(
					_elm_lang$core$Native_List.fromArray(
						[
							{ctor: '_Tuple2', _0: '--', _1: puppet}
						]))
			});
	});
var _narkisr$elm_ui$Types_Model$typeBase = F3(
	function (type$, description, environment) {
		return A3(
			_narkisr$elm_ui$Types_Model$Type,
			type$,
			_elm_lang$core$Maybe$Just(description),
			_elm_lang$core$Dict$fromList(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: environment, _1: _narkisr$elm_ui$Types_Model$emptyPuppet}
					])));
	});

var _narkisr$elm_ui$Types_List$typesList = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['types']),
	_elm_lang$core$Json_Decode$list(_narkisr$elm_ui$Types_Model$type$));
var _narkisr$elm_ui$Types_List$getTypes = function (msg) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		msg,
		_elm_lang$core$Task$toResult(
			A2(_narkisr$elm_ui$Common_Http$getJson, _narkisr$elm_ui$Types_List$typesList, '/types')));
};
var _narkisr$elm_ui$Types_List$setTypes = F2(
	function (_p0, types) {
		var _p1 = _p0;
		var typePairs = A2(
			_elm_lang$core$List$map,
			function (_p2) {
				var _p3 = _p2;
				return {ctor: '_Tuple2', _0: _p3.type$, _1: _p3};
			},
			types);
		var newTable = A2(
			_narkisr$elm_ui$Table$update,
			_narkisr$elm_ui$Table$UpdateRows(typePairs),
			_p1.table);
		var total = _elm_lang$core$List$length(types);
		var newPager = A2(
			_narkisr$elm_ui$Pager$update,
			_narkisr$elm_ui$Pager$UpdateTotal(
				_elm_lang$core$Basics$toFloat(total)),
			_p1.pager);
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				_p1,
				{types: types, pager: newPager, table: newTable}));
	});
var _narkisr$elm_ui$Types_List$typeRow = F2(
	function (id, _p4) {
		var _p5 = _p4;
		return _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p5.type$)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Puppet standalone')
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(_elm_lang$core$Maybe$withDefault, '', _p5.description))
					]))
			]);
	});
var _narkisr$elm_ui$Types_List$Model = F3(
	function (a, b, c) {
		return {types: a, table: b, pager: c};
	});
var _narkisr$elm_ui$Types_List$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Types_List$update = F2(
	function (msg, model) {
		var _p6 = msg;
		if (_p6.ctor === 'SetTypes') {
			return A4(
				_narkisr$elm_ui$Common_Errors$successHandler,
				_p6._0,
				model,
				_narkisr$elm_ui$Types_List$setTypes(model),
				_narkisr$elm_ui$Types_List$NoOp);
		} else {
			return _narkisr$elm_ui$Common_Utils$none(model);
		}
	});
var _narkisr$elm_ui$Types_List$SetTypes = function (a) {
	return {ctor: 'SetTypes', _0: a};
};
var _narkisr$elm_ui$Types_List$init = function () {
	var table = A5(
		_narkisr$elm_ui$Table$init,
		'typesListing',
		true,
		_elm_lang$core$Native_List.fromArray(
			['Name', 'Provisioner', 'Description']),
		_narkisr$elm_ui$Types_List$typeRow,
		'Types');
	return {
		ctor: '_Tuple2',
		_0: A3(
			_narkisr$elm_ui$Types_List$Model,
			_elm_lang$core$Native_List.fromArray(
				[]),
			table,
			_narkisr$elm_ui$Pager$init),
		_1: _narkisr$elm_ui$Types_List$getTypes(_narkisr$elm_ui$Types_List$SetTypes)
	};
}();
var _narkisr$elm_ui$Types_List$GotoPage = function (a) {
	return {ctor: 'GotoPage', _0: a};
};
var _narkisr$elm_ui$Types_List$LoadPage = function (a) {
	return {ctor: 'LoadPage', _0: a};
};
var _narkisr$elm_ui$Types_List$view = function (_p7) {
	var _p8 = _p7;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('col-md-offset-1 col-md-10')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_circuithub$elm_bootstrap_html$Bootstrap_Html$panelDefault_(
								_elm_lang$core$Native_List.fromArray(
									[
										A2(
										_elm_lang$html$Html_App$map,
										_narkisr$elm_ui$Types_List$LoadPage,
										_narkisr$elm_ui$Table$view(_p8.table))
									]))
							]))
					])),
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html_App$map,
						_narkisr$elm_ui$Types_List$GotoPage,
						_narkisr$elm_ui$Pager$view(_p8.pager))
					]))
			]));
};

var _narkisr$elm_ui$Systems_Add_General$setTypes = F2(
	function (model, types) {
		var typesList = A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.type$;
			},
			types);
		var firstType = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(typesList));
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{types: typesList, type$: firstType}));
	});
var _narkisr$elm_ui$Systems_Add_General$setEnvironments = F2(
	function (model, es) {
		var environments = _elm_lang$core$Dict$keys(es);
		var environment = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(
				_elm_lang$core$Dict$keys(es)));
		var hypervisors = _elm_lang$core$Dict$keys(
			A2(
				_elm_lang$core$Maybe$withDefault,
				_elm_lang$core$Dict$empty,
				A2(_elm_lang$core$Dict$get, environment, es)));
		var hypervisor = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(hypervisors));
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{hypervisors: hypervisors, hypervisor: hypervisor}));
	});
var _narkisr$elm_ui$Systems_Add_General$Model = F5(
	function (a, b, c, d, e) {
		return {type$: a, types: b, hypervisor: c, hypervisors: d, admin: e};
	});
var _narkisr$elm_ui$Systems_Add_General$SelectHypervisor = function (a) {
	return {ctor: 'SelectHypervisor', _0: a};
};
var _narkisr$elm_ui$Systems_Add_General$SelectType = function (a) {
	return {ctor: 'SelectType', _0: a};
};
var _narkisr$elm_ui$Systems_Add_General$SetTypes = function (a) {
	return {ctor: 'SetTypes', _0: a};
};
var _narkisr$elm_ui$Systems_Add_General$AdminMsg = function (a) {
	return {ctor: 'AdminMsg', _0: a};
};
var _narkisr$elm_ui$Systems_Add_General$general = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('form-horizontal'),
				A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Systems_Add_General$AdminMsg,
				_narkisr$elm_ui$Admin_Core$view(_p1.admin)),
				A2(
				_narkisr$elm_ui$Common_Components$group$,
				'Type',
				A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Systems_Add_General$SelectType, _p1.types, _p1.type$)),
				A2(
				_narkisr$elm_ui$Common_Components$group$,
				'Hypervisor',
				A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Systems_Add_General$SelectHypervisor, _p1.hypervisors, _p1.hypervisor))
			]));
};
var _narkisr$elm_ui$Systems_Add_General$view = function (model) {
	return _narkisr$elm_ui$Common_Components$fixedPanel(
		A2(
			_elm_lang$html$Html$form,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_narkisr$elm_ui$Common_Components$asList(
				_narkisr$elm_ui$Systems_Add_General$general(model))));
};
var _narkisr$elm_ui$Systems_Add_General$SetEnvironments = function (a) {
	return {ctor: 'SetEnvironments', _0: a};
};
var _narkisr$elm_ui$Systems_Add_General$init = function () {
	var _p2 = _narkisr$elm_ui$Admin_Core$init;
	var admin = _p2._0;
	var adminEffects = _p2._1;
	var msgs = _elm_lang$core$Platform_Cmd$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_narkisr$elm_ui$Types_List$getTypes(_narkisr$elm_ui$Systems_Add_General$SetTypes),
				_narkisr$elm_ui$Environments_List$getEnvironments(_narkisr$elm_ui$Systems_Add_General$SetEnvironments),
				A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Add_General$AdminMsg, adminEffects)
			]));
	return {
		ctor: '_Tuple2',
		_0: A5(
			_narkisr$elm_ui$Systems_Add_General$Model,
			'',
			_elm_lang$core$Native_List.fromArray(
				[]),
			'',
			_elm_lang$core$Native_List.fromArray(
				[]),
			admin),
		_1: msgs
	};
}();
var _narkisr$elm_ui$Systems_Add_General$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Systems_Add_General$update = F2(
	function (msg, _p3) {
		var _p4 = _p3;
		var _p7 = _p4;
		var _p5 = msg;
		switch (_p5.ctor) {
			case 'SetEnvironments':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p5._0,
					_p7,
					_narkisr$elm_ui$Systems_Add_General$setEnvironments(_p7),
					_narkisr$elm_ui$Systems_Add_General$NoOp);
			case 'AdminMsg':
				var _p6 = A2(_narkisr$elm_ui$Admin_Core$update, _p5._0, _p4.admin);
				var newAdmin = _p6._0;
				var msgs = _p6._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p7,
						{admin: newAdmin}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Add_General$AdminMsg, msgs)
				};
			case 'SelectHypervisor':
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p7,
						{hypervisor: _p5._0}));
			case 'SetTypes':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p5._0,
					_p7,
					_narkisr$elm_ui$Systems_Add_General$setTypes(_p7),
					_narkisr$elm_ui$Systems_Add_General$NoOp);
			case 'SelectType':
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p7,
						{type$: _p5._0}));
			default:
				return _narkisr$elm_ui$Common_Utils$none(_p7);
		}
	});

var _narkisr$elm_ui$Systems_Add_Encoders$combine = F4(
	function (enc, value, key, curr) {
		var _p0 = value;
		if (_p0.ctor === 'Just') {
			return A2(
				_elm_lang$core$List$append,
				curr,
				_elm_lang$core$Native_List.fromArray(
					[
						{
						ctor: '_Tuple2',
						_0: key,
						_1: enc(_p0._0)
					}
					]));
		} else {
			return curr;
		}
	});
var _narkisr$elm_ui$Systems_Add_Encoders$machineEncoder = function (machine) {
	var encoded = _elm_lang$core$Native_List.fromArray(
		[
			{
			ctor: '_Tuple2',
			_0: 'domain',
			_1: _elm_lang$core$Json_Encode$string(machine.domain)
		},
			{
			ctor: '_Tuple2',
			_0: 'hostname',
			_1: _elm_lang$core$Json_Encode$string(machine.hostname)
		},
			{
			ctor: '_Tuple2',
			_0: 'os',
			_1: _elm_lang$core$Json_Encode$string(machine.os)
		},
			{
			ctor: '_Tuple2',
			_0: 'user',
			_1: _elm_lang$core$Json_Encode$string(machine.user)
		}
		]);
	return _elm_lang$core$Json_Encode$object(
		A4(
			_narkisr$elm_ui$Systems_Add_Encoders$combine,
			_elm_lang$core$Json_Encode$string,
			machine.ip,
			'ip',
			A4(
				_narkisr$elm_ui$Systems_Add_Encoders$combine,
				_elm_lang$core$Json_Encode$int,
				machine.ram,
				'ram',
				A4(_narkisr$elm_ui$Systems_Add_Encoders$combine, _elm_lang$core$Json_Encode$int, machine.cpu, 'cpu', encoded))));
};
var _narkisr$elm_ui$Systems_Add_Encoders$maybeString = function (optional) {
	var _p1 = optional;
	if (_p1.ctor === 'Just') {
		return _elm_lang$core$Json_Encode$string(_p1._0);
	} else {
		return _elm_lang$core$Json_Encode$null;
	}
};
var _narkisr$elm_ui$Systems_Add_Encoders$openstackVolumeEncoder = function (volume) {
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'device',
				_1: _elm_lang$core$Json_Encode$string(volume.device)
			},
				{
				ctor: '_Tuple2',
				_0: 'size',
				_1: _elm_lang$core$Json_Encode$int(volume.size)
			},
				{
				ctor: '_Tuple2',
				_0: 'clear',
				_1: _elm_lang$core$Json_Encode$bool(volume.clear)
			}
			]));
};
var _narkisr$elm_ui$Systems_Add_Encoders$openstackEncoder = function (openstack) {
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'flavor',
				_1: _elm_lang$core$Json_Encode$string(openstack.flavor)
			},
				{
				ctor: '_Tuple2',
				_0: 'tenant',
				_1: _elm_lang$core$Json_Encode$string(openstack.tenant)
			},
				{
				ctor: '_Tuple2',
				_0: 'floating-ip',
				_1: _narkisr$elm_ui$Systems_Add_Encoders$maybeString(openstack.floatingIp)
			},
				{
				ctor: '_Tuple2',
				_0: 'floating-ip-pool',
				_1: _narkisr$elm_ui$Systems_Add_Encoders$maybeString(openstack.floatingIpPool)
			},
				{
				ctor: '_Tuple2',
				_0: 'key-name',
				_1: _elm_lang$core$Json_Encode$string(openstack.keyName)
			},
				{
				ctor: '_Tuple2',
				_0: 'security-groups',
				_1: _elm_lang$core$Json_Encode$list(
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Json_Encode$string,
						_narkisr$elm_ui$Common_Utils$defaultEmpty(openstack.securityGroups)))
			},
				{
				ctor: '_Tuple2',
				_0: 'networks',
				_1: _elm_lang$core$Json_Encode$list(
					A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, openstack.networks))
			},
				{
				ctor: '_Tuple2',
				_0: 'volumes',
				_1: _elm_lang$core$Json_Encode$list(
					A2(
						_elm_lang$core$List$map,
						_narkisr$elm_ui$Systems_Add_Encoders$openstackVolumeEncoder,
						_narkisr$elm_ui$Common_Utils$defaultEmpty(openstack.volumes)))
			}
			]));
};
var _narkisr$elm_ui$Systems_Add_Encoders$optional = F2(
	function (enc, value) {
		var _p2 = value;
		if (_p2.ctor === 'Just') {
			return enc(_p2._0);
		} else {
			return _elm_lang$core$Json_Encode$null;
		}
	});
var _narkisr$elm_ui$Systems_Add_Encoders$physicalEncoder = function (physical) {
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'mac',
				_1: A2(_narkisr$elm_ui$Systems_Add_Encoders$optional, _elm_lang$core$Json_Encode$string, physical.mac)
			},
				{
				ctor: '_Tuple2',
				_0: 'broadcast',
				_1: A2(_narkisr$elm_ui$Systems_Add_Encoders$optional, _elm_lang$core$Json_Encode$string, physical.broadcast)
			}
			]));
};
var _narkisr$elm_ui$Systems_Add_Encoders$kvmEncoder = function (kvm) {
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'node',
				_1: _elm_lang$core$Json_Encode$string(kvm.node)
			}
			]));
};
var _narkisr$elm_ui$Systems_Add_Encoders$digitalEncoder = function (digital) {
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'size',
				_1: _elm_lang$core$Json_Encode$string(digital.size)
			},
				{
				ctor: '_Tuple2',
				_0: 'region',
				_1: _elm_lang$core$Json_Encode$string(digital.region)
			},
				{
				ctor: '_Tuple2',
				_0: 'private-networking',
				_1: _elm_lang$core$Json_Encode$bool(digital.privateNetworking)
			}
			]));
};
var _narkisr$elm_ui$Systems_Add_Encoders$gceEncoder = function (gce) {
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'machine-type',
				_1: _elm_lang$core$Json_Encode$string(gce.machineType)
			},
				{
				ctor: '_Tuple2',
				_0: 'zone',
				_1: _elm_lang$core$Json_Encode$string(gce.zone)
			},
				{
				ctor: '_Tuple2',
				_0: 'tags',
				_1: _elm_lang$core$Json_Encode$list(
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Json_Encode$string,
						_narkisr$elm_ui$Common_Utils$defaultEmpty(gce.tags)))
			},
				{
				ctor: '_Tuple2',
				_0: 'project-id',
				_1: _elm_lang$core$Json_Encode$string(gce.projectId)
			}
			]));
};
var _narkisr$elm_ui$Systems_Add_Encoders$vpcEncoder = F2(
	function (_p3, curr) {
		var _p4 = _p3;
		var _p5 = _p4;
		return _elm_lang$core$String$isEmpty(_p4.vpcId) ? curr : A2(
			_elm_lang$core$List$append,
			curr,
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'vpc',
					_1: _elm_lang$core$Json_Encode$object(
						_elm_lang$core$Native_List.fromArray(
							[
								{
								ctor: '_Tuple2',
								_0: 'subnet-id',
								_1: _elm_lang$core$Json_Encode$string(_p5.subnetId)
							},
								{
								ctor: '_Tuple2',
								_0: 'vpc-id',
								_1: _elm_lang$core$Json_Encode$string(_p5.vpcId)
							},
								{
								ctor: '_Tuple2',
								_0: 'assign-public',
								_1: _elm_lang$core$Json_Encode$bool(_p5.assignPublic)
							}
							]))
				}
				]));
	});
var _narkisr$elm_ui$Systems_Add_Encoders$blockEncoder = function (block) {
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'volume',
				_1: _elm_lang$core$Json_Encode$string(block.volume)
			},
				{
				ctor: '_Tuple2',
				_0: 'device',
				_1: _elm_lang$core$Json_Encode$string(block.device)
			}
			]));
};
var _narkisr$elm_ui$Systems_Add_Encoders$awsVolumeEncoder = function (volume) {
	var enc = _elm_lang$core$Native_List.fromArray(
		[
			{
			ctor: '_Tuple2',
			_0: 'volume-type',
			_1: _narkisr$elm_ui$Systems_Add_Encoders$maybeString(
				A2(_elm_lang$core$Dict$get, volume.type$, _narkisr$elm_ui$Systems_Add_AWS$ebsTypes))
		},
			{
			ctor: '_Tuple2',
			_0: 'size',
			_1: _elm_lang$core$Json_Encode$int(volume.size)
		},
			{
			ctor: '_Tuple2',
			_0: 'device',
			_1: _elm_lang$core$Json_Encode$string(volume.device)
		},
			{
			ctor: '_Tuple2',
			_0: 'clear',
			_1: _elm_lang$core$Json_Encode$bool(volume.clear)
		}
		]);
	return _elm_lang$core$Json_Encode$object(
		A4(_narkisr$elm_ui$Systems_Add_Encoders$combine, _elm_lang$core$Json_Encode$int, volume.iops, 'iops', enc));
};
var _narkisr$elm_ui$Systems_Add_Encoders$awsEncoder = function (aws) {
	var root = _elm_lang$core$Native_List.fromArray(
		[
			{
			ctor: '_Tuple2',
			_0: 'key-name',
			_1: _elm_lang$core$Json_Encode$string(aws.keyName)
		},
			{
			ctor: '_Tuple2',
			_0: 'endpoint',
			_1: _elm_lang$core$Json_Encode$string(aws.endpoint)
		},
			{
			ctor: '_Tuple2',
			_0: 'instance-type',
			_1: _elm_lang$core$Json_Encode$string(aws.instanceType)
		},
			{
			ctor: '_Tuple2',
			_0: 'ebs-optimized',
			_1: _elm_lang$core$Json_Encode$bool(
				A2(_elm_lang$core$Maybe$withDefault, false, aws.ebsOptimized))
		},
			{
			ctor: '_Tuple2',
			_0: 'security-groups',
			_1: _elm_lang$core$Json_Encode$list(
				A2(
					_elm_lang$core$List$map,
					_elm_lang$core$Json_Encode$string,
					_narkisr$elm_ui$Common_Utils$defaultEmpty(aws.securityGroups)))
		},
			{
			ctor: '_Tuple2',
			_0: 'block-devices',
			_1: _elm_lang$core$Json_Encode$list(
				A2(
					_elm_lang$core$List$map,
					_narkisr$elm_ui$Systems_Add_Encoders$blockEncoder,
					_narkisr$elm_ui$Common_Utils$defaultEmpty(aws.blockDevices)))
		},
			{
			ctor: '_Tuple2',
			_0: 'volumes',
			_1: _elm_lang$core$Json_Encode$list(
				A2(
					_elm_lang$core$List$map,
					_narkisr$elm_ui$Systems_Add_Encoders$awsVolumeEncoder,
					_narkisr$elm_ui$Common_Utils$defaultEmpty(aws.volumes)))
		}
		]);
	return _elm_lang$core$Json_Encode$object(
		A4(
			_narkisr$elm_ui$Systems_Add_Encoders$combine,
			_elm_lang$core$Json_Encode$string,
			aws.availabilityZone,
			'availability-zone',
			A2(
				_narkisr$elm_ui$Systems_Add_Encoders$vpcEncoder,
				A2(_elm_lang$core$Maybe$withDefault, _narkisr$elm_ui$Systems_Model_AWS$emptyVpc, aws.vpc),
				root)));
};
var _narkisr$elm_ui$Systems_Add_Encoders$encoderOf = F2(
	function (_p6, stage) {
		var _p7 = _p6;
		var _p8 = stage;
		switch (_p8) {
			case 'AWS':
				return {
					ctor: '_Tuple2',
					_0: 'aws',
					_1: _narkisr$elm_ui$Systems_Add_Encoders$awsEncoder(
						A2(_elm_lang$core$Maybe$withDefault, _narkisr$elm_ui$Systems_Model_AWS$emptyAws, _p7.aws))
				};
			case 'GCE':
				return {
					ctor: '_Tuple2',
					_0: 'gce',
					_1: _narkisr$elm_ui$Systems_Add_Encoders$gceEncoder(
						A2(_elm_lang$core$Maybe$withDefault, _narkisr$elm_ui$Systems_Model_GCE$emptyGce, _p7.gce))
				};
			case 'Digital':
				return {
					ctor: '_Tuple2',
					_0: 'digital-ocean',
					_1: _narkisr$elm_ui$Systems_Add_Encoders$digitalEncoder(
						A2(_elm_lang$core$Maybe$withDefault, _narkisr$elm_ui$Systems_Model_Digital$emptyDigital, _p7.digital))
				};
			case 'Physical':
				return {
					ctor: '_Tuple2',
					_0: 'physical',
					_1: _narkisr$elm_ui$Systems_Add_Encoders$physicalEncoder(
						A2(_elm_lang$core$Maybe$withDefault, _narkisr$elm_ui$Systems_Model_Physical$emptyPhysical, _p7.physical))
				};
			case 'Openstack':
				return {
					ctor: '_Tuple2',
					_0: 'openstack',
					_1: _narkisr$elm_ui$Systems_Add_Encoders$openstackEncoder(
						A2(_elm_lang$core$Maybe$withDefault, _narkisr$elm_ui$Systems_Model_Openstack$emptyOpenstack, _p7.openstack))
				};
			case 'KVM':
				return {
					ctor: '_Tuple2',
					_0: 'kvm',
					_1: _narkisr$elm_ui$Systems_Add_Encoders$kvmEncoder(
						A2(_elm_lang$core$Maybe$withDefault, _narkisr$elm_ui$Systems_Model_KVM$emptyKVM, _p7.kvm))
				};
			default:
				return {ctor: '_Tuple2', _0: '', _1: _elm_lang$core$Json_Encode$null};
		}
	});
var _narkisr$elm_ui$Systems_Add_Encoders$encode = F2(
	function (_p9, stage) {
		var _p10 = _p9;
		return _elm_lang$core$Json_Encode$object(
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'type',
					_1: _elm_lang$core$Json_Encode$string(_p10.type$)
				},
					{
					ctor: '_Tuple2',
					_0: 'owner',
					_1: _elm_lang$core$Json_Encode$string(_p10.owner)
				},
					{
					ctor: '_Tuple2',
					_0: 'env',
					_1: _elm_lang$core$Json_Encode$string(_p10.env)
				},
					A2(_narkisr$elm_ui$Systems_Add_Encoders$encoderOf, _p10, stage),
					{
					ctor: '_Tuple2',
					_0: 'machine',
					_1: _narkisr$elm_ui$Systems_Add_Encoders$machineEncoder(_p10.machine)
				}
				]));
	});

var _narkisr$elm_ui$Jobs_Common$JobResponse = F3(
	function (a, b, c) {
		return {message: a, id: b, job: c};
	});
var _narkisr$elm_ui$Jobs_Common$jobResponse = A4(
	_elm_lang$core$Json_Decode$object3,
	_narkisr$elm_ui$Jobs_Common$JobResponse,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'message', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'id', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'job', _elm_lang$core$Json_Decode$string));
var _narkisr$elm_ui$Jobs_Common$runJob = F3(
	function (id, job, msg) {
		return A3(
			_elm_lang$core$Task$perform,
			_elm_community$basics_extra$Basics_Extra$never,
			msg,
			_elm_lang$core$Task$toResult(
				A3(
					_evancz$elm_http$Http$post,
					_narkisr$elm_ui$Jobs_Common$jobResponse,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/jobs/',
						A2(
							_elm_lang$core$Basics_ops['++'],
							job,
							A2(_elm_lang$core$Basics_ops['++'], '/', id))),
					_evancz$elm_http$Http$empty)));
	});

var _narkisr$elm_ui$Systems_Add_Persistency$addDevice = function (vs) {
	return _elm_lang$core$Maybe$Just(
		A2(
			_elm_lang$core$List$map,
			function (_p0) {
				var _p1 = _p0;
				return _elm_lang$core$Native_Utils.update(
					_p1,
					{
						device: A2(_elm_lang$core$Basics_ops['++'], '/dev/', _p1.device)
					});
			},
			A2(
				_elm_lang$core$Maybe$withDefault,
				_elm_lang$core$Native_List.fromArray(
					[]),
				vs)));
};
var _narkisr$elm_ui$Systems_Add_Persistency$transform = F2(
	function (_p2, stage) {
		var _p3 = _p2;
		var _p5 = _p3;
		var _p4 = stage;
		switch (_p4) {
			case 'AWS':
				var justAws = A2(_elm_lang$core$Maybe$withDefault, _narkisr$elm_ui$Systems_Model_AWS$emptyAws, _p3.aws);
				var newAws = _elm_lang$core$Native_Utils.update(
					justAws,
					{
						blockDevices: _narkisr$elm_ui$Systems_Add_Persistency$addDevice(justAws.blockDevices),
						volumes: _narkisr$elm_ui$Systems_Add_Persistency$addDevice(justAws.volumes)
					});
				return _elm_lang$core$Native_Utils.update(
					_p5,
					{
						aws: _elm_lang$core$Maybe$Just(newAws)
					});
			case 'Openstack':
				var justStack = A2(_elm_lang$core$Maybe$withDefault, _narkisr$elm_ui$Systems_Model_Openstack$emptyOpenstack, _p3.openstack);
				var newStack = _elm_lang$core$Native_Utils.update(
					justStack,
					{
						volumes: _narkisr$elm_ui$Systems_Add_Persistency$addDevice(justStack.volumes)
					});
				return _elm_lang$core$Native_Utils.update(
					_p5,
					{
						openstack: _elm_lang$core$Maybe$Just(newStack)
					});
			default:
				return _p5;
		}
	});
var _narkisr$elm_ui$Systems_Add_Persistency$persistModel = F3(
	function (f, system, stage) {
		return f(
			A2(
				_elm_lang$core$Json_Encode$encode,
				0,
				A2(
					_narkisr$elm_ui$Systems_Add_Encoders$encode,
					A2(_narkisr$elm_ui$Systems_Add_Persistency$transform, system, stage),
					stage)));
	});

var _narkisr$elm_ui$Systems_Add$machineFrom = F2(
	function (stage, _p0) {
		var _p1 = _p0;
		var machines = _elm_lang$core$Dict$fromList(
			_elm_lang$core$Native_List.fromArray(
				[
					{ctor: '_Tuple2', _0: 'aws', _1: _p1.awsModel.machine},
					{ctor: '_Tuple2', _0: 'gce', _1: _p1.gceModel.machine},
					{ctor: '_Tuple2', _0: 'openstack', _1: _p1.openstackModel.machine},
					{ctor: '_Tuple2', _0: 'digital', _1: _p1.digitalModel.machine},
					{ctor: '_Tuple2', _0: 'kvm', _1: _p1.kvmModel.machine},
					{ctor: '_Tuple2', _0: 'physical', _1: _p1.physicalModel.machine}
				]));
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_narkisr$elm_ui$Systems_Model_Common$emptyMachine,
			A2(
				_elm_lang$core$Dict$get,
				_elm_lang$core$String$toLower(stage),
				machines));
	});
var _narkisr$elm_ui$Systems_Add$intoSystem = function (_p2) {
	var _p3 = _p2;
	var _p4 = _p3.general;
	var admin = _p4.admin;
	var type$ = _p4.type$;
	var baseSystem = A4(
		_narkisr$elm_ui$Systems_Model_Common$System,
		admin.owner,
		admin.environment,
		type$,
		A2(
			_narkisr$elm_ui$Systems_Add$machineFrom,
			_elm_lang$core$Basics$toString(_p3.stage),
			_p3));
	return A6(
		baseSystem,
		_elm_lang$core$Maybe$Just(_p3.awsModel.aws),
		_elm_lang$core$Maybe$Just(_p3.gceModel.gce),
		_elm_lang$core$Maybe$Just(_p3.digitalModel.digital),
		_elm_lang$core$Maybe$Just(_p3.openstackModel.openstack),
		_elm_lang$core$Maybe$Just(_p3.physicalModel.physical),
		_elm_lang$core$Maybe$Just(_p3.kvmModel.kvm));
};
var _narkisr$elm_ui$Systems_Add$Model = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return {awsModel: a, gceModel: b, physicalModel: c, digitalModel: d, openstackModel: e, general: f, kvmModel: g, hasNext: h, saveErrors: i, stage: j};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _narkisr$elm_ui$Systems_Add$Physical = {ctor: 'Physical'};
var _narkisr$elm_ui$Systems_Add$Digital = {ctor: 'Digital'};
var _narkisr$elm_ui$Systems_Add$GCE = {ctor: 'GCE'};
var _narkisr$elm_ui$Systems_Add$KVM = {ctor: 'KVM'};
var _narkisr$elm_ui$Systems_Add$Openstack = {ctor: 'Openstack'};
var _narkisr$elm_ui$Systems_Add$AWS = {ctor: 'AWS'};
var _narkisr$elm_ui$Systems_Add$Proxmox = {ctor: 'Proxmox'};
var _narkisr$elm_ui$Systems_Add$Error = {ctor: 'Error'};
var _narkisr$elm_ui$Systems_Add$General = {ctor: 'General'};
var _narkisr$elm_ui$Systems_Add$back = F2(
	function (hasPrev, model) {
		var newModel = _elm_lang$core$Native_Utils.update(
			model,
			{hasNext: true});
		return hasPrev ? newModel : _elm_lang$core$Native_Utils.update(
			newModel,
			{stage: _narkisr$elm_ui$Systems_Add$General});
	});
var _narkisr$elm_ui$Systems_Add$getBack = F2(
	function (_p5, hyp) {
		var _p6 = _p5;
		var _p13 = _p6.physicalModel;
		var _p12 = _p6.openstackModel;
		var _p11 = _p6;
		var _p10 = _p6.kvmModel;
		var _p9 = _p6.gceModel;
		var _p8 = _p6.digitalModel;
		var _p7 = _p6.awsModel;
		var backs = _elm_lang$core$Dict$fromList(
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'aws',
					_1: A2(
						_narkisr$elm_ui$Systems_Add$back,
						_narkisr$elm_ui$Common_Wizard$hasPrev(_p7),
						_elm_lang$core$Native_Utils.update(
							_p11,
							{
								stage: _narkisr$elm_ui$Systems_Add$AWS,
								awsModel: _narkisr$elm_ui$Systems_Add_AWS$back(_p7)
							}))
				},
					{
					ctor: '_Tuple2',
					_0: 'gce',
					_1: A2(
						_narkisr$elm_ui$Systems_Add$back,
						_narkisr$elm_ui$Common_Wizard$hasPrev(_p9),
						_elm_lang$core$Native_Utils.update(
							_p11,
							{
								stage: _narkisr$elm_ui$Systems_Add$GCE,
								gceModel: _narkisr$elm_ui$Systems_Add_GCE$back(_p9)
							}))
				},
					{
					ctor: '_Tuple2',
					_0: 'kvm',
					_1: A2(
						_narkisr$elm_ui$Systems_Add$back,
						_narkisr$elm_ui$Common_Wizard$hasPrev(_p10),
						_elm_lang$core$Native_Utils.update(
							_p11,
							{
								stage: _narkisr$elm_ui$Systems_Add$KVM,
								kvmModel: _narkisr$elm_ui$Systems_Add_KVM$back(_p10)
							}))
				},
					{
					ctor: '_Tuple2',
					_0: 'openstack',
					_1: A2(
						_narkisr$elm_ui$Systems_Add$back,
						_narkisr$elm_ui$Common_Wizard$hasPrev(_p12),
						_elm_lang$core$Native_Utils.update(
							_p11,
							{
								stage: _narkisr$elm_ui$Systems_Add$Openstack,
								openstackModel: _narkisr$elm_ui$Systems_Add_Openstack$back(_p12)
							}))
				},
					{
					ctor: '_Tuple2',
					_0: 'digital-ocean',
					_1: A2(
						_narkisr$elm_ui$Systems_Add$back,
						_narkisr$elm_ui$Common_Wizard$hasPrev(_p8),
						_elm_lang$core$Native_Utils.update(
							_p11,
							{
								stage: _narkisr$elm_ui$Systems_Add$Digital,
								digitalModel: _narkisr$elm_ui$Systems_Add_Digital$back(_p8)
							}))
				},
					{
					ctor: '_Tuple2',
					_0: 'physical',
					_1: A2(
						_narkisr$elm_ui$Systems_Add$back,
						_narkisr$elm_ui$Common_Wizard$hasPrev(_p13),
						_elm_lang$core$Native_Utils.update(
							_p11,
							{
								stage: _narkisr$elm_ui$Systems_Add$Physical,
								physicalModel: _narkisr$elm_ui$Systems_Add_Physical$back(_p13)
							}))
				}
				]));
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_p11,
			A2(_elm_lang$core$Dict$get, hyp, backs));
	});
var _narkisr$elm_ui$Systems_Add$JobLaunched = function (a) {
	return {ctor: 'JobLaunched', _0: a};
};
var _narkisr$elm_ui$Systems_Add$setSaved = F3(
	function (next, model, _p14) {
		var _p15 = _p14;
		var _p16 = _p15.id;
		if (_p16.ctor === 'Just') {
			return {
				ctor: '_Tuple2',
				_0: model,
				_1: A3(
					_narkisr$elm_ui$Jobs_Common$runJob,
					_elm_lang$core$Basics$toString(_p16._0),
					_elm_lang$core$String$toLower(
						_elm_lang$core$Basics$toString(next)),
					_narkisr$elm_ui$Systems_Add$JobLaunched)
			};
		} else {
			return _narkisr$elm_ui$Common_Utils$none(model);
		}
	});
var _narkisr$elm_ui$Systems_Add$Saved = F2(
	function (a, b) {
		return {ctor: 'Saved', _0: a, _1: b};
	});
var _narkisr$elm_ui$Systems_Add$saveSystem = F2(
	function (next, json) {
		return A3(
			_elm_lang$core$Task$perform,
			_elm_community$basics_extra$Basics_Extra$never,
			_narkisr$elm_ui$Systems_Add$Saved(next),
			_elm_lang$core$Task$toResult(
				A3(
					_narkisr$elm_ui$Common_Http$postJson,
					_evancz$elm_http$Http$string(json),
					_narkisr$elm_ui$Common_Http$saveResponse,
					'/systems')));
	});
var _narkisr$elm_ui$Systems_Add$ErrorsView = function (a) {
	return {ctor: 'ErrorsView', _0: a};
};
var _narkisr$elm_ui$Systems_Add$errorsView = function (_p17) {
	var _p18 = _p17;
	var body = A2(
		_elm_lang$html$Html_App$map,
		_narkisr$elm_ui$Systems_Add$ErrorsView,
		_narkisr$elm_ui$Common_Errors$view(_p18.saveErrors));
	return A3(
		_narkisr$elm_ui$Common_Components$dialogPanel,
		'danger',
		_narkisr$elm_ui$Common_Components$error('Failed to save system'),
		_narkisr$elm_ui$Common_Components$panel(
			_narkisr$elm_ui$Common_Components$panelContents(body)));
};
var _narkisr$elm_ui$Systems_Add$GeneralView = function (a) {
	return {ctor: 'GeneralView', _0: a};
};
var _narkisr$elm_ui$Systems_Add$init = function () {
	var _p19 = _narkisr$elm_ui$Systems_Add_General$init;
	var general = _p19._0;
	var msgs = _p19._1;
	var withModels = A7(_narkisr$elm_ui$Systems_Add$Model, _narkisr$elm_ui$Systems_Add_AWS$init, _narkisr$elm_ui$Systems_Add_GCE$init, _narkisr$elm_ui$Systems_Add_Physical$init, _narkisr$elm_ui$Systems_Add_Digital$init, _narkisr$elm_ui$Systems_Add_Openstack$init, general, _narkisr$elm_ui$Systems_Add_KVM$init);
	return {
		ctor: '_Tuple2',
		_0: A3(withModels, true, _narkisr$elm_ui$Common_Errors$init, _narkisr$elm_ui$Systems_Add$General),
		_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Add$GeneralView, msgs)
	};
}();
var _narkisr$elm_ui$Systems_Add$KVMView = function (a) {
	return {ctor: 'KVMView', _0: a};
};
var _narkisr$elm_ui$Systems_Add$OpenstackView = function (a) {
	return {ctor: 'OpenstackView', _0: a};
};
var _narkisr$elm_ui$Systems_Add$DigitalView = function (a) {
	return {ctor: 'DigitalView', _0: a};
};
var _narkisr$elm_ui$Systems_Add$PhysicalView = function (a) {
	return {ctor: 'PhysicalView', _0: a};
};
var _narkisr$elm_ui$Systems_Add$GCEView = function (a) {
	return {ctor: 'GCEView', _0: a};
};
var _narkisr$elm_ui$Systems_Add$AWSView = function (a) {
	return {ctor: 'AWSView', _0: a};
};
var _narkisr$elm_ui$Systems_Add$currentView = function (_p20) {
	var _p21 = _p20;
	var _p22 = _p21.stage;
	switch (_p22.ctor) {
		case 'General':
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Systems_Add$GeneralView,
				_narkisr$elm_ui$Systems_Add_General$view(_p21.general));
		case 'AWS':
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Systems_Add$AWSView,
				_narkisr$elm_ui$Systems_Add_AWS$view(_p21.awsModel));
		case 'GCE':
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Systems_Add$GCEView,
				_narkisr$elm_ui$Systems_Add_GCE$view(_p21.gceModel));
		case 'Digital':
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Systems_Add$DigitalView,
				_narkisr$elm_ui$Systems_Add_Digital$view(_p21.digitalModel));
		case 'Physical':
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Systems_Add$PhysicalView,
				_narkisr$elm_ui$Systems_Add_Physical$view(_p21.physicalModel));
		case 'Openstack':
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Systems_Add$OpenstackView,
				_narkisr$elm_ui$Systems_Add_Openstack$view(_p21.openstackModel));
		case 'KVM':
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Systems_Add$KVMView,
				_narkisr$elm_ui$Systems_Add_KVM$view(_p21.kvmModel));
		default:
			return _narkisr$elm_ui$Common_Components$notImplemented;
	}
};
var _narkisr$elm_ui$Systems_Add$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Systems_Add$Back = {ctor: 'Back'};
var _narkisr$elm_ui$Systems_Add$Stage = {ctor: 'Stage'};
var _narkisr$elm_ui$Systems_Add$Create = {ctor: 'Create'};
var _narkisr$elm_ui$Systems_Add$update = F2(
	function (msg, _p23) {
		var _p24 = _p23;
		var _p38 = _p24.stage;
		var _p37 = _p24.physicalModel;
		var _p36 = _p24.openstackModel;
		var _p35 = _p24;
		var _p34 = _p24.kvmModel;
		var _p33 = _p24.general;
		var _p32 = _p24.gceModel;
		var _p31 = _p24.digitalModel;
		var _p30 = _p24.awsModel;
		var _p25 = msg;
		switch (_p25.ctor) {
			case 'Next':
				var _p26 = _p33;
				var admin = _p26.admin;
				var current = A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Dict$empty,
					A2(_elm_lang$core$Dict$get, admin.environment, admin.rawEnvironments));
				var _p27 = _p33.hypervisor;
				switch (_p27) {
					case 'aws':
						var newAws = A2(_narkisr$elm_ui$Systems_Add_AWS$next, _p30, current);
						return _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p35,
								{
									stage: _narkisr$elm_ui$Systems_Add$AWS,
									awsModel: newAws,
									hasNext: _narkisr$elm_ui$Common_Wizard$hasNext(newAws)
								}));
					case 'gce':
						var newGce = A2(_narkisr$elm_ui$Systems_Add_GCE$next, _p32, current);
						return _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p35,
								{
									stage: _narkisr$elm_ui$Systems_Add$GCE,
									gceModel: newGce,
									hasNext: _narkisr$elm_ui$Common_Wizard$hasNext(newGce)
								}));
					case 'digital-ocean':
						var newDigital = A2(_narkisr$elm_ui$Systems_Add_Digital$next, _p31, current);
						return _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p35,
								{
									stage: _narkisr$elm_ui$Systems_Add$Digital,
									digitalModel: newDigital,
									hasNext: _narkisr$elm_ui$Common_Wizard$hasNext(newDigital)
								}));
					case 'physical':
						var newPhysical = A2(_narkisr$elm_ui$Systems_Add_Physical$next, _p37, current);
						return _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p35,
								{
									stage: _narkisr$elm_ui$Systems_Add$Physical,
									physicalModel: newPhysical,
									hasNext: _narkisr$elm_ui$Common_Wizard$hasNext(newPhysical)
								}));
					case 'openstack':
						var newOpenstack = A2(_narkisr$elm_ui$Systems_Add_Openstack$next, _p36, current);
						return _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p35,
								{
									stage: _narkisr$elm_ui$Systems_Add$Openstack,
									openstackModel: newOpenstack,
									hasNext: _narkisr$elm_ui$Common_Wizard$hasNext(newOpenstack)
								}));
					case 'kvm':
						var newKvm = A2(_narkisr$elm_ui$Systems_Add_KVM$next, _p34, current);
						return _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p35,
								{
									stage: _narkisr$elm_ui$Systems_Add$KVM,
									kvmModel: newKvm,
									hasNext: _narkisr$elm_ui$Common_Wizard$hasNext(newKvm)
								}));
					default:
						return _narkisr$elm_ui$Common_Utils$none(_p35);
				}
			case 'Back':
				return _narkisr$elm_ui$Common_Utils$none(
					A2(_narkisr$elm_ui$Systems_Add$getBack, _p35, _p33.hypervisor));
			case 'AWSView':
				var newAws = A2(_narkisr$elm_ui$Systems_Add_AWS$update, _p25._0, _p30);
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p35,
						{awsModel: newAws}));
			case 'GCEView':
				var newGce = A2(_narkisr$elm_ui$Systems_Add_GCE$update, _p25._0, _p32);
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p35,
						{gceModel: newGce}));
			case 'DigitalView':
				var newDigital = A2(_narkisr$elm_ui$Systems_Add_Digital$update, _p25._0, _p31);
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p35,
						{digitalModel: newDigital}));
			case 'PhysicalView':
				var newPhysical = A2(_narkisr$elm_ui$Systems_Add_Physical$update, _p25._0, _p37);
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p35,
						{physicalModel: newPhysical}));
			case 'OpenstackView':
				var newOpenstack = A2(_narkisr$elm_ui$Systems_Add_Openstack$update, _p25._0, _p36);
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p35,
						{openstackModel: newOpenstack}));
			case 'KVMView':
				var newKvm = A2(_narkisr$elm_ui$Systems_Add_KVM$update, _p25._0, _p34);
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p35,
						{kvmModel: newKvm}));
			case 'GeneralView':
				var _p28 = A2(_narkisr$elm_ui$Systems_Add_General$update, _p25._0, _p33);
				var newGeneral = _p28._0;
				var msgs = _p28._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p35,
						{general: newGeneral}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Add$GeneralView, msgs)
				};
			case 'Stage':
				return {
					ctor: '_Tuple2',
					_0: _p35,
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Persistency$persistModel,
						_narkisr$elm_ui$Systems_Add$saveSystem(_narkisr$elm_ui$Systems_Add$Stage),
						_narkisr$elm_ui$Systems_Add$intoSystem(_p35),
						_elm_lang$core$Basics$toString(_p38))
				};
			case 'SaveSystem':
				return {
					ctor: '_Tuple2',
					_0: _p35,
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Persistency$persistModel,
						_narkisr$elm_ui$Systems_Add$saveSystem(_narkisr$elm_ui$Systems_Add$NoOp),
						_narkisr$elm_ui$Systems_Add$intoSystem(_p35),
						_elm_lang$core$Basics$toString(_p38))
				};
			case 'Create':
				return {
					ctor: '_Tuple2',
					_0: _p35,
					_1: A3(
						_narkisr$elm_ui$Systems_Add_Persistency$persistModel,
						_narkisr$elm_ui$Systems_Add$saveSystem(_narkisr$elm_ui$Systems_Add$Create),
						_narkisr$elm_ui$Systems_Add$intoSystem(_p35),
						_elm_lang$core$Basics$toString(_p38))
				};
			case 'SaveTemplate':
				return _narkisr$elm_ui$Common_Utils$none(_p35);
			case 'Saved':
				var _p29 = A4(
					_narkisr$elm_ui$Common_Errors$errorsSuccessHandler,
					_p25._1,
					_p35,
					A2(_narkisr$elm_ui$Systems_Add$setSaved, _p25._0, _p35),
					_narkisr$elm_ui$Systems_Add$NoOp);
				var newModel = _p29._0;
				var saveErrors = _p29._0.saveErrors;
				var msgs = _p29._1;
				return _narkisr$elm_ui$Common_Errors$hasErrors(saveErrors) ? {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						newModel,
						{stage: _narkisr$elm_ui$Systems_Add$Error}),
					_1: msgs
				} : {ctor: '_Tuple2', _0: _p35, _1: msgs};
			default:
				return _narkisr$elm_ui$Common_Utils$none(_p35);
		}
	});
var _narkisr$elm_ui$Systems_Add$SaveTemplate = {ctor: 'SaveTemplate'};
var _narkisr$elm_ui$Systems_Add$SaveSystem = {ctor: 'SaveSystem'};
var _narkisr$elm_ui$Systems_Add$saveMenu = A2(
	_elm_lang$html$Html$ul,
	_elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$html$Html_Attributes$class('dropdown-menu')
		]),
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$li,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$a,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('SaveSystem'),
							_elm_lang$html$Html_Attributes$href('#'),
							_elm_lang$html$Html_Events$onClick(_narkisr$elm_ui$Systems_Add$SaveSystem)
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Save system')
						]))
				])),
			A2(
			_elm_lang$html$Html$li,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$a,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('SaveTemplate'),
							_elm_lang$html$Html_Attributes$href('#'),
							_elm_lang$html$Html_Events$onClick(_narkisr$elm_ui$Systems_Add$SaveTemplate)
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Save as template')
						]))
				])),
			A2(
			_elm_lang$html$Html$li,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$a,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('Create'),
							_elm_lang$html$Html_Attributes$href('#'),
							_elm_lang$html$Html_Events$onClick(_narkisr$elm_ui$Systems_Add$Create)
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('Create System')
						]))
				]))
		]));
var _narkisr$elm_ui$Systems_Add$dropdown = _elm_lang$core$Native_List.fromArray(
	[
		A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$type$('button'),
				_elm_lang$html$Html_Attributes$class('btn btn-primary'),
				_elm_lang$html$Html_Events$onClick(_narkisr$elm_ui$Systems_Add$Stage)
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Stage')
			])),
		A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('btn btn-primary dropdown-toggle'),
				A2(_elm_lang$html$Html_Attributes$attribute, 'data-toggle', 'dropdown'),
				A2(_elm_lang$html$Html_Attributes$attribute, 'aria-haspopup', 'true'),
				A2(_elm_lang$html$Html_Attributes$attribute, 'aria-expanded', 'false')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$span,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('caret')
					]),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$span,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('sr-only')
					]),
				_elm_lang$core$Native_List.fromArray(
					[]))
			])),
		_narkisr$elm_ui$Systems_Add$saveMenu
	]);
var _narkisr$elm_ui$Systems_Add$Next = {ctor: 'Next'};
var _narkisr$elm_ui$Systems_Add$view = function (_p39) {
	var _p40 = _p39;
	var _p41 = _p40;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				_elm_lang$core$Native_List.fromArray(
					[
						(!_elm_lang$core$Native_Utils.eq(_p40.stage, _narkisr$elm_ui$Systems_Add$Error)) ? A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('col-md-offset-2 col-md-8')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_narkisr$elm_ui$Common_Components$panel(
								_narkisr$elm_ui$Systems_Add$currentView(_p41))
							])) : A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_narkisr$elm_ui$Systems_Add$errorsView(_p41))
					])),
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				A4(_narkisr$elm_ui$Common_Components$buttons, _p41, _narkisr$elm_ui$Systems_Add$Next, _narkisr$elm_ui$Systems_Add$Back, _narkisr$elm_ui$Systems_Add$dropdown))
			]));
};

var _narkisr$elm_ui$Systems_View$toHtml = F3(
	function (_p0, f, prop) {
		var _p1 = _p0;
		var _p2 = prop;
		if (_p2.ctor === 'Just') {
			return _narkisr$elm_ui$Common_Components$fixedPanel(
				A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[]),
					f(
						{ctor: '_Tuple2', _0: _p2._0, _1: _p1.system.machine})));
		} else {
			return A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[]));
		}
	});
var _narkisr$elm_ui$Systems_View$view = function (_p3) {
	var _p4 = _p3;
	var _p6 = _p4.system;
	var _p5 = _p4;
	var empty = function (op) {
		return !_elm_lang$core$Native_Utils.eq(
			op,
			A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[])));
	};
	var options = _elm_lang$core$Native_List.fromArray(
		[
			A3(_narkisr$elm_ui$Systems_View$toHtml, _p5, _narkisr$elm_ui$Systems_View_AWS$summarize, _p6.aws),
			A3(_narkisr$elm_ui$Systems_View$toHtml, _p5, _narkisr$elm_ui$Systems_View_GCE$summarize, _p6.gce),
			A3(_narkisr$elm_ui$Systems_View$toHtml, _p5, _narkisr$elm_ui$Systems_View_Openstack$summarize, _p6.openstack),
			A3(_narkisr$elm_ui$Systems_View$toHtml, _p5, _narkisr$elm_ui$Systems_View_KVM$summarize, _p6.kvm),
			A3(_narkisr$elm_ui$Systems_View$toHtml, _p5, _narkisr$elm_ui$Systems_View_Digital$summarize, _p6.digital)
		]);
	return A2(
		_elm_lang$core$Maybe$withDefault,
		_narkisr$elm_ui$Common_Components$notImplemented,
		_elm_lang$core$List$head(
			A2(_elm_lang$core$List$filter, empty, options)));
};
var _narkisr$elm_ui$Systems_View$setSystem = F2(
	function (model, system) {
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{system: system}));
	});
var _narkisr$elm_ui$Systems_View$Model = function (a) {
	return {system: a};
};
var _narkisr$elm_ui$Systems_View$init = _narkisr$elm_ui$Common_Utils$none(
	_narkisr$elm_ui$Systems_View$Model(_narkisr$elm_ui$Systems_Model_Common$emptySystem));
var _narkisr$elm_ui$Systems_View$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Systems_View$SetSystem = function (a) {
	return {ctor: 'SetSystem', _0: a};
};
var _narkisr$elm_ui$Systems_View$getSystem = function (id) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		_narkisr$elm_ui$Systems_View$SetSystem,
		_elm_lang$core$Task$toResult(
			A2(
				_narkisr$elm_ui$Common_Http$getJson,
				_narkisr$elm_ui$Systems_Decoders$systemDecoder,
				A2(_elm_lang$core$Basics_ops['++'], '/systems/', id))));
};
var _narkisr$elm_ui$Systems_View$update = F2(
	function (msg, model) {
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'ViewSystem':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _narkisr$elm_ui$Systems_View$getSystem(_p7._0)
				};
			case 'SetSystem':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p7._0,
					model,
					_narkisr$elm_ui$Systems_View$setSystem(model),
					_narkisr$elm_ui$Systems_View$NoOp);
			default:
				return _narkisr$elm_ui$Common_Utils$none(model);
		}
	});
var _narkisr$elm_ui$Systems_View$ViewSystem = function (a) {
	return {ctor: 'ViewSystem', _0: a};
};

var _narkisr$elm_ui$Systems_Launch$message = function (job) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$h4,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('Notice!')
				])),
			A2(
			_elm_lang$html$Html$span,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('A '),
					A2(
					_elm_lang$html$Html$strong,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(job)
						])),
					_elm_lang$html$Html$text(' operation '),
					_elm_lang$html$Html$text('will be performed on the following systems:')
				]))
		]);
};
var _narkisr$elm_ui$Systems_Launch$systemRow = F2(
	function (id, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(id)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						function (_) {
							return _.hostname;
						}(_p1.machine))
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p1.type$)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p1.env)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p1.owner)
					]))
			]);
	});
var _narkisr$elm_ui$Systems_Launch$Model = F2(
	function (a, b) {
		return {job: a, table: b};
	});
var _narkisr$elm_ui$Systems_Launch$init = function () {
	var table = A5(
		_narkisr$elm_ui$Table$init,
		'launchListing',
		false,
		_elm_lang$core$Native_List.fromArray(
			['#', 'Hostname', 'Type', 'Env', 'Owner']),
		_narkisr$elm_ui$Systems_Launch$systemRow,
		'Systems');
	return _narkisr$elm_ui$Common_Utils$none(
		A2(_narkisr$elm_ui$Systems_Launch$Model, '', table));
}();
var _narkisr$elm_ui$Systems_Launch$Cancel = {ctor: 'Cancel'};
var _narkisr$elm_ui$Systems_Launch$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Systems_Launch$Run = {ctor: 'Run'};
var _narkisr$elm_ui$Systems_Launch$JobLaunched = function (a) {
	return {ctor: 'JobLaunched', _0: a};
};
var _narkisr$elm_ui$Systems_Launch$update = F2(
	function (msg, _p2) {
		var _p3 = _p2;
		var _p7 = _p3;
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'JobLaunched':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p4._0,
					_p7,
					function (res) {
						return _narkisr$elm_ui$Common_Utils$none(_p7);
					},
					_narkisr$elm_ui$Systems_Launch$NoOp);
			case 'SetupJob':
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p7,
						{job: _p4._0}));
			case 'LoadPage':
				var newTable = A2(_narkisr$elm_ui$Table$update, _p4._0, _p7.table);
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p7,
						{table: newTable}));
			case 'Run':
				var runAll = _elm_lang$core$Platform_Cmd$batch(
					A2(
						_elm_lang$core$List$map,
						function (id) {
							return A3(_narkisr$elm_ui$Jobs_Common$runJob, id, _p3.job, _narkisr$elm_ui$Systems_Launch$JobLaunched);
						},
						A2(
							_elm_lang$core$List$map,
							function (_p5) {
								var _p6 = _p5;
								return _p6._0;
							},
							_p7.table.rows)));
				return {ctor: '_Tuple2', _0: _p7, _1: runAll};
			case 'Cancel':
				return _narkisr$elm_ui$Common_Utils$none(_p7);
			default:
				return _narkisr$elm_ui$Common_Utils$none(_p7);
		}
	});
var _narkisr$elm_ui$Systems_Launch$LoadPage = function (a) {
	return {ctor: 'LoadPage', _0: a};
};
var _narkisr$elm_ui$Systems_Launch$view = function (_p8) {
	var _p9 = _p8;
	var systemsTable = _circuithub$elm_bootstrap_html$Bootstrap_Html$panelDefault_(
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Systems_Launch$LoadPage,
				_narkisr$elm_ui$Table$view(_p9.table))
			]));
	return A4(
		_narkisr$elm_ui$Common_Components$dangerCallout,
		_narkisr$elm_ui$Systems_Launch$message(_p9.job),
		systemsTable,
		_narkisr$elm_ui$Systems_Launch$Cancel,
		_narkisr$elm_ui$Systems_Launch$Run);
};
var _narkisr$elm_ui$Systems_Launch$SetupJob = function (a) {
	return {ctor: 'SetupJob', _0: a};
};

var _sporto$hop$Hop_Types$newQuery = _elm_lang$core$Dict$empty;
var _sporto$hop$Hop_Types$newLocation = {
	query: _sporto$hop$Hop_Types$newQuery,
	path: _elm_lang$core$Native_List.fromArray(
		[])
};
var _sporto$hop$Hop_Types$Location = F2(
	function (a, b) {
		return {path: a, query: b};
	});
var _sporto$hop$Hop_Types$PathMatcher = F2(
	function (a, b) {
		return {parser: a, segments: b};
	});
var _sporto$hop$Hop_Types$Config = F4(
	function (a, b, c, d) {
		return {basePath: a, hash: b, matchers: c, notFound: d};
	});
var _sporto$hop$Hop_Types$Router = function (a) {
	return {run: a};
};

var _sporto$hop$Hop_Matchers$str = _Bogdanp$elm_combine$Combine$regex('[^/]+');
var _sporto$hop$Hop_Matchers$int = _Bogdanp$elm_combine$Combine_Num$int;
var _sporto$hop$Hop_Matchers$parserWithBeginningAndEnd = function (parser) {
	return A2(_Bogdanp$elm_combine$Combine_Infix_ops['<*'], parser, _Bogdanp$elm_combine$Combine$end);
};
var _sporto$hop$Hop_Matchers$match1 = F2(
	function (constructor, segment1) {
		var constructor$ = function (_p0) {
			var _p1 = _p0;
			return constructor;
		};
		var parser = A2(
			_Bogdanp$elm_combine$Combine$map,
			constructor$,
			_sporto$hop$Hop_Matchers$parserWithBeginningAndEnd(
				_Bogdanp$elm_combine$Combine$skip(
					_Bogdanp$elm_combine$Combine$string(segment1))));
		return {
			parser: parser,
			segments: _elm_lang$core$Native_List.fromArray(
				[segment1])
		};
	});
var _sporto$hop$Hop_Matchers$match2 = F3(
	function (constructor, segment1, parser1) {
		var parser = A2(
			_Bogdanp$elm_combine$Combine$map,
			constructor,
			_sporto$hop$Hop_Matchers$parserWithBeginningAndEnd(
				A2(
					_Bogdanp$elm_combine$Combine_Infix_ops['*>'],
					_Bogdanp$elm_combine$Combine$string(segment1),
					parser1)));
		return {
			parser: parser,
			segments: _elm_lang$core$Native_List.fromArray(
				[segment1])
		};
	});
var _sporto$hop$Hop_Matchers$match3 = F4(
	function (constructor, segment1, parser1, segment2) {
		var parser = A2(
			_Bogdanp$elm_combine$Combine$map,
			constructor,
			_sporto$hop$Hop_Matchers$parserWithBeginningAndEnd(
				A2(
					_Bogdanp$elm_combine$Combine_Infix_ops['<*'],
					A2(
						_Bogdanp$elm_combine$Combine_Infix_ops['*>'],
						_Bogdanp$elm_combine$Combine$string(segment1),
						parser1),
					_Bogdanp$elm_combine$Combine$string(segment2))));
		return {
			parser: parser,
			segments: _elm_lang$core$Native_List.fromArray(
				[segment1, segment2])
		};
	});
var _sporto$hop$Hop_Matchers$match4 = F5(
	function (constructor, segment1, parser1, segment2, parser2) {
		var constructor$ = function (_p2) {
			var _p3 = _p2;
			return A2(constructor, _p3._0, _p3._1);
		};
		var parser = A2(
			_Bogdanp$elm_combine$Combine$map,
			constructor$,
			_sporto$hop$Hop_Matchers$parserWithBeginningAndEnd(
				A2(
					_Bogdanp$elm_combine$Combine$andThen,
					A2(
						_Bogdanp$elm_combine$Combine_Infix_ops['*>'],
						_Bogdanp$elm_combine$Combine$string(segment1),
						parser1),
					function (r) {
						return A2(
							_Bogdanp$elm_combine$Combine$map,
							function (x) {
								return {ctor: '_Tuple2', _0: r, _1: x};
							},
							A2(
								_Bogdanp$elm_combine$Combine_Infix_ops['*>'],
								_Bogdanp$elm_combine$Combine$string(segment2),
								parser2));
					})));
		return {
			parser: parser,
			segments: _elm_lang$core$Native_List.fromArray(
				[segment1, segment2])
		};
	});
var _sporto$hop$Hop_Matchers$nested1 = F3(
	function (constructor, segment1, children) {
		var childrenParsers = A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.parser;
			},
			children);
		var parser = A2(
			_Bogdanp$elm_combine$Combine$map,
			constructor,
			_sporto$hop$Hop_Matchers$parserWithBeginningAndEnd(
				A2(
					_Bogdanp$elm_combine$Combine$andThen,
					_Bogdanp$elm_combine$Combine$string(segment1),
					function (x) {
						return _Bogdanp$elm_combine$Combine$choice(childrenParsers);
					})));
		return {
			parser: parser,
			segments: _elm_lang$core$Native_List.fromArray(
				[segment1])
		};
	});
var _sporto$hop$Hop_Matchers$nested2 = F4(
	function (constructor, segment1, parser1, children) {
		var constructor$ = function (_p4) {
			var _p5 = _p4;
			return A2(constructor, _p5._0, _p5._1);
		};
		var childrenParsers = A2(
			_elm_lang$core$List$map,
			function (_) {
				return _.parser;
			},
			children);
		var parser = A2(
			_Bogdanp$elm_combine$Combine$map,
			constructor$,
			_sporto$hop$Hop_Matchers$parserWithBeginningAndEnd(
				A2(
					_Bogdanp$elm_combine$Combine$andThen,
					A2(
						_Bogdanp$elm_combine$Combine_Infix_ops['*>'],
						_Bogdanp$elm_combine$Combine$string(segment1),
						parser1),
					function (r) {
						return A2(
							_Bogdanp$elm_combine$Combine$map,
							function (x) {
								return {ctor: '_Tuple2', _0: r, _1: x};
							},
							_Bogdanp$elm_combine$Combine$choice(childrenParsers));
					})));
		return {
			parser: parser,
			segments: _elm_lang$core$Native_List.fromArray(
				[segment1])
		};
	});

var _narkisr$elm_ui$Systems_Routing$Delete = function (a) {
	return {ctor: 'Delete', _0: a};
};
var _narkisr$elm_ui$Systems_Routing$View = function (a) {
	return {ctor: 'View', _0: a};
};
var _narkisr$elm_ui$Systems_Routing$matcherView = A3(_sporto$hop$Hop_Matchers$match2, _narkisr$elm_ui$Systems_Routing$View, '/view/', _sporto$hop$Hop_Matchers$int);
var _narkisr$elm_ui$Systems_Routing$List = {ctor: 'List'};
var _narkisr$elm_ui$Systems_Routing$matcherList = A2(_sporto$hop$Hop_Matchers$match1, _narkisr$elm_ui$Systems_Routing$List, '/list');
var _narkisr$elm_ui$Systems_Routing$Launch = {ctor: 'Launch'};
var _narkisr$elm_ui$Systems_Routing$matcherLaunch = A2(_sporto$hop$Hop_Matchers$match1, _narkisr$elm_ui$Systems_Routing$Launch, '/launch');
var _narkisr$elm_ui$Systems_Routing$Add = {ctor: 'Add'};
var _narkisr$elm_ui$Systems_Routing$matcherAdd = A2(_sporto$hop$Hop_Matchers$match1, _narkisr$elm_ui$Systems_Routing$Add, '/add');
var _narkisr$elm_ui$Systems_Routing$matchers = _elm_lang$core$Native_List.fromArray(
	[_narkisr$elm_ui$Systems_Routing$matcherAdd, _narkisr$elm_ui$Systems_Routing$matcherList, _narkisr$elm_ui$Systems_Routing$matcherLaunch, _narkisr$elm_ui$Systems_Routing$matcherView]);

var _narkisr$elm_ui$Nav_Common$Users = {ctor: 'Users'};
var _narkisr$elm_ui$Nav_Common$Stacks = {ctor: 'Stacks'};
var _narkisr$elm_ui$Nav_Common$Templates = {ctor: 'Templates'};
var _narkisr$elm_ui$Nav_Common$Jobs = {ctor: 'Jobs'};
var _narkisr$elm_ui$Nav_Common$Types = {ctor: 'Types'};
var _narkisr$elm_ui$Nav_Common$Systems = {ctor: 'Systems'};
var _narkisr$elm_ui$Nav_Common$Stats = {ctor: 'Stats'};
var _narkisr$elm_ui$Nav_Common$View = {ctor: 'View'};
var _narkisr$elm_ui$Nav_Common$List = {ctor: 'List'};
var _narkisr$elm_ui$Nav_Common$Edit = {ctor: 'Edit'};
var _narkisr$elm_ui$Nav_Common$Delete = {ctor: 'Delete'};
var _narkisr$elm_ui$Nav_Common$Launch = {ctor: 'Launch'};
var _narkisr$elm_ui$Nav_Common$Add = {ctor: 'Add'};

var _narkisr$elm_ui$Systems_Core$addedSystem = function (model) {
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Basics$toString(model.systemsAdd.stage),
		_1: _narkisr$elm_ui$Systems_Add$intoSystem(model.systemsAdd)
	};
};
var _narkisr$elm_ui$Systems_Core$Model = F5(
	function (a, b, c, d, e) {
		return {systemsList: a, systemsAdd: b, systemsView: c, systemsLaunch: d, navChange: e};
	});
var _narkisr$elm_ui$Systems_Core$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Systems_Core$SystemsLaunch = function (a) {
	return {ctor: 'SystemsLaunch', _0: a};
};
var _narkisr$elm_ui$Systems_Core$setupJob = F2(
	function (msg, _p0) {
		var _p1 = _p0;
		var _p7 = _p1.systemsList;
		var _p6 = _p1;
		var table = _p7.table;
		var _p2 = _p7.systems;
		var systems = _p2._1;
		var selected = A2(
			_elm_lang$core$List$filter,
			function (_p3) {
				var _p4 = _p3;
				return A2(_elm_lang$core$Set$member, _p4._0, table.selected);
			},
			systems);
		var selectedTable = _elm_lang$core$Native_Utils.update(
			table,
			{rows: selected, selected: _elm_lang$core$Set$empty, id: 'launchListing'});
		var _p5 = A2(
			_narkisr$elm_ui$Systems_Launch$update,
			msg,
			_elm_lang$core$Native_Utils.update(
				_p1.systemsLaunch,
				{table: selectedTable}));
		var newLaunch = _p5._0;
		var effect = _p5._1;
		if (_elm_lang$core$List$isEmpty(selected)) {
			return _narkisr$elm_ui$Common_Utils$none(
				_elm_lang$core$Native_Utils.update(
					_p6,
					{
						systemsList: _elm_lang$core$Native_Utils.update(
							_p7,
							{error: _narkisr$elm_ui$Systems_List$NoSystemSelected})
					}));
		} else {
			var newList = _elm_lang$core$Native_Utils.update(
				_p7,
				{error: _narkisr$elm_ui$Systems_List$NoError});
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					_p6,
					{
						systemsLaunch: newLaunch,
						systemsList: newList,
						navChange: _elm_lang$core$Maybe$Just('systems/launch')
					}),
				_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Core$SystemsLaunch, effect)
			};
		}
	});
var _narkisr$elm_ui$Systems_Core$SystemsView = function (a) {
	return {ctor: 'SystemsView', _0: a};
};
var _narkisr$elm_ui$Systems_Core$SystemsAdd = function (a) {
	return {ctor: 'SystemsAdd', _0: a};
};
var _narkisr$elm_ui$Systems_Core$SystemsListing = function (a) {
	return {ctor: 'SystemsListing', _0: a};
};
var _narkisr$elm_ui$Systems_Core$init = function () {
	var _p8 = _narkisr$elm_ui$Systems_Launch$init;
	var systemsLaunch = _p8._0;
	var _p9 = _narkisr$elm_ui$Systems_Add$init;
	var systemsAdd = _p9._0;
	var systemsAddMsg = _p9._1;
	var _p10 = _narkisr$elm_ui$Systems_View$init;
	var systemsView = _p10._0;
	var _p11 = _narkisr$elm_ui$Systems_List$init;
	var systemsList = _p11._0;
	var systemsListMsg = _p11._1;
	var msgs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Core$SystemsListing, systemsListMsg),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Core$SystemsAdd, systemsAddMsg)
		]);
	return {
		ctor: '_Tuple2',
		_0: A5(_narkisr$elm_ui$Systems_Core$Model, systemsList, systemsAdd, systemsView, systemsLaunch, _elm_lang$core$Maybe$Nothing),
		_1: _elm_lang$core$Platform_Cmd$batch(msgs)
	};
}();
var _narkisr$elm_ui$Systems_Core$update = F2(
	function (msg, _p12) {
		var _p13 = _p12;
		var _p31 = _p13.systemsView;
		var _p30 = _p13.systemsAdd;
		var _p29 = _p13;
		var _p14 = msg;
		switch (_p14.ctor) {
			case 'SystemsView':
				var _p15 = A2(_narkisr$elm_ui$Systems_View$update, _p14._0, _p31);
				var newSystems = _p15._0;
				var msgs = _p15._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p29,
						{systemsView: newSystems}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Core$SystemsView, msgs)
				};
			case 'SystemsListing':
				var _p20 = _p14._0;
				var _p16 = _p20;
				if ((_p16.ctor === 'LoadPage') && (_p16._0.ctor === 'View')) {
					var _p18 = _p16._0._0;
					var _p17 = A2(
						_narkisr$elm_ui$Systems_View$update,
						_narkisr$elm_ui$Systems_View$ViewSystem(_p18),
						_p31);
					var newSystems = _p17._0;
					var msgs = _p17._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p29,
							{
								systemsView: newSystems,
								navChange: _elm_lang$core$Maybe$Just(
									A2(_elm_lang$core$Basics_ops['++'], 'systems/view/', _p18))
							}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Core$SystemsView, msgs)
					};
				} else {
					var _p19 = A2(_narkisr$elm_ui$Systems_List$update, _p20, _p13.systemsList);
					var newSystems = _p19._0;
					var effect = _p19._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p29,
							{systemsList: newSystems}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Core$SystemsListing, effect)
					};
				}
			case 'SystemsAdd':
				var _p25 = _p14._0;
				var _p21 = _p25;
				switch (_p21.ctor) {
					case 'JobLaunched':
						return _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p29,
								{
									navChange: _elm_lang$core$Maybe$Just('jobs/list')
								}));
					case 'SaveTemplate':
						return _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p29,
								{
									navChange: _elm_lang$core$Maybe$Just('templates/add')
								}));
					case 'Saved':
						var _p22 = _narkisr$elm_ui$Systems_Add$init;
						var initial = _p22._0;
						var initEffects = _p22._1;
						var _p23 = A2(_narkisr$elm_ui$Systems_Add$update, _p25, _p30);
						var newSystems = _p23._0;
						var newEffects = _p23._1;
						return ((!_elm_lang$core$Native_Utils.eq(newEffects, _elm_lang$core$Platform_Cmd$none)) && _elm_lang$core$Native_Utils.eq(_p21._0, _narkisr$elm_ui$Systems_Add$NoOp)) ? {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								_p29,
								{
									navChange: _elm_lang$core$Maybe$Just('systems/list'),
									systemsAdd: initial
								}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Core$SystemsAdd, initEffects)
						} : {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								_p29,
								{systemsAdd: newSystems}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Core$SystemsAdd, newEffects)
						};
					default:
						var _p24 = A2(_narkisr$elm_ui$Systems_Add$update, _p25, _p30);
						var newSystems = _p24._0;
						var effect = _p24._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								_p29,
								{systemsAdd: newSystems}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Core$SystemsAdd, effect)
						};
				}
			case 'SystemsLaunch':
				var _p28 = _p14._0;
				var _p26 = A2(_elm_lang$core$Debug$log, '', _p28);
				switch (_p26.ctor) {
					case 'Cancel':
						return _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p29,
								{
									navChange: _elm_lang$core$Maybe$Just('systems/list')
								}));
					case 'JobLaunched':
						return _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p29,
								{
									navChange: _elm_lang$core$Maybe$Just('jobs/list')
								}));
					case 'SetupJob':
						return A2(_narkisr$elm_ui$Systems_Core$setupJob, _p28, _p29);
					case 'Run':
						var _p27 = A2(_narkisr$elm_ui$Systems_Launch$update, _p28, _p29.systemsLaunch);
						var newLaunch = _p27._0;
						var effect = _p27._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								_p29,
								{systemsLaunch: newLaunch}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Systems_Core$SystemsLaunch, effect)
						};
					default:
						return _narkisr$elm_ui$Common_Utils$none(_p29);
				}
			default:
				return _narkisr$elm_ui$Common_Utils$none(_p29);
		}
	});
var _narkisr$elm_ui$Systems_Core$view = F2(
	function (model, route) {
		var _p32 = route;
		switch (_p32.ctor) {
			case 'List':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Systems_Core$SystemsListing,
					_narkisr$elm_ui$Systems_List$view(model.systemsList));
			case 'Launch':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Systems_Core$SystemsLaunch,
					_narkisr$elm_ui$Systems_Launch$view(model.systemsLaunch));
			case 'Add':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Systems_Core$SystemsAdd,
					_narkisr$elm_ui$Systems_Add$view(model.systemsAdd));
			case 'View':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Systems_Core$SystemsView,
					_narkisr$elm_ui$Systems_View$view(model.systemsView));
			default:
				return _narkisr$elm_ui$Common_Components$notImplemented;
		}
	});

var _narkisr$elm_ui$Stacks_Model$System = F2(
	function (a, b) {
		return {count: a, template: b};
	});
var _narkisr$elm_ui$Stacks_Model$Stack = F3(
	function (a, b, c) {
		return {name: a, description: b, systems: c};
	});
var _narkisr$elm_ui$Stacks_Model$emptyStack = A3(
	_narkisr$elm_ui$Stacks_Model$Stack,
	'',
	'',
	_elm_lang$core$Native_List.fromArray(
		[]));

var _narkisr$elm_ui$Templates_Model_Common$partialMachine = F2(
	function (user, os) {
		return A7(_narkisr$elm_ui$Systems_Model_Common$Machine, user, '', '', _elm_lang$core$Maybe$Nothing, os, _elm_lang$core$Maybe$Nothing, _elm_lang$core$Maybe$Nothing);
	});
var _narkisr$elm_ui$Templates_Model_Common$partialMachineDecoder = A3(
	_elm_lang$core$Json_Decode$object2,
	_narkisr$elm_ui$Templates_Model_Common$partialMachine,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'user', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'os', _elm_lang$core$Json_Decode$string));
var _narkisr$elm_ui$Templates_Model_Common$emptyDefaults = _elm_lang$core$Dict$empty;
var _narkisr$elm_ui$Templates_Model_Common$OpenstackDefaults = function (a) {
	return {networks: a};
};
var _narkisr$elm_ui$Templates_Model_Common$emptyOpenstackDefaults = _narkisr$elm_ui$Templates_Model_Common$OpenstackDefaults(
	_elm_lang$core$Maybe$Just(
		_elm_lang$core$Native_List.fromArray(
			[])));
var _narkisr$elm_ui$Templates_Model_Common$defaultsByEnv = function (envs) {
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$map,
			function (env) {
				return {
					ctor: '_Tuple2',
					_0: env,
					_1: {
						openstack: _elm_lang$core$Maybe$Just(_narkisr$elm_ui$Templates_Model_Common$emptyOpenstackDefaults)
					}
				};
			},
			envs));
};
var _narkisr$elm_ui$Templates_Model_Common$openstackDefaults = A2(
	_elm_lang$core$Json_Decode$object1,
	_narkisr$elm_ui$Templates_Model_Common$OpenstackDefaults,
	_elm_lang$core$Json_Decode$maybe(
		A2(
			_elm_lang$core$Json_Decode_ops[':='],
			'networks',
			_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string))));
var _narkisr$elm_ui$Templates_Model_Common$Template = function (a) {
	return function (b) {
		return function (c) {
			return function (d) {
				return function (e) {
					return function (f) {
						return function (g) {
							return function (h) {
								return function (i) {
									return function (j) {
										return function (k) {
											return {name: a, type$: b, description: c, machine: d, aws: e, gce: f, digital: g, openstack: h, kvm: i, physical: j, defaults: k};
										};
									};
								};
							};
						};
					};
				};
			};
		};
	};
};
var _narkisr$elm_ui$Templates_Model_Common$emptyTemplate = _narkisr$elm_ui$Templates_Model_Common$Template('')('')('')(_narkisr$elm_ui$Systems_Model_Common$emptyMachine)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing)(_elm_lang$core$Maybe$Nothing);
var _narkisr$elm_ui$Templates_Model_Common$Defaults = function (a) {
	return {openstack: a};
};
var _narkisr$elm_ui$Templates_Model_Common$defaultsDecoder = A2(
	_elm_lang$core$Json_Decode$object1,
	_narkisr$elm_ui$Templates_Model_Common$Defaults,
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'openstack', _narkisr$elm_ui$Templates_Model_Common$openstackDefaults)));
var _narkisr$elm_ui$Templates_Model_Common$defaultsDictDecoder = _elm_lang$core$Json_Decode$dict(_narkisr$elm_ui$Templates_Model_Common$defaultsDecoder);
var _narkisr$elm_ui$Templates_Model_Common$decodeDefaults = function (json) {
	var _p0 = A2(_elm_lang$core$Json_Decode$decodeString, _narkisr$elm_ui$Templates_Model_Common$defaultsDictDecoder, json);
	if (_p0.ctor === 'Ok') {
		return _p0._0;
	} else {
		return A2(_elm_lang$core$Debug$log, _p0._0, _narkisr$elm_ui$Templates_Model_Common$emptyDefaults);
	}
};
var _narkisr$elm_ui$Templates_Model_Common$templateDecoder = A2(
	_narkisr$elm_ui$Common_Http$apply,
	A2(
		_narkisr$elm_ui$Common_Http$apply,
		A2(
			_narkisr$elm_ui$Common_Http$apply,
			A2(
				_narkisr$elm_ui$Common_Http$apply,
				A2(
					_narkisr$elm_ui$Common_Http$apply,
					A2(
						_narkisr$elm_ui$Common_Http$apply,
						A2(
							_narkisr$elm_ui$Common_Http$apply,
							A2(
								_narkisr$elm_ui$Common_Http$apply,
								A2(
									_narkisr$elm_ui$Common_Http$apply,
									A2(
										_narkisr$elm_ui$Common_Http$apply,
										A2(
											_elm_lang$core$Json_Decode$map,
											_narkisr$elm_ui$Templates_Model_Common$Template,
											A2(_elm_lang$core$Json_Decode_ops[':='], 'name', _elm_lang$core$Json_Decode$string)),
										A2(_elm_lang$core$Json_Decode_ops[':='], 'type', _elm_lang$core$Json_Decode$string)),
									A2(_elm_lang$core$Json_Decode_ops[':='], 'description', _elm_lang$core$Json_Decode$string)),
								A2(_elm_lang$core$Json_Decode_ops[':='], 'machine', _narkisr$elm_ui$Templates_Model_Common$partialMachineDecoder)),
							_elm_lang$core$Json_Decode$maybe(
								A2(_elm_lang$core$Json_Decode_ops[':='], 'aws', _narkisr$elm_ui$Systems_Decoders$awsDecoder))),
						_elm_lang$core$Json_Decode$maybe(
							A2(_elm_lang$core$Json_Decode_ops[':='], 'gce', _narkisr$elm_ui$Systems_Decoders$gceDecoder))),
					_elm_lang$core$Json_Decode$maybe(
						A2(_elm_lang$core$Json_Decode_ops[':='], 'digital-ocean', _narkisr$elm_ui$Systems_Decoders$digitalDecoder))),
				_elm_lang$core$Json_Decode$maybe(
					A2(_elm_lang$core$Json_Decode_ops[':='], 'openstack', _narkisr$elm_ui$Systems_Decoders$openstackDecoder))),
			_elm_lang$core$Json_Decode$maybe(
				A2(_elm_lang$core$Json_Decode_ops[':='], 'kvm', _narkisr$elm_ui$Systems_Decoders$kvmDecoder))),
		_elm_lang$core$Json_Decode$maybe(
			A2(_elm_lang$core$Json_Decode_ops[':='], 'physical', _narkisr$elm_ui$Systems_Decoders$physicalDecoder))),
	_elm_lang$core$Json_Decode$maybe(
		A2(_elm_lang$core$Json_Decode_ops[':='], 'defaults', _narkisr$elm_ui$Templates_Model_Common$defaultsDictDecoder)));

var _narkisr$elm_ui$Templates_List$templateList = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['templates']),
	_elm_lang$core$Json_Decode$list(_narkisr$elm_ui$Templates_Model_Common$templateDecoder));
var _narkisr$elm_ui$Templates_List$getTemplates = function (msg) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		msg,
		_elm_lang$core$Task$toResult(
			A2(_narkisr$elm_ui$Common_Http$getJson, _narkisr$elm_ui$Templates_List$templateList, '/templates')));
};
var _narkisr$elm_ui$Templates_List$findTemplate = F2(
	function (_p0, name) {
		var _p1 = _p0;
		return A2(
			_elm_lang$core$Maybe$withDefault,
			_narkisr$elm_ui$Templates_Model_Common$emptyTemplate,
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$filter,
					function (template) {
						return _elm_lang$core$Native_Utils.eq(template.name, name);
					},
					_p1.templates)));
	});
var _narkisr$elm_ui$Templates_List$setTemplates = F2(
	function (model, templates) {
		var templatePairs = A2(
			_elm_lang$core$List$map,
			function (_p2) {
				var _p3 = _p2;
				return {ctor: '_Tuple2', _0: _p3.type$, _1: _p3};
			},
			templates);
		var newTable = A2(
			_narkisr$elm_ui$Table$update,
			_narkisr$elm_ui$Table$UpdateRows(templatePairs),
			model.table);
		var total = _elm_lang$core$List$length(templates);
		var newPager = A2(
			_narkisr$elm_ui$Pager$update,
			_narkisr$elm_ui$Pager$UpdateTotal(
				_elm_lang$core$Basics$toFloat(total)),
			model.pager);
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{templates: templates, pager: newPager, table: newTable}));
	});
var _narkisr$elm_ui$Templates_List$templateRow = F2(
	function (id, _p4) {
		var _p5 = _p4;
		return _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p5.name)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p5.type$)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p5.description)
					]))
			]);
	});
var _narkisr$elm_ui$Templates_List$Model = F3(
	function (a, b, c) {
		return {templates: a, table: b, pager: c};
	});
var _narkisr$elm_ui$Templates_List$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Templates_List$update = F2(
	function (msg, model) {
		var _p6 = msg;
		if (_p6.ctor === 'SetTemplates') {
			return A4(
				_narkisr$elm_ui$Common_Errors$successHandler,
				_p6._0,
				model,
				_narkisr$elm_ui$Templates_List$setTemplates(model),
				_narkisr$elm_ui$Templates_List$NoOp);
		} else {
			return _narkisr$elm_ui$Common_Utils$none(model);
		}
	});
var _narkisr$elm_ui$Templates_List$SetTemplates = function (a) {
	return {ctor: 'SetTemplates', _0: a};
};
var _narkisr$elm_ui$Templates_List$init = function () {
	var table = A5(
		_narkisr$elm_ui$Table$init,
		'templateListing',
		true,
		_elm_lang$core$Native_List.fromArray(
			['Name', 'Type', 'Description']),
		_narkisr$elm_ui$Templates_List$templateRow,
		'Templates');
	return {
		ctor: '_Tuple2',
		_0: A3(
			_narkisr$elm_ui$Templates_List$Model,
			_elm_lang$core$Native_List.fromArray(
				[]),
			table,
			_narkisr$elm_ui$Pager$init),
		_1: _narkisr$elm_ui$Templates_List$getTemplates(_narkisr$elm_ui$Templates_List$SetTemplates)
	};
}();
var _narkisr$elm_ui$Templates_List$GotoPage = function (a) {
	return {ctor: 'GotoPage', _0: a};
};
var _narkisr$elm_ui$Templates_List$LoadPage = function (a) {
	return {ctor: 'LoadPage', _0: a};
};
var _narkisr$elm_ui$Templates_List$view = function (_p7) {
	var _p8 = _p7;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('col-md-offset-1 col-md-10')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_circuithub$elm_bootstrap_html$Bootstrap_Html$panelDefault_(
								_elm_lang$core$Native_List.fromArray(
									[
										A2(
										_elm_lang$html$Html_App$map,
										_narkisr$elm_ui$Templates_List$LoadPage,
										_narkisr$elm_ui$Table$view(_p8.table))
									]))
							]))
					])),
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html_App$map,
						_narkisr$elm_ui$Templates_List$GotoPage,
						_narkisr$elm_ui$Pager$view(_p8.pager))
					]))
			]));
};

var _narkisr$elm_ui$Stacks_Add$setTemplates = F2(
	function (model, newTemplates) {
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{
					templates: A2(
						_elm_lang$core$List$map,
						function (_p0) {
							var _p1 = _p0;
							return _p1.name;
						},
						newTemplates)
				}));
	});
var _narkisr$elm_ui$Stacks_Add$Model = F4(
	function (a, b, c, d) {
		return {stack: a, template: b, templates: c, editDefaults: d};
	});
var _narkisr$elm_ui$Stacks_Add$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Stacks_Add$Cancel = {ctor: 'Cancel'};
var _narkisr$elm_ui$Stacks_Add$Save = {ctor: 'Save'};
var _narkisr$elm_ui$Stacks_Add$SetTemplates = function (a) {
	return {ctor: 'SetTemplates', _0: a};
};
var _narkisr$elm_ui$Stacks_Add$init = {
	ctor: '_Tuple2',
	_0: A4(
		_narkisr$elm_ui$Stacks_Add$Model,
		_narkisr$elm_ui$Stacks_Model$emptyStack,
		'',
		_elm_lang$core$Native_List.fromArray(
			[]),
		false),
	_1: _narkisr$elm_ui$Templates_List$getTemplates(_narkisr$elm_ui$Stacks_Add$SetTemplates)
};
var _narkisr$elm_ui$Stacks_Add$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'LoadTemplates':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _narkisr$elm_ui$Templates_List$getTemplates(_narkisr$elm_ui$Stacks_Add$SetTemplates)
				};
			case 'Select':
				return _narkisr$elm_ui$Common_Utils$none(model);
			case 'SetTemplates':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p2._0,
					model,
					_narkisr$elm_ui$Stacks_Add$setTemplates(model),
					_narkisr$elm_ui$Stacks_Add$NoOp);
			default:
				return _narkisr$elm_ui$Common_Utils$none(model);
		}
	});
var _narkisr$elm_ui$Stacks_Add$Select = function (a) {
	return {ctor: 'Select', _0: a};
};
var _narkisr$elm_ui$Stacks_Add$DescriptionInput = function (a) {
	return {ctor: 'DescriptionInput', _0: a};
};
var _narkisr$elm_ui$Stacks_Add$LoadEditor = {ctor: 'LoadEditor'};
var _narkisr$elm_ui$Stacks_Add$SelectTemplate = function (a) {
	return {ctor: 'SelectTemplate', _0: a};
};
var _narkisr$elm_ui$Stacks_Add$NameInput = function (a) {
	return {ctor: 'NameInput', _0: a};
};
var _narkisr$elm_ui$Stacks_Add$addView = function (_p3) {
	var _p4 = _p3;
	var _p5 = _p4.stack;
	return _narkisr$elm_ui$Common_Components$panel(
		_narkisr$elm_ui$Common_Components$panelContents(
			A2(
				_elm_lang$html$Html$form,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('form-horizontal'),
								A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_narkisr$elm_ui$Common_Components$group$,
								'Name',
								A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Stacks_Add$NameInput, ' ', _p5.name)),
								A2(
								_narkisr$elm_ui$Common_Components$group$,
								'Description',
								A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Stacks_Add$DescriptionInput, ' ', _p5.description)),
								A2(
								_narkisr$elm_ui$Common_Components$group$,
								'Templates',
								A3(_narkisr$elm_ui$Common_Components$selector, _narkisr$elm_ui$Stacks_Add$SelectTemplate, _p4.templates, _p4.template)),
								A2(
								_narkisr$elm_ui$Common_Components$group$,
								'Edit common',
								A2(_narkisr$elm_ui$Common_Components$checkbox, _narkisr$elm_ui$Stacks_Add$LoadEditor, _p4.editDefaults)),
								A2(
								_elm_lang$html$Html$div,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$id('jsoneditor'),
										_elm_lang$html$Html_Attributes$style(
										_elm_lang$core$Native_List.fromArray(
											[
												{ctor: '_Tuple2', _0: 'width', _1: '550px'},
												{ctor: '_Tuple2', _0: 'height', _1: '400px'},
												{ctor: '_Tuple2', _0: 'margin-left', _1: '25%'}
											]))
									]),
								_elm_lang$core$Native_List.fromArray(
									[]))
							]))
					]))));
};
var _narkisr$elm_ui$Stacks_Add$view = function (model) {
	return A4(
		_narkisr$elm_ui$Common_Components$infoCallout,
		_narkisr$elm_ui$Common_Components$info('Add a new Stack'),
		_narkisr$elm_ui$Stacks_Add$addView(model),
		_narkisr$elm_ui$Stacks_Add$Cancel,
		_narkisr$elm_ui$Stacks_Add$Save);
};
var _narkisr$elm_ui$Stacks_Add$LoadTemplates = {ctor: 'LoadTemplates'};

var _narkisr$elm_ui$Stacks_Core$Model = F2(
	function (a, b) {
		return {add: a, navChange: b};
	});
var _narkisr$elm_ui$Stacks_Core$StacksAdd = function (a) {
	return {ctor: 'StacksAdd', _0: a};
};
var _narkisr$elm_ui$Stacks_Core$init = function () {
	var _p0 = _narkisr$elm_ui$Stacks_Add$init;
	var add = _p0._0;
	var addEffects = _p0._1;
	var msgs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Stacks_Core$StacksAdd, addEffects)
		]);
	return {
		ctor: '_Tuple2',
		_0: A2(_narkisr$elm_ui$Stacks_Core$Model, add, _elm_lang$core$Maybe$Nothing),
		_1: _elm_lang$core$Platform_Cmd$batch(msgs)
	};
}();
var _narkisr$elm_ui$Stacks_Core$update = F2(
	function (msg, _p1) {
		var _p2 = _p1;
		var _p5 = _p2;
		var _p3 = msg;
		if (_p3.ctor === 'StacksAdd') {
			var _p4 = A2(_narkisr$elm_ui$Stacks_Add$update, _p3._0, _p2.add);
			var newAdd = _p4._0;
			var msgs = _p4._1;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					_p5,
					{add: newAdd}),
				_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Stacks_Core$StacksAdd, msgs)
			};
		} else {
			return _narkisr$elm_ui$Common_Utils$none(_p5);
		}
	});
var _narkisr$elm_ui$Stacks_Core$view = F2(
	function (model, section) {
		var _p6 = section;
		if (_p6.ctor === 'Add') {
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Stacks_Core$StacksAdd,
				_narkisr$elm_ui$Stacks_Add$view(model.add));
		} else {
			return _narkisr$elm_ui$Common_Components$notImplemented;
		}
	});
var _narkisr$elm_ui$Stacks_Core$loadTemplates = function (_p7) {
	var _p8 = _p7;
	var _p9 = A2(_narkisr$elm_ui$Stacks_Add$update, _narkisr$elm_ui$Stacks_Add$LoadTemplates, _p8.add);
	var newAdd = _p9._0;
	var msgs = _p9._1;
	return {
		ctor: '_Tuple2',
		_0: _elm_lang$core$Native_Utils.update(
			_p8,
			{add: newAdd}),
		_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Stacks_Core$StacksAdd, msgs)
	};
};
var _narkisr$elm_ui$Stacks_Core$NoOp = {ctor: 'NoOp'};

var _narkisr$elm_ui$Jobs_Routing$List = {ctor: 'List'};
var _narkisr$elm_ui$Jobs_Routing$matcherList = A2(_sporto$hop$Hop_Matchers$match1, _narkisr$elm_ui$Jobs_Routing$List, '/list');
var _narkisr$elm_ui$Jobs_Routing$Stats = {ctor: 'Stats'};
var _narkisr$elm_ui$Jobs_Routing$matcherStats = A2(_sporto$hop$Hop_Matchers$match1, _narkisr$elm_ui$Jobs_Routing$Stats, '/stats');
var _narkisr$elm_ui$Jobs_Routing$matchers = _elm_lang$core$Native_List.fromArray(
	[_narkisr$elm_ui$Jobs_Routing$matcherStats, _narkisr$elm_ui$Jobs_Routing$matcherList]);

var _narkisr$elm_ui$Common_NewTab$newtab = _elm_lang$core$Native_Platform.outgoingPort(
	'newtab',
	function (v) {
		return v;
	});

var _narkisr$elm_ui$Jobs_List$apply = F2(
	function (func, value) {
		return A3(
			_elm_lang$core$Json_Decode$object2,
			F2(
				function (x, y) {
					return x(y);
				}),
			func,
			value);
	});
var _narkisr$elm_ui$Jobs_List$accordionPanel = F3(
	function (active, ident, body) {
		var enabled = active ? ' in' : '';
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('panel panel-default')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('panel panel-heading'),
							_elm_lang$html$Html_Attributes$id(
							A2(_elm_lang$core$Basics_ops['++'], 'heading', ident)),
							A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'tab')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$html$Html$h4,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html_Attributes$class('panel-title')
								]),
							_elm_lang$core$Native_List.fromArray(
								[
									A2(
									_elm_lang$html$Html$a,
									_elm_lang$core$Native_List.fromArray(
										[
											A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'button'),
											A2(_elm_lang$html$Html_Attributes$attribute, 'data-toggle', 'collapse'),
											A2(_elm_lang$html$Html_Attributes$attribute, 'data-parent', '#accordion'),
											_elm_lang$html$Html_Attributes$href(
											A2(_elm_lang$core$Basics_ops['++'], '#collapse', ident)),
											A2(
											_elm_lang$html$Html_Attributes$attribute,
											'aria-expanded',
											_elm_lang$core$Basics$toString(active)),
											A2(
											_elm_lang$html$Html_Attributes$attribute,
											'aria-controls',
											A2(_elm_lang$core$Basics_ops['++'], 'collapse', ident))
										]),
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$html$Html$text(ident)
										]))
								]))
						])),
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$id(
							A2(_elm_lang$core$Basics_ops['++'], 'collapse', ident)),
							_elm_lang$html$Html_Attributes$class(
							A2(_elm_lang$core$Basics_ops['++'], 'panel-collapse collapse', enabled)),
							A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'tabpanel'),
							A2(
							_elm_lang$html$Html_Attributes$attribute,
							'aria-labelledby',
							A2(_elm_lang$core$Basics_ops['++'], 'heading', ident))
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$html$Html$div,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html_Attributes$class('panel-body')
								]),
							_elm_lang$core$Native_List.fromArray(
								[body]))
						]))
				]));
	});
var _narkisr$elm_ui$Jobs_List$doneRow = F2(
	function (tableid, _p0) {
		var _p1 = _p0;
		var _p3 = _p1.start;
		var _p2 = _p1.end;
		var pad = function (str) {
			return _elm_lang$core$Native_Utils.eq(
				_elm_lang$core$String$length(str),
				1) ? A2(_elm_lang$core$Basics_ops['++'], '0', str) : str;
		};
		var sec = _elm_lang$core$Basics$toString(
			A2(
				_elm_lang$core$Basics_ops['%'],
				_elm_lang$core$Basics$round((_p2 - _p3) / 1000),
				60));
		var min = _elm_lang$core$Basics$toString(
			(_elm_lang$core$Basics$round(_p2 - _p3) / (1000 * 60)) | 0);
		return _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p1.identity)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_mgold$elm_date_format$Date_Format$format,
							'%d/%m/%Y %H:%M',
							_elm_lang$core$Date$fromTime(_p3)))
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p1.hostname)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p1.queue)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$Basics_ops['++'],
							pad(min),
							A2(
								_elm_lang$core$Basics_ops['++'],
								':',
								pad(sec))))
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p1.status)
					]))
			]);
	});
var _narkisr$elm_ui$Jobs_List$runningRow = F2(
	function (tableId, _p4) {
		var _p5 = _p4;
		return _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p5.id)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p5.type$)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('progress progress-xs progress-striped active')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$div,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$class('progress-bar progress-bar-primary'),
										_elm_lang$html$Html_Attributes$id(_p5.status),
										_elm_lang$html$Html_Attributes$style(
										_elm_lang$core$Native_List.fromArray(
											[
												{ctor: '_Tuple2', _0: 'width', _1: '0%'}
											]))
									]),
								_elm_lang$core$Native_List.fromArray(
									[]))
							]))
					]))
			]);
	});
var _narkisr$elm_ui$Jobs_List$setDoneJobs = F2(
	function (_p7, _p6) {
		var _p8 = _p7;
		var _p9 = _p6;
		var jobsList = A2(
			_elm_lang$core$List$map,
			function (_p10) {
				var _p11 = _p10;
				return {ctor: '_Tuple2', _0: _p11.tid, _1: _p11};
			},
			_p9._1);
		var newDone = A2(
			_narkisr$elm_ui$Table$update,
			_narkisr$elm_ui$Table$UpdateRows(jobsList),
			_p8.done);
		var newPager = A2(
			_narkisr$elm_ui$Pager$update,
			_narkisr$elm_ui$Pager$UpdateTotal(
				_elm_lang$core$Basics$toFloat(_p9._0)),
			_p8.pager);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				_p8,
				{done: newDone, pager: newPager}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _narkisr$elm_ui$Jobs_List$setRunningJobs = F2(
	function (_p12, res) {
		var _p13 = _p12;
		var jobsList = A2(
			_elm_lang$core$List$map,
			function (_p14) {
				var _p15 = _p14;
				return {ctor: '_Tuple2', _0: _p15.tid, _1: _p15};
			},
			res);
		return {
			ctor: '_Tuple2',
			_0: _elm_lang$core$Native_Utils.update(
				_p13,
				{
					running: A2(
						_narkisr$elm_ui$Table$update,
						_narkisr$elm_ui$Table$UpdateRows(jobsList),
						_p13.running)
				}),
			_1: _elm_lang$core$Platform_Cmd$none
		};
	});
var _narkisr$elm_ui$Jobs_List$RunningJob = F7(
	function (a, b, c, d, e, f, g) {
		return {env: a, id: b, jid: c, status: d, tid: e, tid_link: f, type$: g};
	});
var _narkisr$elm_ui$Jobs_List$runningJob = A8(
	_elm_lang$core$Json_Decode$object7,
	_narkisr$elm_ui$Jobs_List$RunningJob,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'env', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'id', _elm_lang$core$Json_Decode$string),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'jid', _elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'status',
		_elm_lang$core$Json_Decode$oneOf(
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Json_Decode$string,
					_elm_lang$core$Json_Decode$null('')
				]))),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'tid', _elm_lang$core$Json_Decode$string),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'tid-link',
		_elm_lang$core$Json_Decode$oneOf(
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Json_Decode$string,
					_elm_lang$core$Json_Decode$null('')
				]))),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'type', _elm_lang$core$Json_Decode$string));
var _narkisr$elm_ui$Jobs_List$runningList = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['jobs']),
	_elm_lang$core$Json_Decode$list(_narkisr$elm_ui$Jobs_List$runningJob));
var _narkisr$elm_ui$Jobs_List$DoneJob = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {start: a, end: b, env: c, hostname: d, identity: e, queue: f, status: g, tid: h, tid_link: i};
	});
var _narkisr$elm_ui$Jobs_List$doneJob = A2(
	_narkisr$elm_ui$Jobs_List$apply,
	A2(
		_narkisr$elm_ui$Jobs_List$apply,
		A2(
			_narkisr$elm_ui$Jobs_List$apply,
			A2(
				_narkisr$elm_ui$Jobs_List$apply,
				A2(
					_narkisr$elm_ui$Jobs_List$apply,
					A2(
						_narkisr$elm_ui$Jobs_List$apply,
						A2(
							_narkisr$elm_ui$Jobs_List$apply,
							A2(
								_narkisr$elm_ui$Jobs_List$apply,
								A2(
									_elm_lang$core$Json_Decode$map,
									_narkisr$elm_ui$Jobs_List$DoneJob,
									A2(_elm_lang$core$Json_Decode_ops[':='], 'start', _elm_lang$core$Json_Decode$float)),
								A2(_elm_lang$core$Json_Decode_ops[':='], 'end', _elm_lang$core$Json_Decode$float)),
							A2(_elm_lang$core$Json_Decode_ops[':='], 'env', _elm_lang$core$Json_Decode$string)),
						A2(_elm_lang$core$Json_Decode_ops[':='], 'hostname', _elm_lang$core$Json_Decode$string)),
					A2(_elm_lang$core$Json_Decode_ops[':='], 'identity', _elm_lang$core$Json_Decode$string)),
				A2(_elm_lang$core$Json_Decode_ops[':='], 'queue', _elm_lang$core$Json_Decode$string)),
			A2(_elm_lang$core$Json_Decode_ops[':='], 'status', _elm_lang$core$Json_Decode$string)),
		A2(_elm_lang$core$Json_Decode_ops[':='], 'tid', _elm_lang$core$Json_Decode$string)),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'tid-link',
		_elm_lang$core$Json_Decode$oneOf(
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$core$Json_Decode$string,
					_elm_lang$core$Json_Decode$null('')
				]))));
var _narkisr$elm_ui$Jobs_List$doneList = A3(
	_elm_lang$core$Json_Decode$object2,
	F2(
		function (v0, v1) {
			return {ctor: '_Tuple2', _0: v0, _1: v1};
		}),
	A2(_elm_lang$core$Json_Decode_ops[':='], 'total', _elm_lang$core$Json_Decode$int),
	A2(
		_elm_lang$core$Json_Decode_ops[':='],
		'jobs',
		_elm_lang$core$Json_Decode$list(_narkisr$elm_ui$Jobs_List$doneJob)));
var _narkisr$elm_ui$Jobs_List$Model = F3(
	function (a, b, c) {
		return {running: a, done: b, pager: c};
	});
var _narkisr$elm_ui$Jobs_List$GotoPage = function (a) {
	return {ctor: 'GotoPage', _0: a};
};
var _narkisr$elm_ui$Jobs_List$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Jobs_List$LoadDone = function (a) {
	return {ctor: 'LoadDone', _0: a};
};
var _narkisr$elm_ui$Jobs_List$LoadRunning = function (a) {
	return {ctor: 'LoadRunning', _0: a};
};
var _narkisr$elm_ui$Jobs_List$view = function (_p16) {
	var _p17 = _p16;
	var _p19 = _p17.running;
	var _p18 = _p17.done;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('panel-group'),
				_elm_lang$html$Html_Attributes$id('accordion'),
				A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'tablist')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A3(
				_narkisr$elm_ui$Jobs_List$accordionPanel,
				_elm_lang$core$Basics$not(
					_elm_lang$core$List$isEmpty(_p19.rows)),
				'Running',
				_circuithub$elm_bootstrap_html$Bootstrap_Html$panelDefault_(
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$html$Html_App$map,
							_narkisr$elm_ui$Jobs_List$LoadRunning,
							_narkisr$elm_ui$Table$view(_p19))
						]))),
				A3(
				_narkisr$elm_ui$Jobs_List$accordionPanel,
				_elm_lang$core$Basics$not(
					_elm_lang$core$List$isEmpty(_p18.rows)),
				'Done',
				A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
							_elm_lang$core$Native_List.fromArray(
								[
									A2(
									_elm_lang$html$Html$div,
									_elm_lang$core$Native_List.fromArray(
										[
											_elm_lang$html$Html_Attributes$class('col-md-12')
										]),
									_elm_lang$core$Native_List.fromArray(
										[
											_circuithub$elm_bootstrap_html$Bootstrap_Html$panelDefault_(
											_elm_lang$core$Native_List.fromArray(
												[
													A2(
													_elm_lang$html$Html_App$map,
													_narkisr$elm_ui$Jobs_List$LoadDone,
													_narkisr$elm_ui$Table$view(_p18))
												]))
										]))
								])),
							_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
							_elm_lang$core$Native_List.fromArray(
								[
									A2(
									_elm_lang$html$Html_App$map,
									_narkisr$elm_ui$Jobs_List$GotoPage,
									_narkisr$elm_ui$Pager$view(_p17.pager))
								]))
						])))
			]));
};
var _narkisr$elm_ui$Jobs_List$Polling = {ctor: 'Polling'};
var _narkisr$elm_ui$Jobs_List$SetDone = function (a) {
	return {ctor: 'SetDone', _0: a};
};
var _narkisr$elm_ui$Jobs_List$getDone = F2(
	function (page, offset) {
		return A3(
			_elm_lang$core$Task$perform,
			_elm_community$basics_extra$Basics_Extra$never,
			_narkisr$elm_ui$Jobs_List$SetDone,
			_elm_lang$core$Task$toResult(
				A2(
					_narkisr$elm_ui$Common_Http$getJson,
					_narkisr$elm_ui$Jobs_List$doneList,
					A2(
						_elm_lang$core$Basics_ops['++'],
						'/jobs/done?offset=',
						A2(
							_elm_lang$core$Basics_ops['++'],
							_elm_lang$core$Basics$toString(offset),
							A2(
								_elm_lang$core$Basics_ops['++'],
								'&page=',
								_elm_lang$core$Basics$toString(page)))))));
	});
var _narkisr$elm_ui$Jobs_List$SetRunning = function (a) {
	return {ctor: 'SetRunning', _0: a};
};
var _narkisr$elm_ui$Jobs_List$getRunning = A3(
	_elm_lang$core$Task$perform,
	_elm_community$basics_extra$Basics_Extra$never,
	_narkisr$elm_ui$Jobs_List$SetRunning,
	_elm_lang$core$Task$toResult(
		A2(_narkisr$elm_ui$Common_Http$getJson, _narkisr$elm_ui$Jobs_List$runningList, '/jobs/running')));
var _narkisr$elm_ui$Jobs_List$init = function () {
	var done = A5(
		_narkisr$elm_ui$Table$init,
		'doneJobs',
		false,
		_elm_lang$core$Native_List.fromArray(
			['#', 'Start', 'Host', 'Queue', 'Runtime (min:sec)', 'Status']),
		_narkisr$elm_ui$Jobs_List$doneRow,
		'Done Jobs');
	var running = A5(
		_narkisr$elm_ui$Table$init,
		'runningJobs',
		false,
		_elm_lang$core$Native_List.fromArray(
			['#', 'Queue', 'Status']),
		_narkisr$elm_ui$Jobs_List$runningRow,
		'Running Jobs');
	return {
		ctor: '_Tuple2',
		_0: A3(_narkisr$elm_ui$Jobs_List$Model, running, done, _narkisr$elm_ui$Pager$init),
		_1: _elm_lang$core$Platform_Cmd$batch(
			_elm_lang$core$Native_List.fromArray(
				[
					_narkisr$elm_ui$Jobs_List$getRunning,
					A2(_narkisr$elm_ui$Jobs_List$getDone, 1, 10)
				]))
	};
}();
var _narkisr$elm_ui$Jobs_List$update = F2(
	function (msg, _p20) {
		var _p21 = _p20;
		var _p33 = _p21;
		var _p22 = msg;
		_v9_6:
		do {
			switch (_p22.ctor) {
				case 'Polling':
					return {
						ctor: '_Tuple2',
						_0: _p33,
						_1: _elm_lang$core$Platform_Cmd$batch(
							_elm_lang$core$Native_List.fromArray(
								[
									_narkisr$elm_ui$Jobs_List$getRunning,
									A2(_narkisr$elm_ui$Jobs_List$getDone, _p21.pager.page, 10)
								]))
					};
				case 'SetRunning':
					return A4(
						_narkisr$elm_ui$Common_Errors$successHandler,
						_p22._0,
						_p33,
						_narkisr$elm_ui$Jobs_List$setRunningJobs(_p33),
						_narkisr$elm_ui$Jobs_List$NoOp);
				case 'SetDone':
					return A4(
						_narkisr$elm_ui$Common_Errors$successHandler,
						_p22._0,
						_p33,
						_narkisr$elm_ui$Jobs_List$setDoneJobs(_p33),
						_narkisr$elm_ui$Jobs_List$NoOp);
				case 'GotoPage':
					var _p24 = _p22._0;
					var _p23 = _p24;
					if (_p23.ctor === 'NextPage') {
						var newPager = A2(_narkisr$elm_ui$Pager$update, _p24, _p33.pager);
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								_p33,
								{pager: newPager}),
							_1: A2(_narkisr$elm_ui$Jobs_List$getDone, _p23._0, 10)
						};
					} else {
						return {ctor: '_Tuple2', _0: _p33, _1: _elm_lang$core$Platform_Cmd$none};
					}
				case 'LoadDone':
					if (_p22._0.ctor === 'Select') {
						var _p28 = _p22._0._0;
						var emptyRow = A9(_narkisr$elm_ui$Jobs_List$DoneJob, 0, 0, '', '', '', '', '', '', '');
						var _p25 = A2(
							_elm_lang$core$Maybe$withDefault,
							{ctor: '_Tuple2', _0: _p28, _1: emptyRow},
							_elm_lang$core$List$head(
								A2(
									_elm_lang$core$List$filter,
									function (_p26) {
										var _p27 = _p26;
										return _elm_lang$core$Native_Utils.eq(_p27._1.tid, _p28);
									},
									_p21.done.rows)));
						var job = _p25._1;
						return {
							ctor: '_Tuple2',
							_0: _p33,
							_1: _narkisr$elm_ui$Common_NewTab$newtab(job.tid_link)
						};
					} else {
						break _v9_6;
					}
				case 'LoadRunning':
					if (_p22._0.ctor === 'Select') {
						var _p32 = _p22._0._0;
						var emptyRow = A7(_narkisr$elm_ui$Jobs_List$RunningJob, '', '', '', '', '', '', '');
						var _p29 = A2(
							_elm_lang$core$Maybe$withDefault,
							{ctor: '_Tuple2', _0: _p32, _1: emptyRow},
							_elm_lang$core$List$head(
								A2(
									_elm_lang$core$List$filter,
									function (_p30) {
										var _p31 = _p30;
										return _elm_lang$core$Native_Utils.eq(_p31._1.tid, _p32);
									},
									_p21.running.rows)));
						var job = _p29._1;
						return {
							ctor: '_Tuple2',
							_0: _p33,
							_1: _narkisr$elm_ui$Common_NewTab$newtab(job.tid_link)
						};
					} else {
						break _v9_6;
					}
				default:
					break _v9_6;
			}
		} while(false);
		return {ctor: '_Tuple2', _0: _p33, _1: _elm_lang$core$Platform_Cmd$none};
	});

var _narkisr$elm_ui$Jobs_Stats$emptyTimer = {min: 0, max: 0, mean: 0};
var _narkisr$elm_ui$Jobs_Stats$Timer = F3(
	function (a, b, c) {
		return {max: a, min: b, mean: c};
	});
var _narkisr$elm_ui$Jobs_Stats$Metrics = F4(
	function (a, b, c, d) {
		return {startTimer: a, stopTimer: b, provisionTimer: c, reloadTimer: d};
	});
var _narkisr$elm_ui$Jobs_Stats$Model = F4(
	function (a, b, c, d) {
		return {polls: a, charts: b, interval: c, enabled: d};
	});
var _narkisr$elm_ui$Jobs_Stats$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Jobs_Stats$LoadSession = function (a) {
	return {ctor: 'LoadSession', _0: a};
};
var _narkisr$elm_ui$Jobs_Stats$init = {
	ctor: '_Tuple2',
	_0: A4(
		_narkisr$elm_ui$Jobs_Stats$Model,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[]),
		15,
		false),
	_1: _narkisr$elm_ui$Users_Session$getSession(_narkisr$elm_ui$Jobs_Stats$LoadSession)
};
var _narkisr$elm_ui$Jobs_Stats$Load = function (a) {
	return {ctor: 'Load', _0: a};
};
var _narkisr$elm_ui$Jobs_Stats$PollMetrics = function (a) {
	return {ctor: 'PollMetrics', _0: a};
};

var _narkisr$elm_ui$Jobs_Core$isPolling = function (msg) {
	var _p0 = msg;
	_v0_2:
	do {
		switch (_p0.ctor) {
			case 'JobsListing':
				if (_p0._0.ctor === 'Polling') {
					return true;
				} else {
					break _v0_2;
				}
			case 'JobsStats':
				if (_p0._0.ctor === 'PollMetrics') {
					return true;
				} else {
					break _v0_2;
				}
			default:
				break _v0_2;
		}
	} while(false);
	return false;
};
var _narkisr$elm_ui$Jobs_Core$Model = F2(
	function (a, b) {
		return {list: a, stats: b};
	});
var _narkisr$elm_ui$Jobs_Core$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Jobs_Core$JobsStats = function (a) {
	return {ctor: 'JobsStats', _0: a};
};
var _narkisr$elm_ui$Jobs_Core$JobsListing = function (a) {
	return {ctor: 'JobsListing', _0: a};
};
var _narkisr$elm_ui$Jobs_Core$init = function () {
	var _p1 = _narkisr$elm_ui$Jobs_List$init;
	var list = _p1._0;
	var listEffects = _p1._1;
	var _p2 = _narkisr$elm_ui$Jobs_Stats$init;
	var stats = _p2._0;
	var statsEffects = _p2._1;
	var msgs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Jobs_Core$JobsListing, listEffects),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Jobs_Core$JobsStats, statsEffects)
		]);
	return {
		ctor: '_Tuple2',
		_0: A2(_narkisr$elm_ui$Jobs_Core$Model, list, stats),
		_1: _elm_lang$core$Platform_Cmd$batch(msgs)
	};
}();
var _narkisr$elm_ui$Jobs_Core$update = F2(
	function (msg, _p3) {
		var _p4 = _p3;
		var _p7 = _p4;
		var _p5 = msg;
		if (_p5.ctor === 'JobsListing') {
			var _p6 = A2(_narkisr$elm_ui$Jobs_List$update, _p5._0, _p4.list);
			var newListing = _p6._0;
			var msgs = _p6._1;
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					_p7,
					{list: newListing}),
				_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Jobs_Core$JobsListing, msgs)
			};
		} else {
			return _narkisr$elm_ui$Common_Utils$none(_p7);
		}
	});
var _narkisr$elm_ui$Jobs_Core$view = F2(
	function (_p8, route) {
		var _p9 = _p8;
		var _p10 = route;
		if (_p10.ctor === 'List') {
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Jobs_Core$JobsListing,
				_narkisr$elm_ui$Jobs_List$view(_p9.list));
		} else {
			return _narkisr$elm_ui$Common_Components$notImplemented;
		}
	});

var _narkisr$elm_ui$Form_Error$getAt = F2(
	function (name, error) {
		var _p0 = error;
		if (_p0.ctor === 'GroupErrors') {
			return A2(_elm_lang$core$Dict$get, name, _p0._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _narkisr$elm_ui$Form_Error$CustomError = function (a) {
	return {ctor: 'CustomError', _0: a};
};
var _narkisr$elm_ui$Form_Error$NotIncludedIn = {ctor: 'NotIncludedIn'};
var _narkisr$elm_ui$Form_Error$LongerStringThan = function (a) {
	return {ctor: 'LongerStringThan', _0: a};
};
var _narkisr$elm_ui$Form_Error$ShorterStringThan = function (a) {
	return {ctor: 'ShorterStringThan', _0: a};
};
var _narkisr$elm_ui$Form_Error$GreaterFloatThan = function (a) {
	return {ctor: 'GreaterFloatThan', _0: a};
};
var _narkisr$elm_ui$Form_Error$SmallerFloatThan = function (a) {
	return {ctor: 'SmallerFloatThan', _0: a};
};
var _narkisr$elm_ui$Form_Error$GreaterIntThan = function (a) {
	return {ctor: 'GreaterIntThan', _0: a};
};
var _narkisr$elm_ui$Form_Error$SmallerIntThan = function (a) {
	return {ctor: 'SmallerIntThan', _0: a};
};
var _narkisr$elm_ui$Form_Error$InvalidDate = {ctor: 'InvalidDate'};
var _narkisr$elm_ui$Form_Error$InvalidBool = {ctor: 'InvalidBool'};
var _narkisr$elm_ui$Form_Error$InvalidFloat = {ctor: 'InvalidFloat'};
var _narkisr$elm_ui$Form_Error$InvalidInt = {ctor: 'InvalidInt'};
var _narkisr$elm_ui$Form_Error$InvalidFormat = {ctor: 'InvalidFormat'};
var _narkisr$elm_ui$Form_Error$InvalidUrl = {ctor: 'InvalidUrl'};
var _narkisr$elm_ui$Form_Error$InvalidEmail = {ctor: 'InvalidEmail'};
var _narkisr$elm_ui$Form_Error$InvalidString = {ctor: 'InvalidString'};
var _narkisr$elm_ui$Form_Error$Empty = {ctor: 'Empty'};
var _narkisr$elm_ui$Form_Error$GroupErrors = function (a) {
	return {ctor: 'GroupErrors', _0: a};
};

var _narkisr$elm_ui$Form_Field$asStringList = function (field) {
	var _p0 = field;
	if (_p0.ctor === 'MultiSelect') {
		return _elm_lang$core$Maybe$Just(_p0._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _narkisr$elm_ui$Form_Field$asString = function (field) {
	var _p1 = field;
	switch (_p1.ctor) {
		case 'Text':
			return _elm_lang$core$Maybe$Just(_p1._0);
		case 'Textarea':
			return _elm_lang$core$Maybe$Just(_p1._0);
		case 'Select':
			return _elm_lang$core$Maybe$Just(_p1._0);
		case 'Radio':
			return _elm_lang$core$Maybe$Just(_p1._0);
		default:
			return _elm_lang$core$Maybe$Nothing;
	}
};
var _narkisr$elm_ui$Form_Field$asBool = function (field) {
	var _p2 = field;
	if (_p2.ctor === 'Check') {
		return _elm_lang$core$Maybe$Just(_p2._0);
	} else {
		return _elm_lang$core$Maybe$Nothing;
	}
};
var _narkisr$elm_ui$Form_Field$at = F2(
	function (name, field) {
		var _p3 = field;
		if (_p3.ctor === 'Group') {
			return A2(_elm_lang$core$Dict$get, name, _p3._0);
		} else {
			return _elm_lang$core$Maybe$Nothing;
		}
	});
var _narkisr$elm_ui$Form_Field$EmptyField = {ctor: 'EmptyField'};
var _narkisr$elm_ui$Form_Field$Check = function (a) {
	return {ctor: 'Check', _0: a};
};
var _narkisr$elm_ui$Form_Field$Radio = function (a) {
	return {ctor: 'Radio', _0: a};
};
var _narkisr$elm_ui$Form_Field$MultiSelect = function (a) {
	return {ctor: 'MultiSelect', _0: a};
};
var _narkisr$elm_ui$Form_Field$Select = function (a) {
	return {ctor: 'Select', _0: a};
};
var _narkisr$elm_ui$Form_Field$Textarea = function (a) {
	return {ctor: 'Textarea', _0: a};
};
var _narkisr$elm_ui$Form_Field$Text = function (a) {
	return {ctor: 'Text', _0: a};
};
var _narkisr$elm_ui$Form_Field$Group = function (a) {
	return {ctor: 'Group', _0: a};
};
var _narkisr$elm_ui$Form_Field$group = function (_p4) {
	return _narkisr$elm_ui$Form_Field$Group(
		_elm_lang$core$Dict$fromList(_p4));
};

var _narkisr$elm_ui$Form_Validate$oneOf = F2(
	function (validations, field) {
		var walkResults = F2(
			function (result, combined) {
				var _p0 = {ctor: '_Tuple2', _0: combined, _1: result};
				if ((_p0.ctor === '_Tuple2') && (_p0._0.ctor === 'Ok')) {
					return combined;
				} else {
					return result;
				}
			});
		var results = A2(
			_elm_lang$core$List$map,
			function (v) {
				return v(field);
			},
			validations);
		return A3(
			_elm_lang$core$List$foldl,
			walkResults,
			_elm_lang$core$Result$Err(_narkisr$elm_ui$Form_Error$Empty),
			results);
	});
var _narkisr$elm_ui$Form_Validate$customValidation = F3(
	function (validation, callback, field) {
		return A2(
			_elm_lang$core$Result$andThen,
			validation(field),
			callback);
	});
var _narkisr$elm_ui$Form_Validate$succeed = F2(
	function (a, field) {
		return _elm_lang$core$Result$Ok(a);
	});
var _narkisr$elm_ui$Form_Validate$fail = F2(
	function (error, field) {
		return _elm_lang$core$Result$Err(error);
	});
var _narkisr$elm_ui$Form_Validate$includedIn = F3(
	function (items, s, field) {
		return A2(_elm_lang$core$List$member, s, items) ? _elm_lang$core$Result$Ok(s) : _elm_lang$core$Result$Err(_narkisr$elm_ui$Form_Error$NotIncludedIn);
	});
var _narkisr$elm_ui$Form_Validate$validUrlPattern = _elm_lang$core$Regex$caseInsensitive(
	_elm_lang$core$Regex$regex('^(https?://)?([\\da-z\\.-]+)\\.([a-z\\.]{2,6})([\\w \\.-]*)*/?$'));
var _narkisr$elm_ui$Form_Validate$validEmailPattern = _elm_lang$core$Regex$caseInsensitive(
	_elm_lang$core$Regex$regex('^[a-zA-Z0-9.!#$%&\'*+\\/=?^_`{|}~-]+@[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?(?:\\.[a-zA-Z0-9](?:[a-zA-Z0-9-]{0,61}[a-zA-Z0-9])?)*$'));
var _narkisr$elm_ui$Form_Validate$format = F3(
	function (regex, s, field) {
		return A2(_elm_lang$core$Regex$contains, regex, s) ? _elm_lang$core$Result$Ok(s) : _elm_lang$core$Result$Err(_narkisr$elm_ui$Form_Error$InvalidFormat);
	});
var _narkisr$elm_ui$Form_Validate$maxFloat = F3(
	function (max, i, field) {
		return (_elm_lang$core$Native_Utils.cmp(i, max) < 1) ? _elm_lang$core$Result$Ok(i) : _elm_lang$core$Result$Err(
			_narkisr$elm_ui$Form_Error$GreaterFloatThan(max));
	});
var _narkisr$elm_ui$Form_Validate$minFloat = F3(
	function (min, i, field) {
		return (_elm_lang$core$Native_Utils.cmp(i, min) > -1) ? _elm_lang$core$Result$Ok(i) : _elm_lang$core$Result$Err(
			_narkisr$elm_ui$Form_Error$SmallerFloatThan(min));
	});
var _narkisr$elm_ui$Form_Validate$maxInt = F3(
	function (max, i, field) {
		return (_elm_lang$core$Native_Utils.cmp(i, max) < 1) ? _elm_lang$core$Result$Ok(i) : _elm_lang$core$Result$Err(
			_narkisr$elm_ui$Form_Error$GreaterIntThan(max));
	});
var _narkisr$elm_ui$Form_Validate$minInt = F3(
	function (min, i, field) {
		return (_elm_lang$core$Native_Utils.cmp(i, min) > -1) ? _elm_lang$core$Result$Ok(i) : _elm_lang$core$Result$Err(
			_narkisr$elm_ui$Form_Error$SmallerIntThan(min));
	});
var _narkisr$elm_ui$Form_Validate$maxLength = F3(
	function (max, s, field) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(s),
			max) < 1) ? _elm_lang$core$Result$Ok(s) : _elm_lang$core$Result$Err(
			_narkisr$elm_ui$Form_Error$ShorterStringThan(max));
	});
var _narkisr$elm_ui$Form_Validate$minLength = F3(
	function (min, s, field) {
		return (_elm_lang$core$Native_Utils.cmp(
			_elm_lang$core$String$length(s),
			min) > -1) ? _elm_lang$core$Result$Ok(s) : _elm_lang$core$Result$Err(
			_narkisr$elm_ui$Form_Error$ShorterStringThan(min));
	});
var _narkisr$elm_ui$Form_Validate$nonEmpty = F2(
	function (s, field) {
		return _elm_lang$core$String$isEmpty(s) ? _elm_lang$core$Result$Err(_narkisr$elm_ui$Form_Error$Empty) : _elm_lang$core$Result$Ok(s);
	});
var _narkisr$elm_ui$Form_Validate$maybe = F2(
	function (validation, field) {
		return _elm_lang$core$Result$Ok(
			_elm_lang$core$Result$toMaybe(
				validation(field)));
	});
var _narkisr$elm_ui$Form_Validate$date = function (v) {
	var _p1 = _narkisr$elm_ui$Form_Field$asString(v);
	if (_p1.ctor === 'Just') {
		return A2(
			_elm_lang$core$Result$formatError,
			function (_p2) {
				return _narkisr$elm_ui$Form_Error$InvalidDate;
			},
			_elm_lang$core$Date$fromString(_p1._0));
	} else {
		return _elm_lang$core$Result$Err(_narkisr$elm_ui$Form_Error$InvalidDate);
	}
};
var _narkisr$elm_ui$Form_Validate$bool = function (v) {
	var _p3 = _narkisr$elm_ui$Form_Field$asBool(v);
	if (_p3.ctor === 'Just') {
		return _elm_lang$core$Result$Ok(_p3._0);
	} else {
		return _elm_lang$core$Result$Ok(false);
	}
};
var _narkisr$elm_ui$Form_Validate$emptyString = function (v) {
	var _p4 = _narkisr$elm_ui$Form_Field$asString(v);
	if (_p4.ctor === 'Just') {
		var _p5 = _p4._0;
		return _elm_lang$core$String$isEmpty(_p5) ? _elm_lang$core$Result$Ok(_p5) : _elm_lang$core$Result$Err(_narkisr$elm_ui$Form_Error$InvalidString);
	} else {
		return _elm_lang$core$Result$Ok('');
	}
};
var _narkisr$elm_ui$Form_Validate$stringList = function (v) {
	var _p6 = _narkisr$elm_ui$Form_Field$asStringList(v);
	if (_p6.ctor === 'Just') {
		var _p7 = _p6._0;
		return _elm_lang$core$List$isEmpty(_p7) ? _elm_lang$core$Result$Err(_narkisr$elm_ui$Form_Error$Empty) : _elm_lang$core$Result$Ok(_p7);
	} else {
		return _elm_lang$core$Result$Err(_narkisr$elm_ui$Form_Error$InvalidString);
	}
};
var _narkisr$elm_ui$Form_Validate$string = function (v) {
	var _p8 = _narkisr$elm_ui$Form_Field$asString(v);
	if (_p8.ctor === 'Just') {
		var _p9 = _p8._0;
		return _elm_lang$core$String$isEmpty(_p9) ? _elm_lang$core$Result$Err(_narkisr$elm_ui$Form_Error$Empty) : _elm_lang$core$Result$Ok(_p9);
	} else {
		return _elm_lang$core$Result$Err(_narkisr$elm_ui$Form_Error$InvalidString);
	}
};
var _narkisr$elm_ui$Form_Validate$float = function (v) {
	var _p10 = _narkisr$elm_ui$Form_Field$asString(v);
	if (_p10.ctor === 'Just') {
		return A2(
			_elm_lang$core$Result$formatError,
			function (_p11) {
				return _narkisr$elm_ui$Form_Error$InvalidFloat;
			},
			_elm_lang$core$String$toFloat(_p10._0));
	} else {
		return _elm_lang$core$Result$Err(_narkisr$elm_ui$Form_Error$InvalidInt);
	}
};
var _narkisr$elm_ui$Form_Validate$int = function (v) {
	var _p12 = _narkisr$elm_ui$Form_Field$asString(v);
	if (_p12.ctor === 'Just') {
		return A2(
			_elm_lang$core$Result$formatError,
			function (_p13) {
				return _narkisr$elm_ui$Form_Error$InvalidInt;
			},
			_elm_lang$core$String$toInt(_p12._0));
	} else {
		return _elm_lang$core$Result$Err(_narkisr$elm_ui$Form_Error$InvalidInt);
	}
};
var _narkisr$elm_ui$Form_Validate$getErr = function (res) {
	var _p14 = res;
	if (_p14.ctor === 'Ok') {
		return _elm_lang$core$Maybe$Nothing;
	} else {
		return _elm_lang$core$Maybe$Just(_p14._0);
	}
};
var _narkisr$elm_ui$Form_Validate$groupErrorsUnion = F2(
	function (e1, e2) {
		var _p15 = {ctor: '_Tuple2', _0: e1, _1: e2};
		if (((_p15.ctor === '_Tuple2') && (_p15._0.ctor === 'GroupErrors')) && (_p15._1.ctor === 'GroupErrors')) {
			return _narkisr$elm_ui$Form_Error$GroupErrors(
				A2(_elm_lang$core$Dict$union, _p15._0._0, _p15._1._0));
		} else {
			return e2;
		}
	});
var _narkisr$elm_ui$Form_Validate$mergeMany = function (errors) {
	return A3(
		_elm_lang$core$List$foldl,
		_narkisr$elm_ui$Form_Validate$groupErrorsUnion,
		_narkisr$elm_ui$Form_Error$GroupErrors(_elm_lang$core$Dict$empty),
		A2(_elm_lang$core$List$filterMap, _elm_lang$core$Basics$identity, errors));
};
var _narkisr$elm_ui$Form_Validate$get = F3(
	function (key, validation, field) {
		return A2(
			_elm_lang$core$Result$formatError,
			function (e) {
				return _narkisr$elm_ui$Form_Error$GroupErrors(
					_elm_lang$core$Dict$fromList(
						_elm_lang$core$Native_List.fromArray(
							[
								{ctor: '_Tuple2', _0: key, _1: e}
							])));
			},
			validation(
				A2(
					_elm_lang$core$Maybe$withDefault,
					_narkisr$elm_ui$Form_Field$EmptyField,
					A2(_narkisr$elm_ui$Form_Field$at, key, field))));
	});
var _narkisr$elm_ui$Form_Validate$customError = _narkisr$elm_ui$Form_Error$CustomError;
var _narkisr$elm_ui$Form_Validate$formatError = F3(
	function (f, validation, field) {
		return A2(
			_elm_lang$core$Result$formatError,
			f,
			validation(field));
	});
var _narkisr$elm_ui$Form_Validate$defaultValue = F3(
	function (a, validation, field) {
		return _elm_lang$core$Result$Ok(
			A2(
				_elm_lang$core$Result$withDefault,
				a,
				validation(field)));
	});
var _narkisr$elm_ui$Form_Validate$apply = F3(
	function (partialValidation, aValidation, field) {
		var _p16 = {
			ctor: '_Tuple2',
			_0: partialValidation(field),
			_1: aValidation(field)
		};
		if ((_p16._0.ctor === 'Ok') && (_p16._1.ctor === 'Ok')) {
			return _elm_lang$core$Result$Ok(
				_p16._0._0(_p16._1._0));
		} else {
			return _elm_lang$core$Result$Err(
				_narkisr$elm_ui$Form_Validate$mergeMany(
					_elm_lang$core$Native_List.fromArray(
						[
							_narkisr$elm_ui$Form_Validate$getErr(_p16._0),
							_narkisr$elm_ui$Form_Validate$getErr(_p16._1)
						])));
		}
	});
var _narkisr$elm_ui$Form_Validate$andThen = F3(
	function (validation, callback, field) {
		return A2(
			_elm_lang$core$Result$andThen,
			validation(field),
			function (next) {
				return A2(callback, next, field);
			});
	});
var _narkisr$elm_ui$Form_Validate$pipeTo = _elm_lang$core$Basics$flip(_narkisr$elm_ui$Form_Validate$andThen);
var _narkisr$elm_ui$Form_Validate$email = A2(
	_narkisr$elm_ui$Form_Validate$andThen,
	_narkisr$elm_ui$Form_Validate$string,
	function (s) {
		return A2(
			_narkisr$elm_ui$Form_Validate$formatError,
			function (_p17) {
				return _narkisr$elm_ui$Form_Error$InvalidEmail;
			},
			A2(_narkisr$elm_ui$Form_Validate$format, _narkisr$elm_ui$Form_Validate$validEmailPattern, s));
	});
var _narkisr$elm_ui$Form_Validate$url = A2(
	_narkisr$elm_ui$Form_Validate$andThen,
	_narkisr$elm_ui$Form_Validate$string,
	function (s) {
		return A2(
			_narkisr$elm_ui$Form_Validate$formatError,
			function (_p18) {
				return _narkisr$elm_ui$Form_Error$InvalidUrl;
			},
			A2(_narkisr$elm_ui$Form_Validate$format, _narkisr$elm_ui$Form_Validate$validUrlPattern, s));
	});
var _narkisr$elm_ui$Form_Validate$map = F3(
	function (f, validation, field) {
		return A2(
			_elm_lang$core$Result$map,
			f,
			validation(field));
	});
var _narkisr$elm_ui$Form_Validate$form1 = _narkisr$elm_ui$Form_Validate$map;
var _narkisr$elm_ui$Form_Validate$form2 = F3(
	function (func, v1, v2) {
		return A2(
			_narkisr$elm_ui$Form_Validate$apply,
			A2(_narkisr$elm_ui$Form_Validate$form1, func, v1),
			v2);
	});
var _narkisr$elm_ui$Form_Validate$form3 = F4(
	function (func, v1, v2, v3) {
		return A2(
			_narkisr$elm_ui$Form_Validate$apply,
			A3(_narkisr$elm_ui$Form_Validate$form2, func, v1, v2),
			v3);
	});
var _narkisr$elm_ui$Form_Validate$form4 = F5(
	function (func, v1, v2, v3, v4) {
		return A2(
			_narkisr$elm_ui$Form_Validate$apply,
			A4(_narkisr$elm_ui$Form_Validate$form3, func, v1, v2, v3),
			v4);
	});
var _narkisr$elm_ui$Form_Validate$form5 = F6(
	function (func, v1, v2, v3, v4, v5) {
		return A2(
			_narkisr$elm_ui$Form_Validate$apply,
			A5(_narkisr$elm_ui$Form_Validate$form4, func, v1, v2, v3, v4),
			v5);
	});
var _narkisr$elm_ui$Form_Validate$form6 = F7(
	function (func, v1, v2, v3, v4, v5, v6) {
		return A2(
			_narkisr$elm_ui$Form_Validate$apply,
			A6(_narkisr$elm_ui$Form_Validate$form5, func, v1, v2, v3, v4, v5),
			v6);
	});
var _narkisr$elm_ui$Form_Validate$form7 = F8(
	function (func, v1, v2, v3, v4, v5, v6, v7) {
		return A2(
			_narkisr$elm_ui$Form_Validate$apply,
			A7(_narkisr$elm_ui$Form_Validate$form6, func, v1, v2, v3, v4, v5, v6),
			v7);
	});
var _narkisr$elm_ui$Form_Validate$form8 = F9(
	function (func, v1, v2, v3, v4, v5, v6, v7, v8) {
		return A2(
			_narkisr$elm_ui$Form_Validate$apply,
			A8(_narkisr$elm_ui$Form_Validate$form7, func, v1, v2, v3, v4, v5, v6, v7),
			v8);
	});

var _narkisr$elm_ui$Form$merge = F2(
	function (v1, v2) {
		var _p0 = {ctor: '_Tuple2', _0: v1, _1: v2};
		if (((_p0.ctor === '_Tuple2') && (_p0._0.ctor === 'Group')) && (_p0._1.ctor === 'Group')) {
			return _narkisr$elm_ui$Form_Field$Group(
				A2(_elm_lang$core$Dict$union, _p0._0._0, _p0._1._0));
		} else {
			return v1;
		}
	});
var _narkisr$elm_ui$Form$getFocus = function (_p1) {
	var _p2 = _p1;
	return _p2._0.focus;
};
var _narkisr$elm_ui$Form$isDirtyAt = F2(
	function (qualifiedName, _p3) {
		var _p4 = _p3;
		return A2(_elm_lang$core$Set$member, qualifiedName, _p4._0.dirtyFields);
	});
var _narkisr$elm_ui$Form$isChangedAt = F2(
	function (qualifiedName, _p5) {
		var _p6 = _p5;
		return A2(_elm_lang$core$Set$member, qualifiedName, _p6._0.changedFields);
	});
var _narkisr$elm_ui$Form$getErrorAt = F2(
	function (qualifiedName, _p7) {
		var _p8 = _p7;
		var walkPath = F2(
			function (path, maybeNode) {
				walkPath:
				while (true) {
					var _p9 = path;
					if (_p9.ctor === '::') {
						var _p10 = maybeNode;
						if (_p10.ctor === 'Just') {
							var _p12 = _p10._0;
							var _p11 = _p12;
							if (_p11.ctor === 'GroupErrors') {
								var _v8 = _p9._1,
									_v9 = A2(_narkisr$elm_ui$Form_Error$getAt, _p9._0, _p12);
								path = _v8;
								maybeNode = _v9;
								continue walkPath;
							} else {
								return _elm_lang$core$Maybe$Just(_p12);
							}
						} else {
							return _elm_lang$core$Maybe$Nothing;
						}
					} else {
						return maybeNode;
					}
				}
			});
		return A2(
			walkPath,
			A2(_elm_lang$core$String$split, '.', qualifiedName),
			_elm_lang$core$Maybe$Just(_p8._0.errors));
	});
var _narkisr$elm_ui$Form$getErrors = function (_p13) {
	var _p14 = _p13;
	var mapGroupItem = F2(
		function (path, _p15) {
			var _p16 = _p15;
			return A2(
				walkTree,
				A2(
					_elm_lang$core$Basics_ops['++'],
					path,
					_elm_lang$core$Native_List.fromArray(
						[_p16._0])),
				_p16._1);
		});
	var walkTree = F2(
		function (path, node) {
			var _p17 = node;
			if (_p17.ctor === 'GroupErrors') {
				return A2(
					_elm_lang$core$List$concatMap,
					mapGroupItem(path),
					_elm_lang$core$Dict$toList(_p17._0));
			} else {
				return _elm_lang$core$Native_List.fromArray(
					[
						{
						ctor: '_Tuple2',
						_0: A2(_elm_lang$core$String$join, '.', path),
						_1: node
					}
					]);
			}
		});
	return A2(
		walkTree,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_p14._0.errors);
};
var _narkisr$elm_ui$Form$isSubmitted = function (_p18) {
	var _p19 = _p18;
	return _p19._0.isSubmitted;
};
var _narkisr$elm_ui$Form$getLiveErrorAt = F2(
	function (name, form) {
		return (_narkisr$elm_ui$Form$isSubmitted(form) || (A2(_narkisr$elm_ui$Form$isChangedAt, name, form) && _elm_lang$core$Basics$not(
			A2(_narkisr$elm_ui$Form$isDirtyAt, name, form)))) ? A2(_narkisr$elm_ui$Form$getErrorAt, name, form) : _elm_lang$core$Maybe$Nothing;
	});
var _narkisr$elm_ui$Form$getOutput = function (_p20) {
	var _p21 = _p20;
	return _p21._0.output;
};
var _narkisr$elm_ui$Form$setFieldAt = F3(
	function (qualifiedName, field, _p22) {
		var _p23 = _p22;
		var walkPath = F2(
			function (path, maybeNode) {
				var _p24 = path;
				if (_p24.ctor === '::') {
					var _p25 = _p24._0;
					var node = A2(
						_elm_lang$core$Maybe$withDefault,
						_narkisr$elm_ui$Form_Field$Group(_elm_lang$core$Dict$empty),
						maybeNode);
					var childField = A2(
						walkPath,
						_p24._1,
						A2(_narkisr$elm_ui$Form_Field$at, _p25, node));
					return A2(
						_narkisr$elm_ui$Form$merge,
						_narkisr$elm_ui$Form_Field$Group(
							_elm_lang$core$Dict$fromList(
								_elm_lang$core$Native_List.fromArray(
									[
										{ctor: '_Tuple2', _0: _p25, _1: childField}
									]))),
						node);
				} else {
					return field;
				}
			});
		return A2(
			walkPath,
			A2(_elm_lang$core$String$split, '.', qualifiedName),
			_elm_lang$core$Maybe$Just(_p23._0.fields));
	});
var _narkisr$elm_ui$Form$getFieldAt = F2(
	function (qualifiedName, _p26) {
		var _p27 = _p26;
		var walkPath = F2(
			function (name, maybeField) {
				var _p28 = maybeField;
				if (_p28.ctor === 'Just') {
					return A2(_narkisr$elm_ui$Form_Field$at, name, _p28._0);
				} else {
					return _elm_lang$core$Maybe$Nothing;
				}
			});
		return A3(
			_elm_lang$core$List$foldl,
			walkPath,
			_elm_lang$core$Maybe$Just(_p27._0.fields),
			A2(_elm_lang$core$String$split, '.', qualifiedName));
	});
var _narkisr$elm_ui$Form$getStringListAt = F2(
	function (name, form) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			A2(_narkisr$elm_ui$Form$getFieldAt, name, form),
			_narkisr$elm_ui$Form_Field$asStringList);
	});
var _narkisr$elm_ui$Form$getStringAt = F2(
	function (name, form) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			A2(_narkisr$elm_ui$Form$getFieldAt, name, form),
			_narkisr$elm_ui$Form_Field$asString);
	});
var _narkisr$elm_ui$Form$getBoolAt = F2(
	function (name, form) {
		return A2(
			_elm_lang$core$Maybe$andThen,
			A2(_narkisr$elm_ui$Form$getFieldAt, name, form),
			_narkisr$elm_ui$Form_Field$asBool);
	});
var _narkisr$elm_ui$Form$updateValidate = function (model) {
	var _p29 = model.validation(model.fields);
	if (_p29.ctor === 'Ok') {
		return _elm_lang$core$Native_Utils.update(
			model,
			{
				errors: _narkisr$elm_ui$Form_Error$GroupErrors(_elm_lang$core$Dict$empty),
				output: _elm_lang$core$Maybe$Just(_p29._0)
			});
	} else {
		return _elm_lang$core$Native_Utils.update(
			model,
			{errors: _p29._0, output: _elm_lang$core$Maybe$Nothing});
	}
};
var _narkisr$elm_ui$Form$getField = F3(
	function (getValue, path, form) {
		return {
			path: path,
			value: A2(getValue, path, form),
			error: A2(_narkisr$elm_ui$Form$getErrorAt, path, form),
			liveError: A2(_narkisr$elm_ui$Form$getLiveErrorAt, path, form),
			isDirty: A2(_narkisr$elm_ui$Form$isDirtyAt, path, form),
			isChanged: A2(_narkisr$elm_ui$Form$isChangedAt, path, form),
			hasFocus: _elm_lang$core$Native_Utils.eq(
				_narkisr$elm_ui$Form$getFocus(form),
				_elm_lang$core$Maybe$Just(path))
		};
	});
var _narkisr$elm_ui$Form$getFieldAsBool = _narkisr$elm_ui$Form$getField(_narkisr$elm_ui$Form$getBoolAt);
var _narkisr$elm_ui$Form$getFieldAsString = _narkisr$elm_ui$Form$getField(_narkisr$elm_ui$Form$getStringAt);
var _narkisr$elm_ui$Form$getFieldAsStringList = _narkisr$elm_ui$Form$getField(_narkisr$elm_ui$Form$getStringListAt);
var _narkisr$elm_ui$Form$Model = F8(
	function (a, b, c, d, e, f, g, h) {
		return {fields: a, focus: b, dirtyFields: c, changedFields: d, isSubmitted: e, output: f, errors: g, validation: h};
	});
var _narkisr$elm_ui$Form$FieldState = F7(
	function (a, b, c, d, e, f, g) {
		return {path: a, value: b, error: c, liveError: d, isDirty: e, isChanged: f, hasFocus: g};
	});
var _narkisr$elm_ui$Form$F = function (a) {
	return {ctor: 'F', _0: a};
};
var _narkisr$elm_ui$Form$initial = F2(
	function (initialFields, validation) {
		var model = {
			fields: _narkisr$elm_ui$Form_Field$group(initialFields),
			focus: _elm_lang$core$Maybe$Nothing,
			dirtyFields: _elm_lang$core$Set$empty,
			changedFields: _elm_lang$core$Set$empty,
			isSubmitted: false,
			output: _elm_lang$core$Maybe$Nothing,
			errors: _narkisr$elm_ui$Form_Error$GroupErrors(_elm_lang$core$Dict$empty),
			validation: validation
		};
		return _narkisr$elm_ui$Form$F(
			_narkisr$elm_ui$Form$updateValidate(model));
	});
var _narkisr$elm_ui$Form$update = F2(
	function (msg, _p30) {
		var _p31 = _p30;
		var _p36 = _p31._0;
		var _p32 = msg;
		switch (_p32.ctor) {
			case 'NoOp':
				return _narkisr$elm_ui$Form$F(_p36);
			case 'Focus':
				var newModel = _elm_lang$core$Native_Utils.update(
					_p36,
					{
						focus: _elm_lang$core$Maybe$Just(_p32._0)
					});
				return _narkisr$elm_ui$Form$F(newModel);
			case 'Blur':
				var newDirtyFields = A2(_elm_lang$core$Set$remove, _p32._0, _p36.dirtyFields);
				var newModel = _elm_lang$core$Native_Utils.update(
					_p36,
					{focus: _elm_lang$core$Maybe$Nothing, dirtyFields: newDirtyFields});
				return _narkisr$elm_ui$Form$F(
					_narkisr$elm_ui$Form$updateValidate(newModel));
			case 'Input':
				var _p35 = _p32._0;
				var _p34 = _p32._1;
				var newChangedFields = A2(_elm_lang$core$Set$insert, _p35, _p36.changedFields);
				var isDirty = function () {
					var _p33 = _p34;
					switch (_p33.ctor) {
						case 'Text':
							return true;
						case 'Textarea':
							return true;
						default:
							return false;
					}
				}();
				var newDirtyFields = isDirty ? A2(_elm_lang$core$Set$insert, _p35, _p36.dirtyFields) : _p36.dirtyFields;
				var newFields = A3(
					_narkisr$elm_ui$Form$setFieldAt,
					_p35,
					_p34,
					_narkisr$elm_ui$Form$F(_p36));
				var newModel = _elm_lang$core$Native_Utils.update(
					_p36,
					{fields: newFields, dirtyFields: newDirtyFields, changedFields: newChangedFields});
				return _narkisr$elm_ui$Form$F(
					_narkisr$elm_ui$Form$updateValidate(newModel));
			case 'Submit':
				var validatedModel = _narkisr$elm_ui$Form$updateValidate(_p36);
				return _narkisr$elm_ui$Form$F(
					_elm_lang$core$Native_Utils.update(
						validatedModel,
						{isSubmitted: true}));
			case 'Validate':
				return _narkisr$elm_ui$Form$F(
					_narkisr$elm_ui$Form$updateValidate(_p36));
			default:
				var newModel = _elm_lang$core$Native_Utils.update(
					_p36,
					{
						fields: _narkisr$elm_ui$Form_Field$group(_p32._0),
						dirtyFields: _elm_lang$core$Set$empty,
						changedFields: _elm_lang$core$Set$empty,
						isSubmitted: false,
						errors: _narkisr$elm_ui$Form_Error$GroupErrors(_elm_lang$core$Dict$empty)
					});
				return _narkisr$elm_ui$Form$F(newModel);
		}
	});
var _narkisr$elm_ui$Form$Reset = function (a) {
	return {ctor: 'Reset', _0: a};
};
var _narkisr$elm_ui$Form$Validate = {ctor: 'Validate'};
var _narkisr$elm_ui$Form$Submit = {ctor: 'Submit'};
var _narkisr$elm_ui$Form$Input = F2(
	function (a, b) {
		return {ctor: 'Input', _0: a, _1: b};
	});
var _narkisr$elm_ui$Form$Blur = function (a) {
	return {ctor: 'Blur', _0: a};
};
var _narkisr$elm_ui$Form$Focus = function (a) {
	return {ctor: 'Focus', _0: a};
};
var _narkisr$elm_ui$Form$NoOp = {ctor: 'NoOp'};

var _narkisr$elm_ui$Form_Input$dumpErrors = function (form) {
	var line = function (_p0) {
		var _p1 = _p0;
		return A2(
			_elm_lang$core$Basics_ops['++'],
			_p1._0,
			A2(
				_elm_lang$core$Basics_ops['++'],
				': ',
				_elm_lang$core$Basics$toString(_p1._1)));
	};
	var content = A2(
		_elm_lang$core$String$join,
		'\n',
		A2(
			_elm_lang$core$List$map,
			line,
			_narkisr$elm_ui$Form$getErrors(form)));
	return A2(
		_elm_lang$html$Html$pre,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text(content)
			]));
};
var _narkisr$elm_ui$Form_Input$radioInput = F3(
	function (value, state, attrs) {
		var formAttrs = _elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$type$('radio'),
				_elm_lang$html$Html_Attributes$name(value),
				_elm_lang$html$Html_Attributes$checked(
				_elm_lang$core$Native_Utils.eq(
					state.value,
					_elm_lang$core$Maybe$Just(value))),
				_elm_lang$html$Html_Events$onFocus(
				_narkisr$elm_ui$Form$Focus(state.path)),
				_elm_lang$html$Html_Events$onBlur(
				_narkisr$elm_ui$Form$Blur(state.path)),
				A2(
				_elm_lang$html$Html_Events$on,
				'change',
				A2(
					_elm_lang$core$Json_Decode$map,
					function (_p2) {
						return A2(
							_narkisr$elm_ui$Form$Input,
							state.path,
							_narkisr$elm_ui$Form_Field$Radio(_p2));
					},
					_elm_lang$html$Html_Events$targetValue))
			]);
		return A2(
			_elm_lang$html$Html$input,
			A2(_elm_lang$core$Basics_ops['++'], formAttrs, attrs),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _narkisr$elm_ui$Form_Input$appendOrClear = F2(
	function (list, item) {
		return A2(_elm_lang$core$List$member, item, list) ? A2(
			_elm_lang$core$List$filter,
			function (v) {
				return !_elm_lang$core$Native_Utils.eq(item, v);
			},
			list) : A2(_elm_lang$core$List_ops['::'], item, list);
	});
var _narkisr$elm_ui$Form_Input$multiSelectInput = F3(
	function (options, state, attrs) {
		var values = A2(
			_elm_lang$core$Maybe$withDefault,
			_elm_lang$core$Native_List.fromArray(
				[]),
			state.value);
		var formAttrs = _elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$type$('checkbox'),
				A2(_elm_lang$html$Html_Attributes$attribute, 'multiple', 'true'),
				A2(
				_elm_lang$html$Html_Events$on,
				'click',
				A2(
					_elm_lang$core$Json_Decode$map,
					function (v) {
						return A2(
							_narkisr$elm_ui$Form$Input,
							state.path,
							_narkisr$elm_ui$Form_Field$MultiSelect(
								A2(_narkisr$elm_ui$Form_Input$appendOrClear, values, v)));
					},
					_elm_lang$html$Html_Events$targetValue)),
				_elm_lang$html$Html_Events$onFocus(
				_narkisr$elm_ui$Form$Focus(state.path)),
				_elm_lang$html$Html_Events$onBlur(
				_narkisr$elm_ui$Form$Blur(state.path))
			]);
		var buildOption = function (_p3) {
			var _p4 = _p3;
			var _p5 = _p4._0;
			return A2(
				_elm_lang$html$Html$option,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$value(_p5),
						_elm_lang$html$Html_Attributes$selected(
						A2(_elm_lang$core$List$member, _p5, values))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p4._1)
					]));
		};
		return A2(
			_elm_lang$html$Html$select,
			A2(_elm_lang$core$Basics_ops['++'], formAttrs, attrs),
			A2(_elm_lang$core$List$map, buildOption, options));
	});
var _narkisr$elm_ui$Form_Input$selectInput = F3(
	function (options, state, attrs) {
		var buildOption = function (_p6) {
			var _p7 = _p6;
			var _p8 = _p7._0;
			return A2(
				_elm_lang$html$Html$option,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$value(_p8),
						_elm_lang$html$Html_Attributes$selected(
						_elm_lang$core$Native_Utils.eq(
							state.value,
							_elm_lang$core$Maybe$Just(_p8)))
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(_p7._1)
					]));
		};
		var formAttrs = _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html_Events$on,
				'change',
				A2(
					_elm_lang$core$Json_Decode$map,
					function (_p9) {
						return A2(
							_narkisr$elm_ui$Form$Input,
							state.path,
							_narkisr$elm_ui$Form_Field$Select(_p9));
					},
					_elm_lang$html$Html_Events$targetValue)),
				_elm_lang$html$Html_Events$onFocus(
				_narkisr$elm_ui$Form$Focus(state.path)),
				_elm_lang$html$Html_Events$onBlur(
				_narkisr$elm_ui$Form$Blur(state.path))
			]);
		return A2(
			_elm_lang$html$Html$select,
			A2(_elm_lang$core$Basics_ops['++'], formAttrs, attrs),
			A2(_elm_lang$core$List$map, buildOption, options));
	});
var _narkisr$elm_ui$Form_Input_ops = _narkisr$elm_ui$Form_Input_ops || {};
_narkisr$elm_ui$Form_Input_ops['?='] = _elm_lang$core$Basics$flip(_elm_lang$core$Maybe$withDefault);
var _narkisr$elm_ui$Form_Input$baseInput = F4(
	function (t, toField, state, attrs) {
		var formAttrs = _elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$type$(t),
				_elm_lang$html$Html_Attributes$value(
				A2(_narkisr$elm_ui$Form_Input_ops['?='], state.value, '')),
				_elm_lang$html$Html_Events$onInput(
				function (_p10) {
					return A2(
						_narkisr$elm_ui$Form$Input,
						state.path,
						toField(_p10));
				}),
				_elm_lang$html$Html_Events$onFocus(
				_narkisr$elm_ui$Form$Focus(state.path)),
				_elm_lang$html$Html_Events$onBlur(
				_narkisr$elm_ui$Form$Blur(state.path))
			]);
		return A2(
			_elm_lang$html$Html$input,
			A2(_elm_lang$core$Basics_ops['++'], formAttrs, attrs),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _narkisr$elm_ui$Form_Input$textInput = A2(_narkisr$elm_ui$Form_Input$baseInput, 'text', _narkisr$elm_ui$Form_Field$Text);
var _narkisr$elm_ui$Form_Input$passwordInput = A2(_narkisr$elm_ui$Form_Input$baseInput, 'password', _narkisr$elm_ui$Form_Field$Text);
var _narkisr$elm_ui$Form_Input$textArea = F2(
	function (state, attrs) {
		var formAttrs = _elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$value(
				A2(_narkisr$elm_ui$Form_Input_ops['?='], state.value, '')),
				_elm_lang$html$Html_Events$onInput(
				function (_p11) {
					return A2(
						_narkisr$elm_ui$Form$Input,
						state.path,
						_narkisr$elm_ui$Form_Field$Textarea(_p11));
				}),
				_elm_lang$html$Html_Events$onFocus(
				_narkisr$elm_ui$Form$Focus(state.path)),
				_elm_lang$html$Html_Events$onBlur(
				_narkisr$elm_ui$Form$Blur(state.path))
			]);
		return A2(
			_elm_lang$html$Html$textarea,
			A2(_elm_lang$core$Basics_ops['++'], formAttrs, attrs),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});
var _narkisr$elm_ui$Form_Input$checkboxInput = F2(
	function (state, attrs) {
		var formAttrs = _elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$type$('checkbox'),
				_elm_lang$html$Html_Attributes$checked(
				A2(_narkisr$elm_ui$Form_Input_ops['?='], state.value, false)),
				_elm_lang$html$Html_Events$onCheck(
				function (_p12) {
					return A2(
						_narkisr$elm_ui$Form$Input,
						state.path,
						_narkisr$elm_ui$Form_Field$Check(_p12));
				}),
				_elm_lang$html$Html_Events$onFocus(
				_narkisr$elm_ui$Form$Focus(state.path)),
				_elm_lang$html$Html_Events$onBlur(
				_narkisr$elm_ui$Form$Blur(state.path))
			]);
		return A2(
			_elm_lang$html$Html$input,
			A2(_elm_lang$core$Basics_ops['++'], formAttrs, attrs),
			_elm_lang$core$Native_List.fromArray(
				[]));
	});

var _narkisr$elm_ui$Common_FormWizard$notDone = function (_p0) {
	var _p1 = _p0;
	return !_elm_lang$core$Native_Utils.eq(_p1.wizard.step, _elm_lang$core$Maybe$Nothing);
};
var _narkisr$elm_ui$Common_FormWizard$hasPrev = function (_p2) {
	var _p3 = _p2;
	return _elm_lang$core$Basics$not(
		_elm_lang$core$List$isEmpty(_p3.wizard.prev));
};
var _narkisr$elm_ui$Common_FormWizard$hasNext = function (_p4) {
	var _p5 = _p4;
	return _elm_lang$core$Basics$not(
		_elm_lang$core$List$isEmpty(_p5.wizard.next));
};
var _narkisr$elm_ui$Common_FormWizard$prepend = F2(
	function (step, target) {
		var _p6 = step;
		if (_p6.ctor === 'Just') {
			return A2(
				_elm_lang$core$List$append,
				_elm_lang$core$Native_List.fromArray(
					[_p6._0]),
				target);
		} else {
			return target;
		}
	});
var _narkisr$elm_ui$Common_FormWizard$append = F2(
	function (step, target) {
		var _p7 = step;
		if (_p7.ctor === 'Just') {
			return A2(
				_elm_lang$core$List$append,
				target,
				_elm_lang$core$Native_List.fromArray(
					[_p7._0]));
		} else {
			return target;
		}
	});
var _narkisr$elm_ui$Common_FormWizard$noErrors = function (_p8) {
	var _p9 = _p8;
	var _p10 = _p9.step;
	if (_p10.ctor === 'Just') {
		return _elm_lang$core$List$isEmpty(
			_narkisr$elm_ui$Form$getErrors(_p10._0.form));
	} else {
		return true;
	}
};
var _narkisr$elm_ui$Common_FormWizard$update = F2(
	function (msg, _p11) {
		var _p12 = _p11;
		var _p18 = _p12.step;
		var _p17 = _p12.prev;
		var _p16 = _p12.next;
		var _p15 = _p12;
		var _p13 = msg;
		switch (_p13.ctor) {
			case 'Next':
				var prevSteps = A2(_narkisr$elm_ui$Common_FormWizard$append, _p18, _p17);
				var nextSteps = _narkisr$elm_ui$Common_Utils$defaultEmpty(
					_elm_lang$core$List$tail(_p16));
				var nextStep = _elm_lang$core$List$head(_p16);
				return _narkisr$elm_ui$Common_FormWizard$noErrors(_p15) ? _elm_lang$core$Native_Utils.update(
					_p15,
					{step: nextStep, next: nextSteps, prev: prevSteps}) : _p15;
			case 'Back':
				var nextSteps = A2(_narkisr$elm_ui$Common_FormWizard$prepend, _p18, _p16);
				var prevSteps = A2(
					_elm_lang$core$List$take,
					_elm_lang$core$List$length(_p17) - 1,
					_p17);
				var prevStep = _elm_lang$core$List$head(
					_elm_lang$core$List$reverse(_p17));
				return (_narkisr$elm_ui$Common_FormWizard$noErrors(_p15) && (!_elm_lang$core$Native_Utils.eq(prevStep, _elm_lang$core$Maybe$Nothing))) ? _elm_lang$core$Native_Utils.update(
					_p15,
					{step: prevStep, next: nextSteps, prev: prevSteps}) : _p15;
			case 'FormMsg':
				var _p14 = _p18;
				if (_p14.ctor === 'Just') {
					var newForm = A2(_narkisr$elm_ui$Form$update, _p13._0, _p14._0.form);
					var newStep = _elm_lang$core$Native_Utils.update(
						_p14._0,
						{form: newForm});
					return _elm_lang$core$Native_Utils.update(
						_p15,
						{
							step: _elm_lang$core$Maybe$Just(newStep)
						});
				} else {
					return _p15;
				}
			default:
				return _p15;
		}
	});
var _narkisr$elm_ui$Common_FormWizard$Step = F2(
	function (a, b) {
		return {form: a, value: b};
	});
var _narkisr$elm_ui$Common_FormWizard$Model = F3(
	function (a, b, c) {
		return {step: a, prev: b, next: c};
	});
var _narkisr$elm_ui$Common_FormWizard$init = F2(
	function (first, steps) {
		return A3(
			_narkisr$elm_ui$Common_FormWizard$Model,
			_elm_lang$core$Maybe$Just(first),
			_elm_lang$core$Native_List.fromArray(
				[]),
			steps);
	});
var _narkisr$elm_ui$Common_FormWizard$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Common_FormWizard$Back = {ctor: 'Back'};
var _narkisr$elm_ui$Common_FormWizard$FormMsg = function (a) {
	return {ctor: 'FormMsg', _0: a};
};
var _narkisr$elm_ui$Common_FormWizard$Next = {ctor: 'Next'};

var _narkisr$elm_ui$Types_Persistency$persistModel = F2(
	function (f, value) {
		return f(
			A2(_elm_lang$core$Json_Encode$encode, 0, value));
	});
var _narkisr$elm_ui$Types_Persistency$dictEncoder = F2(
	function (enc, dict) {
		return _elm_lang$core$Json_Encode$object(
			A2(
				_elm_lang$core$List$map,
				function (_p0) {
					var _p1 = _p0;
					return {
						ctor: '_Tuple2',
						_0: _p1._0,
						_1: enc(_p1._1)
					};
				},
				_elm_lang$core$Dict$toList(dict)));
	});
var _narkisr$elm_ui$Types_Persistency$option = function (o) {
	var _p2 = o;
	switch (_p2.ctor) {
		case 'BoolOption':
			return _elm_lang$core$Json_Encode$bool(_p2._0);
		case 'StringOption':
			return _elm_lang$core$Json_Encode$string(_p2._0);
		case 'IntOption':
			return _elm_lang$core$Json_Encode$int(_p2._0);
		default:
			return A2(_narkisr$elm_ui$Types_Persistency$dictEncoder, _narkisr$elm_ui$Types_Persistency$option, _p2._0);
	}
};
var _narkisr$elm_ui$Types_Persistency$encodeClasses = function (classes) {
	return A2(
		_elm_lang$core$Json_Encode$encode,
		0,
		A2(_narkisr$elm_ui$Types_Persistency$dictEncoder, _narkisr$elm_ui$Types_Persistency$option, classes));
};
var _narkisr$elm_ui$Types_Persistency$moduleEncoder = function (_p3) {
	var _p4 = _p3;
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'name',
				_1: _elm_lang$core$Json_Encode$string(_p4.name)
			},
				{
				ctor: '_Tuple2',
				_0: 'src',
				_1: _elm_lang$core$Json_Encode$string(_p4.src)
			}
			]));
};
var _narkisr$elm_ui$Types_Persistency$puppetEncoder = function (_p5) {
	var _p6 = _p5;
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'module',
				_1: _narkisr$elm_ui$Types_Persistency$moduleEncoder(_p6.module$)
			},
				{
				ctor: '_Tuple2',
				_0: 'args',
				_1: _elm_lang$core$Json_Encode$list(
					A2(_elm_lang$core$List$map, _elm_lang$core$Json_Encode$string, _p6.args))
			},
				{
				ctor: '_Tuple2',
				_0: 'classes',
				_1: A2(_narkisr$elm_ui$Types_Persistency$dictEncoder, _narkisr$elm_ui$Types_Persistency$option, _p6.classes)
			}
			]));
};
var _narkisr$elm_ui$Types_Persistency$encode = function (_p7) {
	var _p8 = _p7;
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'type',
				_1: _elm_lang$core$Json_Encode$string(_p8.type$)
			},
				{
				ctor: '_Tuple2',
				_0: 'description',
				_1: _elm_lang$core$Json_Encode$string(
					A2(_elm_lang$core$Maybe$withDefault, '', _p8.description))
			},
				{
				ctor: '_Tuple2',
				_0: 'puppet-std',
				_1: A2(_narkisr$elm_ui$Types_Persistency$dictEncoder, _narkisr$elm_ui$Types_Persistency$puppetEncoder, _p8.puppetStd)
			}
			]));
};
var _narkisr$elm_ui$Types_Persistency$persistType = F2(
	function (f, type$) {
		return A2(
			_narkisr$elm_ui$Types_Persistency$persistModel,
			f,
			_narkisr$elm_ui$Types_Persistency$encode(type$));
	});

var _narkisr$elm_ui$Types_View$getType = F2(
	function (id, msg) {
		return A3(
			_elm_lang$core$Task$perform,
			_elm_community$basics_extra$Basics_Extra$never,
			msg,
			_elm_lang$core$Task$toResult(
				A2(
					_narkisr$elm_ui$Common_Http$getJson,
					_narkisr$elm_ui$Types_Model$type$,
					A2(_elm_lang$core$Basics_ops['++'], '/types/', id))));
	});
var _narkisr$elm_ui$Types_View$optionsList = function (options) {
	var _p0 = options;
	if (_p0.ctor === 'Just') {
		return A2(
			_elm_lang$core$String$join,
			',',
			_elm_lang$core$Dict$values(
				A2(
					_elm_lang$core$Dict$map,
					F2(
						function (k, o) {
							return A2(
								_elm_lang$core$Basics_ops['++'],
								k,
								A2(
									_elm_lang$core$Basics_ops['++'],
									': ',
									A2(
										_elm_lang$core$Basics_ops['++'],
										_narkisr$elm_ui$Common_Model$valueOf(o),
										', ')));
						}),
					_p0._0)));
	} else {
		return '';
	}
};
var _narkisr$elm_ui$Types_View$moduleSection = F2(
	function (env, _p1) {
		var _p2 = _p1;
		var _p3 = _p2.module$;
		var args$ = A2(_elm_lang$core$String$join, ', ', _p2.args);
		var os = _narkisr$elm_ui$Types_View$optionsList(_p3.options);
		var cs = A2(
			_elm_lang$core$String$join,
			'',
			_elm_lang$core$Dict$keys(_p2.classes));
		return _elm_lang$core$Native_List.fromArray(
			[
				A3(
				_narkisr$elm_ui$Common_Summary$overviewSection,
				_narkisr$elm_ui$Common_Utils$capitalize(env),
				_elm_lang$core$Native_List.fromArray(
					['name', 'source', 'arguments', 'options', 'classes']),
				_elm_lang$core$Native_List.fromArray(
					[_p3.name, _p3.src, args$, os, cs]))
			]);
	});
var _narkisr$elm_ui$Types_View$puppetSummary = function (puppetStd) {
	return A3(
		_elm_lang$core$Dict$foldl,
		F3(
			function (env, std, res) {
				return A2(
					_elm_lang$core$List$append,
					A2(_narkisr$elm_ui$Types_View$moduleSection, env, std),
					res);
			}),
		_elm_lang$core$Native_List.fromArray(
			[]),
		puppetStd);
};
var _narkisr$elm_ui$Types_View$summarySections = function (_p4) {
	var _p5 = _p4;
	return A2(
		_elm_lang$core$List$append,
		_elm_lang$core$Native_List.fromArray(
			[
				A3(
				_narkisr$elm_ui$Common_Summary$overviewSection,
				'Type',
				_elm_lang$core$Native_List.fromArray(
					['type', 'description']),
				_elm_lang$core$Native_List.fromArray(
					[
						_p5.type$,
						A2(_elm_lang$core$Maybe$withDefault, '', _p5.description)
					]))
			]),
		_narkisr$elm_ui$Types_View$puppetSummary(_p5.puppetStd));
};
var _narkisr$elm_ui$Types_View$summarize = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'line-height', _1: '1.8'},
						{ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'}
					]))
			]),
		A2(
			_elm_lang$core$List$map,
			_circuithub$elm_bootstrap_html$Bootstrap_Html$row_,
			A2(
				_elm_lang$core$List$map,
				_elm_lang$core$List$concat,
				A2(
					_narkisr$elm_ui$Common_Utils$partition,
					2,
					A2(
						_elm_lang$core$List$map,
						_narkisr$elm_ui$Common_Summary$summaryPanel,
						_narkisr$elm_ui$Types_View$summarySections(model))))));
};
var _narkisr$elm_ui$Types_View$view = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$h4,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text('Type')
					])),
				_narkisr$elm_ui$Types_View$summarize(model.type$)
			]));
};
var _narkisr$elm_ui$Types_View$setType = F2(
	function (model, type$) {
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{type$: type$}));
	});
var _narkisr$elm_ui$Types_View$Model = function (a) {
	return {type$: a};
};
var _narkisr$elm_ui$Types_View$init = _narkisr$elm_ui$Common_Utils$none(
	_narkisr$elm_ui$Types_View$Model(_narkisr$elm_ui$Types_Model$emptyType));
var _narkisr$elm_ui$Types_View$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Types_View$SetType = function (a) {
	return {ctor: 'SetType', _0: a};
};
var _narkisr$elm_ui$Types_View$update = F2(
	function (msg, model) {
		var _p6 = msg;
		switch (_p6.ctor) {
			case 'ViewType':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_narkisr$elm_ui$Types_View$getType, _p6._0, _narkisr$elm_ui$Types_View$SetType)
				};
			case 'SetType':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p6._0,
					model,
					_narkisr$elm_ui$Types_View$setType(model),
					_narkisr$elm_ui$Types_View$NoOp);
			default:
				return _narkisr$elm_ui$Common_Utils$none(model);
		}
	});
var _narkisr$elm_ui$Types_View$ViewType = function (a) {
	return {ctor: 'ViewType', _0: a};
};

var _narkisr$elm_ui$Types_Add_Common$Puppet = F4(
	function (a, b, c, d) {
		return {ctor: 'Puppet', _0: a, _1: b, _2: c, _3: d};
	});
var _narkisr$elm_ui$Types_Add_Common$Main = F3(
	function (a, b, c) {
		return {ctor: 'Main', _0: a, _1: b, _2: c};
	});

var _narkisr$elm_ui$Common_FormComponents$withError = F2(
	function (field, $class) {
		var _p0 = field.error;
		if (_p0.ctor === 'Just') {
			return A2(_elm_lang$core$Basics_ops['++'], $class, ' has-error');
		} else {
			return $class;
		}
	});
var _narkisr$elm_ui$Common_FormComponents$errors = _elm_lang$core$Dict$fromList(
	_elm_lang$core$Native_List.fromArray(
		[
			{ctor: '_Tuple2', _0: 'InvalidString', _1: 'Cannot be empty'},
			{ctor: '_Tuple2', _0: 'Empty', _1: 'Cannot be empty'}
		]));
var _narkisr$elm_ui$Common_FormComponents$errorFor = function (field) {
	var _p1 = field.error;
	if (_p1.ctor === 'Just') {
		return A2(
			_elm_lang$html$Html$span,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('help-block')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(
					A2(
						_elm_lang$core$Maybe$withDefault,
						'Error message missing!',
						A2(
							_elm_lang$core$Dict$get,
							_elm_lang$core$Basics$toString(_p1._0),
							_narkisr$elm_ui$Common_FormComponents$errors)))
				]));
	} else {
		return A2(
			_elm_lang$html$Html$span,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('help-block')
				]),
			_elm_lang$core$Native_List.fromArray(
				[]));
	}
};
var _narkisr$elm_ui$Common_FormComponents$formGroup = F4(
	function (title, widget, field, attrs) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class(
					A2(_narkisr$elm_ui$Common_FormComponents$withError, field, 'form-group')),
					_elm_lang$html$Html_Attributes$id(title)
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$label,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$for(title),
							_elm_lang$html$Html_Attributes$class('col-sm-3 control-label')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(title)
						])),
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('col-sm-6')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(widget, field, attrs)
						])),
					_narkisr$elm_ui$Common_FormComponents$errorFor(field)
				]));
	});
var _narkisr$elm_ui$Common_FormComponents$formControl = F3(
	function (title, widget, field) {
		return A4(
			_narkisr$elm_ui$Common_FormComponents$formGroup,
			title,
			widget,
			field,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('form-control')
				]));
	});

var _narkisr$elm_ui$Form_Infix_ops = _narkisr$elm_ui$Form_Infix_ops || {};
_narkisr$elm_ui$Form_Infix_ops['?='] = F2(
	function (s, v) {
		return _narkisr$elm_ui$Form_Validate$maybe(
			A2(_narkisr$elm_ui$Form_Validate$get, s, v));
	});
var _narkisr$elm_ui$Form_Infix_ops = _narkisr$elm_ui$Form_Infix_ops || {};
_narkisr$elm_ui$Form_Infix_ops[':='] = _narkisr$elm_ui$Form_Validate$get;
var _narkisr$elm_ui$Form_Infix_ops = _narkisr$elm_ui$Form_Infix_ops || {};
_narkisr$elm_ui$Form_Infix_ops['|:'] = _narkisr$elm_ui$Form_Validate$apply;

var _narkisr$elm_ui$Types_Add_Puppet$view = function (_p0) {
	var _p1 = _p0;
	var _p2 = _p1.form;
	var unsecure = A2(_narkisr$elm_ui$Form$getFieldAsBool, 'unsecure', _p2);
	var $arguments = A2(_narkisr$elm_ui$Form$getFieldAsString, 'arguments', _p2);
	var source = A2(_narkisr$elm_ui$Form$getFieldAsString, 'source', _p2);
	var editor = A2(_narkisr$elm_ui$Form$getFieldAsBool, 'editor', _p2);
	var name = A2(_narkisr$elm_ui$Form$getFieldAsString, 'name', _p2);
	return A2(
		_elm_lang$html$Html$form,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('form-horizontal'),
						A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A3(_narkisr$elm_ui$Common_FormComponents$formControl, 'Name', _narkisr$elm_ui$Form_Input$textInput, name),
						A3(_narkisr$elm_ui$Common_FormComponents$formControl, 'Source', _narkisr$elm_ui$Form_Input$textInput, source),
						A4(
						_narkisr$elm_ui$Common_FormComponents$formGroup,
						'Unsecure',
						_narkisr$elm_ui$Form_Input$checkboxInput,
						unsecure,
						_elm_lang$core$Native_List.fromArray(
							[])),
						A3(_narkisr$elm_ui$Common_FormComponents$formControl, 'Arguments', _narkisr$elm_ui$Form_Input$textInput, $arguments),
						A3(_narkisr$elm_ui$Common_FormComponents$formControl, 'Edit classes', _narkisr$elm_ui$Form_Input$checkboxInput, editor),
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$id('jsoneditor'),
								_elm_lang$html$Html_Attributes$style(
								_elm_lang$core$Native_List.fromArray(
									[
										{ctor: '_Tuple2', _0: 'width', _1: '50%'},
										{ctor: '_Tuple2', _0: 'height', _1: '400px'},
										{ctor: '_Tuple2', _0: 'margin-left', _1: '25%'}
									]))
							]),
						_elm_lang$core$Native_List.fromArray(
							[]))
					]))
			]));
};
var _narkisr$elm_ui$Types_Add_Puppet$defaultBool = function (option) {
	var _p3 = A2(
		_elm_lang$core$Maybe$withDefault,
		_narkisr$elm_ui$Common_Model$BoolOption(false),
		option);
	if (_p3.ctor === 'BoolOption') {
		return _p3._0;
	} else {
		return false;
	}
};
var _narkisr$elm_ui$Types_Add_Puppet$editDefaults = F2(
	function (env, _p4) {
		var _p5 = _p4;
		var _p6 = A2(
			_elm_lang$core$Maybe$withDefault,
			_narkisr$elm_ui$Types_Model$emptyPuppet,
			A2(_elm_lang$core$Dict$get, env, _p5.puppetStd));
		var std = _p6;
		var module$ = _p6.module$;
		var unsecure = _narkisr$elm_ui$Types_Add_Puppet$defaultBool(
			A2(
				_elm_lang$core$Dict$get,
				'unsecure',
				A2(_elm_lang$core$Maybe$withDefault, _elm_lang$core$Dict$empty, module$.options)));
		return _elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'name',
				_1: _narkisr$elm_ui$Form_Field$Text(module$.name)
			},
				{
				ctor: '_Tuple2',
				_0: 'source',
				_1: _narkisr$elm_ui$Form_Field$Text(module$.src)
			},
				{
				ctor: '_Tuple2',
				_0: 'unsecure',
				_1: _narkisr$elm_ui$Form_Field$Check(unsecure)
			},
				{
				ctor: '_Tuple2',
				_0: 'arguments',
				_1: _narkisr$elm_ui$Form_Field$Text(
					A2(_elm_lang$core$String$join, ' ', std.args))
			}
			]);
	});
var _narkisr$elm_ui$Types_Add_Puppet$validate = A5(
	_narkisr$elm_ui$Form_Validate$form4,
	_narkisr$elm_ui$Types_Model$puppetBase,
	A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'name', _narkisr$elm_ui$Form_Validate$string),
	A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'source', _narkisr$elm_ui$Form_Validate$string),
	A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'unsecure', _narkisr$elm_ui$Form_Validate$bool),
	A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'arguments', _narkisr$elm_ui$Form_Validate$string));
var _narkisr$elm_ui$Types_Add_Puppet$Model = function (a) {
	return {form: a};
};
var _narkisr$elm_ui$Types_Add_Puppet$init = _narkisr$elm_ui$Types_Add_Puppet$Model(
	A2(
		_narkisr$elm_ui$Form$initial,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_narkisr$elm_ui$Types_Add_Puppet$validate));
var _narkisr$elm_ui$Types_Add_Puppet$reinit = F2(
	function (env, type$) {
		return _narkisr$elm_ui$Types_Add_Puppet$Model(
			A2(
				_narkisr$elm_ui$Form$initial,
				A2(_narkisr$elm_ui$Types_Add_Puppet$editDefaults, env, type$),
				_narkisr$elm_ui$Types_Add_Puppet$validate));
	});

var _narkisr$elm_ui$Types_Add_Main$typeField = function (_p0) {
	var _p1 = _p0;
	var _p2 = A2(_narkisr$elm_ui$Form$getFieldAsString, 'type', _p1.form);
	var type$ = _p2;
	var isDirty = _p2.isDirty;
	var value = _p2.value;
	var isChanged = _p2.isChanged;
	var inEdit = _elm_lang$core$Basics$not(isDirty) && ((!_elm_lang$core$Native_Utils.eq(value, _elm_lang$core$Maybe$Nothing)) && _elm_lang$core$Basics$not(isChanged));
	return A4(
		_narkisr$elm_ui$Common_FormComponents$formGroup,
		'Type',
		_narkisr$elm_ui$Form_Input$textInput,
		type$,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('form-control'),
				_elm_lang$html$Html_Attributes$readonly(inEdit)
			]));
};
var _narkisr$elm_ui$Types_Add_Main$view = F2(
	function (environments, _p3) {
		var _p4 = _p3;
		var _p5 = _p4.form;
		var description = A2(_narkisr$elm_ui$Form$getFieldAsString, 'description', _p5);
		var environment = A2(_narkisr$elm_ui$Form$getFieldAsString, 'environment', _p5);
		return A2(
			_elm_lang$html$Html$form,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('form-horizontal'),
							A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							_narkisr$elm_ui$Types_Add_Main$typeField(_p4),
							A3(_narkisr$elm_ui$Common_FormComponents$formControl, 'Description', _narkisr$elm_ui$Form_Input$textInput, description),
							A3(
							_narkisr$elm_ui$Common_FormComponents$formControl,
							'Environment',
							_narkisr$elm_ui$Form_Input$selectInput(environments),
							environment)
						]))
				]));
	});
var _narkisr$elm_ui$Types_Add_Main$editDefaults = F2(
	function (env, _p6) {
		var _p7 = _p6;
		return _elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'type',
				_1: _narkisr$elm_ui$Form_Field$Text(_p7.type$)
			},
				{
				ctor: '_Tuple2',
				_0: 'description',
				_1: _narkisr$elm_ui$Form_Field$Text(
					A2(_elm_lang$core$Maybe$withDefault, '', _p7.description))
			},
				{
				ctor: '_Tuple2',
				_0: 'environment',
				_1: _narkisr$elm_ui$Form_Field$Text(env)
			}
			]);
	});
var _narkisr$elm_ui$Types_Add_Main$defaults = function (env) {
	return _elm_lang$core$Native_List.fromArray(
		[
			{
			ctor: '_Tuple2',
			_0: 'environment',
			_1: _narkisr$elm_ui$Form_Field$Text(env)
		}
		]);
};
var _narkisr$elm_ui$Types_Add_Main$validate = A4(
	_narkisr$elm_ui$Form_Validate$form3,
	_narkisr$elm_ui$Types_Model$typeBase,
	A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'type', _narkisr$elm_ui$Form_Validate$string),
	A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'description', _narkisr$elm_ui$Form_Validate$string),
	A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'environment', _narkisr$elm_ui$Form_Validate$string));
var _narkisr$elm_ui$Types_Add_Main$Model = function (a) {
	return {form: a};
};
var _narkisr$elm_ui$Types_Add_Main$init = function (env) {
	return _narkisr$elm_ui$Types_Add_Main$Model(
		A2(
			_narkisr$elm_ui$Form$initial,
			_narkisr$elm_ui$Types_Add_Main$defaults(env),
			_narkisr$elm_ui$Types_Add_Main$validate));
};
var _narkisr$elm_ui$Types_Add_Main$reinit = F2(
	function (env, type$) {
		return _narkisr$elm_ui$Types_Add_Main$Model(
			A2(
				_narkisr$elm_ui$Form$initial,
				A2(_narkisr$elm_ui$Types_Add_Main$editDefaults, env, type$),
				_narkisr$elm_ui$Types_Add_Main$validate));
	});

var _narkisr$elm_ui$Types_Add$rows = F2(
	function (contents, buttons) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
					_elm_lang$core$Native_List.fromArray(
						[contents])),
					_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(buttons)
				]));
	});
var _narkisr$elm_ui$Types_Add$merge = F3(
	function (classes, _p0, acc) {
		var _p1 = _p0;
		var type$ = A2(
			_elm_lang$core$Maybe$withDefault,
			acc,
			_narkisr$elm_ui$Form$getOutput(_p1.form));
		var _p2 = _p1.value;
		if (_p2.ctor === 'Main') {
			return type$;
		} else {
			var puppet = A2(
				_elm_lang$core$Maybe$withDefault,
				_narkisr$elm_ui$Types_Model$emptyPuppet,
				A2(_elm_lang$core$Dict$get, '--', type$.puppetStd));
			var withClasses = _elm_lang$core$Native_Utils.update(
				puppet,
				{classes: classes});
			var env = A2(
				_elm_lang$core$Maybe$withDefault,
				'',
				_elm_lang$core$List$head(
					_elm_lang$core$Dict$keys(acc.puppetStd)));
			return _elm_lang$core$Native_Utils.update(
				acc,
				{
					puppetStd: A3(_elm_lang$core$Dict$insert, env, withClasses, acc.puppetStd)
				});
		}
	});
var _narkisr$elm_ui$Types_Add$merged = function (_p3) {
	var _p4 = _p3;
	return A3(
		_elm_lang$core$List$foldl,
		_narkisr$elm_ui$Types_Add$merge(_p4.classes),
		_narkisr$elm_ui$Types_Model$emptyType,
		_p4.wizard.prev);
};
var _narkisr$elm_ui$Types_Add$step = F2(
	function (model, value) {
		return {form: model.form, value: value};
	});
var _narkisr$elm_ui$Types_Add$Model = F6(
	function (a, b, c, d, e, f) {
		return {wizard: a, saveErrors: b, hasNext: c, environments: d, editClasses: e, classes: f};
	});
var _narkisr$elm_ui$Types_Add$Puppet = {ctor: 'Puppet'};
var _narkisr$elm_ui$Types_Add$Main = {ctor: 'Main'};
var _narkisr$elm_ui$Types_Add$reinit = F3(
	function (model, _p5, env) {
		var _p6 = _p5;
		var _p7 = _p6;
		var classes = A2(
			_elm_lang$core$Maybe$withDefault,
			_narkisr$elm_ui$Types_Model$emptyPuppet,
			A2(_elm_lang$core$Dict$get, env, _p6.puppetStd)).classes;
		var mainStep = A2(
			_narkisr$elm_ui$Types_Add$step,
			A2(_narkisr$elm_ui$Types_Add_Main$reinit, env, _p7),
			_narkisr$elm_ui$Types_Add$Main);
		var steps = _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_narkisr$elm_ui$Types_Add$step,
				A2(_narkisr$elm_ui$Types_Add_Puppet$reinit, env, _p7),
				_narkisr$elm_ui$Types_Add$Puppet)
			]);
		var newWizard = A2(_narkisr$elm_ui$Common_FormWizard$init, mainStep, steps);
		return _elm_lang$core$Native_Utils.update(
			model,
			{wizard: newWizard, classes: classes, editClasses: false, saveErrors: _narkisr$elm_ui$Common_Errors$init});
	});
var _narkisr$elm_ui$Types_Add$setEnvironment = F2(
	function (_p8, es) {
		var _p9 = _p8;
		var environments = _elm_lang$core$Dict$keys(es);
		var env = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(
				_elm_lang$core$Dict$keys(es)));
		var mainStep = A2(
			_narkisr$elm_ui$Types_Add$step,
			_narkisr$elm_ui$Types_Add_Main$init(env),
			_narkisr$elm_ui$Types_Add$Main);
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				_p9,
				{
					environments: environments,
					wizard: _elm_lang$core$Native_Utils.update(
						_p9.wizard,
						{
							step: _elm_lang$core$Maybe$Just(mainStep)
						})
				}));
	});
var _narkisr$elm_ui$Types_Add$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Types_Add$update = F2(
	function (msg, _p10) {
		var _p11 = _p10;
		var _p14 = _p11.wizard;
		var _p13 = _p11;
		var _p12 = msg;
		switch (_p12.ctor) {
			case 'WizardMsg':
				var newWizard = A2(_narkisr$elm_ui$Common_FormWizard$update, _p12._0, _p14);
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p13,
						{wizard: newWizard}));
			case 'FormMsg':
				var newWizard = A2(
					_narkisr$elm_ui$Common_FormWizard$update,
					_narkisr$elm_ui$Common_FormWizard$FormMsg(_p12._0),
					_p14);
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p13,
						{wizard: newWizard}));
			case 'SetEnvironments':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p12._0,
					_p13,
					_narkisr$elm_ui$Types_Add$setEnvironment(_p13),
					_narkisr$elm_ui$Types_Add$NoOp);
			case 'SetClasses':
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p13,
						{
							classes: _narkisr$elm_ui$Types_Model$decodeClasses(_p12._0)
						}));
			case 'Save':
				return {
					ctor: '_Tuple2',
					_0: _p13,
					_1: A2(
						_narkisr$elm_ui$Types_Persistency$persistType,
						_p12._0,
						_narkisr$elm_ui$Types_Add$merged(_p13))
				};
			case 'Saved':
				return A3(_narkisr$elm_ui$Common_Errors$errorsHandler, _p12._0, _p13, _narkisr$elm_ui$Types_Add$NoOp);
			default:
				return _narkisr$elm_ui$Common_Utils$none(_p13);
		}
	});
var _narkisr$elm_ui$Types_Add$Saved = function (a) {
	return {ctor: 'Saved', _0: a};
};
var _narkisr$elm_ui$Types_Add$saveType = function (json) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		_narkisr$elm_ui$Types_Add$Saved,
		_elm_lang$core$Task$toResult(
			A3(
				_narkisr$elm_ui$Common_Http$postJson,
				_evancz$elm_http$Http$string(json),
				_narkisr$elm_ui$Common_Http$saveResponse,
				'/types')));
};
var _narkisr$elm_ui$Types_Add$updateType = function (json) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		_narkisr$elm_ui$Types_Add$Saved,
		_elm_lang$core$Task$toResult(
			A3(
				_narkisr$elm_ui$Common_Http$putJson,
				_evancz$elm_http$Http$string(json),
				_narkisr$elm_ui$Common_Http$saveResponse,
				'/types')));
};
var _narkisr$elm_ui$Types_Add$Save = function (a) {
	return {ctor: 'Save', _0: a};
};
var _narkisr$elm_ui$Types_Add$saveButton = _elm_lang$core$Native_List.fromArray(
	[
		A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('Save'),
				_elm_lang$html$Html_Attributes$class('btn btn-primary'),
				_elm_lang$html$Html_Events$onClick(
				_narkisr$elm_ui$Types_Add$Save(_narkisr$elm_ui$Types_Add$saveType))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Save  ')
			]))
	]);
var _narkisr$elm_ui$Types_Add$doneButton = _elm_lang$core$Native_List.fromArray(
	[
		A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('Done'),
				_elm_lang$html$Html_Attributes$class('btn btn-primary'),
				_elm_lang$html$Html_Events$onClick(
				_narkisr$elm_ui$Types_Add$Save(_narkisr$elm_ui$Types_Add$saveType))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Done ')
			]))
	]);
var _narkisr$elm_ui$Types_Add$Next = {ctor: 'Next'};
var _narkisr$elm_ui$Types_Add$Back = {ctor: 'Back'};
var _narkisr$elm_ui$Types_Add$Done = {ctor: 'Done'};
var _narkisr$elm_ui$Types_Add$Reset = {ctor: 'Reset'};
var _narkisr$elm_ui$Types_Add$SetClasses = function (a) {
	return {ctor: 'SetClasses', _0: a};
};
var _narkisr$elm_ui$Types_Add$SetEnvironments = function (a) {
	return {ctor: 'SetEnvironments', _0: a};
};
var _narkisr$elm_ui$Types_Add$init = function () {
	var mainStep = A2(
		_narkisr$elm_ui$Types_Add$step,
		_narkisr$elm_ui$Types_Add_Main$init(''),
		_narkisr$elm_ui$Types_Add$Main);
	var steps = _elm_lang$core$Native_List.fromArray(
		[
			A2(_narkisr$elm_ui$Types_Add$step, _narkisr$elm_ui$Types_Add_Puppet$init, _narkisr$elm_ui$Types_Add$Puppet)
		]);
	var wizard = A2(_narkisr$elm_ui$Common_FormWizard$init, mainStep, steps);
	var errors = _narkisr$elm_ui$Common_Errors$init;
	return {
		ctor: '_Tuple2',
		_0: A6(
			_narkisr$elm_ui$Types_Add$Model,
			wizard,
			errors,
			true,
			_elm_lang$core$Native_List.fromArray(
				[]),
			false,
			_elm_lang$core$Dict$empty),
		_1: _narkisr$elm_ui$Environments_List$getEnvironments(_narkisr$elm_ui$Types_Add$SetEnvironments)
	};
}();
var _narkisr$elm_ui$Types_Add$FormMsg = function (a) {
	return {ctor: 'FormMsg', _0: a};
};
var _narkisr$elm_ui$Types_Add$currentView = function (_p15) {
	var _p16 = _p15;
	var environmentList = A2(
		_elm_lang$core$List$map,
		function (e) {
			return {ctor: '_Tuple2', _0: e, _1: e};
		},
		_p16.environments);
	var _p17 = _p16.wizard.step;
	if (_p17.ctor === 'Just') {
		var _p19 = _p17._0;
		var _p18 = _p17._0.value;
		if (_p18.ctor === 'Main') {
			return A3(
				_narkisr$elm_ui$Common_Components$dialogPanel,
				'info',
				_narkisr$elm_ui$Common_Components$info('Add a new Type'),
				_narkisr$elm_ui$Common_Components$panel(
					_narkisr$elm_ui$Common_Components$fixedPanel(
						A2(
							_elm_lang$html$Html_App$map,
							_narkisr$elm_ui$Types_Add$FormMsg,
							A2(_narkisr$elm_ui$Types_Add_Main$view, environmentList, _p19)))));
		} else {
			return A3(
				_narkisr$elm_ui$Common_Components$dialogPanel,
				'info',
				_narkisr$elm_ui$Common_Components$info('Module properties'),
				_narkisr$elm_ui$Common_Components$panel(
					_narkisr$elm_ui$Common_Components$fixedPanel(
						A2(
							_elm_lang$html$Html_App$map,
							_narkisr$elm_ui$Types_Add$FormMsg,
							_narkisr$elm_ui$Types_Add_Puppet$view(_p19)))));
		}
	} else {
		return A3(
			_narkisr$elm_ui$Common_Components$dialogPanel,
			'info',
			_narkisr$elm_ui$Common_Components$info('Save new type'),
			_narkisr$elm_ui$Common_Components$panel(
				_narkisr$elm_ui$Common_Components$fixedPanel(
					A2(
						_elm_lang$html$Html_App$map,
						function (_p20) {
							return _narkisr$elm_ui$Types_Add$NoOp;
						},
						_narkisr$elm_ui$Types_View$summarize(
							_narkisr$elm_ui$Types_Add$merged(_p16))))));
	}
};
var _narkisr$elm_ui$Types_Add$WizardMsg = function (a) {
	return {ctor: 'WizardMsg', _0: a};
};
var _narkisr$elm_ui$Types_Add$ErrorsView = function (a) {
	return {ctor: 'ErrorsView', _0: a};
};
var _narkisr$elm_ui$Types_Add$errorsView = function (_p21) {
	var _p22 = _p21;
	var body = A2(
		_elm_lang$html$Html_App$map,
		_narkisr$elm_ui$Types_Add$ErrorsView,
		_narkisr$elm_ui$Common_Errors$view(_p22.saveErrors));
	return A3(
		_narkisr$elm_ui$Common_Components$dialogPanel,
		'danger',
		_narkisr$elm_ui$Common_Components$error('Failed to save type'),
		_narkisr$elm_ui$Common_Components$panel(
			_narkisr$elm_ui$Common_Components$panelContents(body)));
};
var _narkisr$elm_ui$Types_Add$view = function (_p23) {
	var _p24 = _p23;
	var _p25 = _p24;
	var buttons$ = _narkisr$elm_ui$Common_Components$buttons(
		_elm_lang$core$Native_Utils.update(
			_p25,
			{
				hasNext: _narkisr$elm_ui$Common_FormWizard$notDone(_p25)
			}));
	return _narkisr$elm_ui$Common_Errors$hasErrors(_p24.saveErrors) ? A2(
		_narkisr$elm_ui$Types_Add$rows,
		A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_narkisr$elm_ui$Types_Add$errorsView(_p25)),
		A3(buttons$, _narkisr$elm_ui$Types_Add$Done, _narkisr$elm_ui$Types_Add$Reset, _narkisr$elm_ui$Types_Add$doneButton)) : A2(
		_narkisr$elm_ui$Types_Add$rows,
		A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('col-md-offset-2 col-md-8')
				]),
			_narkisr$elm_ui$Types_Add$currentView(_p25)),
		A3(buttons$, _narkisr$elm_ui$Types_Add$Next, _narkisr$elm_ui$Types_Add$Back, _narkisr$elm_ui$Types_Add$saveButton));
};

var _narkisr$elm_ui$Types_Edit$envChange = F2(
	function (msg, _p0) {
		var _p1 = _p0;
		var _p4 = _p1.type$;
		var _p3 = _p1;
		var _p2 = msg;
		if ((((_p2.ctor === 'FormMsg') && (_p2._0.ctor === 'Input')) && (_p2._0._0 === 'environment')) && (_p2._0._1.ctor === 'Select')) {
			return _elm_lang$core$Native_Utils.update(
				_p3,
				{
					type$: _p4,
					add: A3(_narkisr$elm_ui$Types_Add$reinit, _p1.add, _p4, _p2._0._1._0)
				});
		} else {
			return _p3;
		}
	});
var _narkisr$elm_ui$Types_Edit$setType = F2(
	function (_p5, type$) {
		var _p6 = _p5;
		var _p7 = _p6.add;
		var env = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(_p7.environments));
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				_p6,
				{
					type$: type$,
					add: A3(_narkisr$elm_ui$Types_Add$reinit, _p7, type$, env)
				}));
	});
var _narkisr$elm_ui$Types_Edit$Model = F3(
	function (a, b, c) {
		return {add: a, name: b, type$: c};
	});
var _narkisr$elm_ui$Types_Edit$SetClasses = function (a) {
	return {ctor: 'SetClasses', _0: a};
};
var _narkisr$elm_ui$Types_Edit$SetType = function (a) {
	return {ctor: 'SetType', _0: a};
};
var _narkisr$elm_ui$Types_Edit$ViewMsg = function (a) {
	return {ctor: 'ViewMsg', _0: a};
};
var _narkisr$elm_ui$Types_Edit$LoadType = function (a) {
	return {ctor: 'LoadType', _0: a};
};
var _narkisr$elm_ui$Types_Edit$AddMsg = function (a) {
	return {ctor: 'AddMsg', _0: a};
};
var _narkisr$elm_ui$Types_Edit$init = function () {
	var _p8 = _narkisr$elm_ui$Types_Add$init;
	var add = _p8._0;
	var msgs = _p8._1;
	return {
		ctor: '_Tuple2',
		_0: A3(_narkisr$elm_ui$Types_Edit$Model, add, '', _narkisr$elm_ui$Types_Model$emptyType),
		_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Edit$AddMsg, msgs)
	};
}();
var _narkisr$elm_ui$Types_Edit$view = function (model) {
	return A2(
		_elm_lang$html$Html_App$map,
		_narkisr$elm_ui$Types_Edit$AddMsg,
		_narkisr$elm_ui$Types_Add$view(model.add));
};
var _narkisr$elm_ui$Types_Edit$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Types_Edit$update = F2(
	function (msg, _p9) {
		var _p10 = _p9;
		var _p17 = _p10;
		var _p16 = _p10.add;
		var _p11 = msg;
		switch (_p11.ctor) {
			case 'AddMsg':
				var _p15 = _p11._0;
				var _p12 = _p15;
				if (_p12.ctor === 'Save') {
					var _p13 = A2(
						_narkisr$elm_ui$Types_Add$update,
						_narkisr$elm_ui$Types_Add$Save(_narkisr$elm_ui$Types_Add$updateType),
						_p16);
					var newAdd = _p13._0;
					var msgs = _p13._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p17,
							{add: newAdd}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Edit$AddMsg, msgs)
					};
				} else {
					var _p14 = A2(_narkisr$elm_ui$Types_Add$update, _p15, _p16);
					var newAdd = _p14._0;
					var msgs = _p14._1;
					return {
						ctor: '_Tuple2',
						_0: A2(
							_narkisr$elm_ui$Types_Edit$envChange,
							_p15,
							_elm_lang$core$Native_Utils.update(
								_p17,
								{add: newAdd})),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Edit$AddMsg, msgs)
					};
				}
			case 'LoadType':
				return {
					ctor: '_Tuple2',
					_0: _p17,
					_1: A2(_narkisr$elm_ui$Types_View$getType, _p11._0, _narkisr$elm_ui$Types_Edit$SetType)
				};
			case 'SetType':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p11._0,
					_p17,
					_narkisr$elm_ui$Types_Edit$setType(_p17),
					_narkisr$elm_ui$Types_Edit$NoOp);
			default:
				return _narkisr$elm_ui$Common_Utils$none(_p17);
		}
	});

var _narkisr$elm_ui$Common_Delete$succeeded = F3(
	function (msg, deleted, expected) {
		return _elm_lang$core$Native_Utils.eq(
			msg,
			deleted(
				_elm_lang$core$Result$Ok(
					{message: expected}))) ? true : false;
	});
var _narkisr$elm_ui$Common_Delete$refresh = F4(
	function (init, msg, succeeded, _p0) {
		var _p1 = _p0;
		if (succeeded) {
			var _p2 = init;
			var listMsgs = _p2._1;
			var msgs = _elm_lang$core$Native_List.fromArray(
				[
					_p1._1,
					A2(_elm_lang$core$Platform_Cmd$map, msg, listMsgs)
				]);
			return {
				ctor: '_Tuple2',
				_0: _p1._0,
				_1: _elm_lang$core$Platform_Cmd$batch(msgs)
			};
		} else {
			return _p1;
		}
	});
var _narkisr$elm_ui$Common_Delete$deleteMessage = F2(
	function (item, name) {
		return A2(
			_narkisr$elm_ui$Common_Components$message,
			'Notice!',
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text(
					A2(_elm_lang$core$Basics_ops['++'], item, ' ')),
					A2(
					_elm_lang$html$Html$strong,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(name)
						])),
					_elm_lang$html$Html$text(' will be deleted! ')
				]));
	});
var _narkisr$elm_ui$Common_Delete$deleteView = F4(
	function (_p3, type$, cancel, $delete) {
		var _p4 = _p3;
		return A4(
			_narkisr$elm_ui$Common_Components$dangerCallout,
			A2(_narkisr$elm_ui$Common_Delete$deleteMessage, _p4.name, type$),
			A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[])),
			cancel,
			$delete);
	});
var _narkisr$elm_ui$Common_Delete$view = F5(
	function (_p5, type$, cancel, $delete, done) {
		var _p6 = _p5;
		var _p7 = _p6.errorMsg;
		return (!_elm_lang$core$Native_Utils.eq(_p7, '')) ? A4(
			_narkisr$elm_ui$Common_Components$dangerCallout,
			_narkisr$elm_ui$Common_Components$error(_p7),
			A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[])),
			cancel,
			done) : A4(_narkisr$elm_ui$Common_Delete$deleteView, _p6, type$, cancel, $delete);
	});
var _narkisr$elm_ui$Common_Delete$DeleteResponse = function (a) {
	return {message: a};
};
var _narkisr$elm_ui$Common_Delete$deleteResponse = A2(
	_elm_lang$core$Json_Decode$object1,
	_narkisr$elm_ui$Common_Delete$DeleteResponse,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'message', _elm_lang$core$Json_Decode$string));

var _narkisr$elm_ui$Types_Delete$Model = F2(
	function (a, b) {
		return {name: a, errorMsg: b};
	});
var _narkisr$elm_ui$Types_Delete$init = _narkisr$elm_ui$Common_Utils$none(
	A2(_narkisr$elm_ui$Types_Delete$Model, '', ''));
var _narkisr$elm_ui$Types_Delete$Error = function (a) {
	return {ctor: 'Error', _0: a};
};
var _narkisr$elm_ui$Types_Delete$Deleted = function (a) {
	return {ctor: 'Deleted', _0: a};
};
var _narkisr$elm_ui$Types_Delete$deleteType = function (name) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		_narkisr$elm_ui$Types_Delete$Deleted,
		_elm_lang$core$Task$toResult(
			A2(
				_narkisr$elm_ui$Common_Http$delete,
				_narkisr$elm_ui$Common_Delete$deleteResponse,
				A2(_elm_lang$core$Basics_ops['++'], '/types/', name))));
};
var _narkisr$elm_ui$Types_Delete$succeeded = F2(
	function (msg, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Utils.eq(
			msg,
			_narkisr$elm_ui$Types_Delete$Deleted(
				_elm_lang$core$Result$Ok(
					{message: 'Type deleted'}))) ? true : false;
	});
var _narkisr$elm_ui$Types_Delete$Done = {ctor: 'Done'};
var _narkisr$elm_ui$Types_Delete$Delete = {ctor: 'Delete'};
var _narkisr$elm_ui$Types_Delete$Cancel = {ctor: 'Cancel'};
var _narkisr$elm_ui$Types_Delete$view = function (model) {
	return A5(_narkisr$elm_ui$Common_Delete$view, model, 'Type', _narkisr$elm_ui$Types_Delete$Cancel, _narkisr$elm_ui$Types_Delete$Delete, _narkisr$elm_ui$Types_Delete$Done);
};
var _narkisr$elm_ui$Types_Delete$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Types_Delete$update = F2(
	function (msg, _p2) {
		var _p3 = _p2;
		var _p7 = _p3;
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'Deleted':
				return A4(
					_narkisr$elm_ui$Common_Errors$failHandler,
					_p4._0,
					_p7,
					function (_p5) {
						var _p6 = _p5;
						return _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p7,
								{
									errorMsg: A2(_elm_lang$core$Maybe$withDefault, 'Failed to delete template', _p6.message)
								}));
					},
					_narkisr$elm_ui$Types_Delete$NoOp);
			case 'Delete':
				return {
					ctor: '_Tuple2',
					_0: _p7,
					_1: _narkisr$elm_ui$Types_Delete$deleteType(_p3.name)
				};
			default:
				return _narkisr$elm_ui$Common_Utils$none(_p7);
		}
	});

var _narkisr$elm_ui$Types_Routing$Edit = function (a) {
	return {ctor: 'Edit', _0: a};
};
var _narkisr$elm_ui$Types_Routing$matcherEdit = A3(_sporto$hop$Hop_Matchers$match2, _narkisr$elm_ui$Types_Routing$Edit, '/edit/', _sporto$hop$Hop_Matchers$str);
var _narkisr$elm_ui$Types_Routing$Delete = function (a) {
	return {ctor: 'Delete', _0: a};
};
var _narkisr$elm_ui$Types_Routing$matcherDelete = A3(_sporto$hop$Hop_Matchers$match2, _narkisr$elm_ui$Types_Routing$Delete, '/delete/', _sporto$hop$Hop_Matchers$str);
var _narkisr$elm_ui$Types_Routing$View = function (a) {
	return {ctor: 'View', _0: a};
};
var _narkisr$elm_ui$Types_Routing$matcherView = A3(_sporto$hop$Hop_Matchers$match2, _narkisr$elm_ui$Types_Routing$View, '/view/', _sporto$hop$Hop_Matchers$str);
var _narkisr$elm_ui$Types_Routing$List = {ctor: 'List'};
var _narkisr$elm_ui$Types_Routing$matcherList = A2(_sporto$hop$Hop_Matchers$match1, _narkisr$elm_ui$Types_Routing$List, '/list');
var _narkisr$elm_ui$Types_Routing$Add = {ctor: 'Add'};
var _narkisr$elm_ui$Types_Routing$matcherAdd = A2(_sporto$hop$Hop_Matchers$match1, _narkisr$elm_ui$Types_Routing$Add, '/add');
var _narkisr$elm_ui$Types_Routing$matchers = _elm_lang$core$Native_List.fromArray(
	[_narkisr$elm_ui$Types_Routing$matcherAdd, _narkisr$elm_ui$Types_Routing$matcherList, _narkisr$elm_ui$Types_Routing$matcherEdit, _narkisr$elm_ui$Types_Routing$matcherView, _narkisr$elm_ui$Types_Routing$matcherDelete]);

var _narkisr$elm_ui$Types_Core$setName = F2(
	function (model, name) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{name: name});
	});
var _narkisr$elm_ui$Types_Core$Model = F6(
	function (a, b, c, d, e, f) {
		return {list: a, add: b, view: c, $delete: d, edit: e, navChange: f};
	});
var _narkisr$elm_ui$Types_Core$Editing = function (a) {
	return {ctor: 'Editing', _0: a};
};
var _narkisr$elm_ui$Types_Core$Deleting = function (a) {
	return {ctor: 'Deleting', _0: a};
};
var _narkisr$elm_ui$Types_Core$Viewing = function (a) {
	return {ctor: 'Viewing', _0: a};
};
var _narkisr$elm_ui$Types_Core$Adding = function (a) {
	return {ctor: 'Adding', _0: a};
};
var _narkisr$elm_ui$Types_Core$MenuClick = function (a) {
	return {ctor: 'MenuClick', _0: a};
};
var _narkisr$elm_ui$Types_Core$Listing = function (a) {
	return {ctor: 'Listing', _0: a};
};
var _narkisr$elm_ui$Types_Core$init = function () {
	var _p0 = _narkisr$elm_ui$Types_Delete$init;
	var $delete = _p0._0;
	var deleteMsg = _p0._1;
	var _p1 = _narkisr$elm_ui$Types_Edit$init;
	var edit = _p1._0;
	var editMsg = _p1._1;
	var _p2 = _narkisr$elm_ui$Types_View$init;
	var view = _p2._0;
	var viewMsg = _p2._1;
	var _p3 = _narkisr$elm_ui$Types_Add$init;
	var add = _p3._0;
	var addMsg = _p3._1;
	var _p4 = _narkisr$elm_ui$Types_List$init;
	var list = _p4._0;
	var listMsg = _p4._1;
	var msgs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Core$Listing, listMsg),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Core$Adding, addMsg),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Core$Viewing, viewMsg),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Core$Deleting, deleteMsg),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Core$Editing, editMsg)
		]);
	return {
		ctor: '_Tuple2',
		_0: A6(_narkisr$elm_ui$Types_Core$Model, list, add, view, $delete, edit, _elm_lang$core$Maybe$Nothing),
		_1: _elm_lang$core$Platform_Cmd$batch(msgs)
	};
}();
var _narkisr$elm_ui$Types_Core$refreshList = A2(_narkisr$elm_ui$Common_Delete$refresh, _narkisr$elm_ui$Types_List$init, _narkisr$elm_ui$Types_Core$Listing);
var _narkisr$elm_ui$Types_Core$navigate = F2(
	function (msg, _p5) {
		var _p6 = _p5;
		var _p20 = _p6._0.view;
		var _p19 = _p6;
		var _p18 = _p6._1;
		var _p17 = _p6._0;
		var _p7 = msg;
		_v1_5:
		do {
			switch (_p7.ctor) {
				case 'Listing':
					var _p8 = _p7._0;
					if ((_p8.ctor === 'LoadPage') && (_p8._0.ctor === 'View')) {
						var _p10 = _p8._0._0;
						var _p9 = A2(
							_narkisr$elm_ui$Types_View$update,
							_narkisr$elm_ui$Types_View$ViewType(_p10),
							_p20);
						var newSystems = _p9._0;
						var msgs = _p9._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								_p17,
								{
									view: _p20,
									navChange: _elm_lang$core$Maybe$Just(
										A2(_elm_lang$core$Basics_ops['++'], '/types/view/', _p10))
								}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Core$Viewing, msgs)
						};
					} else {
						return {ctor: '_Tuple2', _0: _p17, _1: _p18};
					}
				case 'Adding':
					var _p11 = _p7._0;
					if ((_p11.ctor === 'Saved') && (_p11._0.ctor === 'Ok')) {
						return A2(
							_narkisr$elm_ui$Types_Core$refreshList,
							true,
							{
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									_p17,
									{
										navChange: _elm_lang$core$Maybe$Just('/types/list')
									}),
								_1: _p18
							});
					} else {
						return {ctor: '_Tuple2', _0: _p17, _1: _p18};
					}
				case 'Editing':
					var _p12 = _p7._0;
					if (_p12.ctor === 'AddMsg') {
						var _p13 = _p12._0;
						if ((_p13.ctor === 'Saved') && (_p13._0.ctor === 'Ok')) {
							return A2(
								_narkisr$elm_ui$Types_Core$refreshList,
								true,
								{
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										_p17,
										{
											navChange: _elm_lang$core$Maybe$Just('/types/list')
										}),
									_1: _p18
								});
						} else {
							return {ctor: '_Tuple2', _0: _p17, _1: _p18};
						}
					} else {
						return {ctor: '_Tuple2', _0: _p17, _1: _p18};
					}
				case 'Deleting':
					var _p14 = _p7._0;
					switch (_p14.ctor) {
						case 'Deleted':
							return _elm_lang$core$Native_Utils.eq(_p6._0.$delete.errorMsg, '') ? {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									_p17,
									{
										navChange: _elm_lang$core$Maybe$Just('/types/list')
									}),
								_1: _p18
							} : _p19;
						case 'Cancel':
							return A2(
								_narkisr$elm_ui$Types_Core$refreshList,
								true,
								{
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										_p17,
										{
											navChange: _elm_lang$core$Maybe$Just('/types/list')
										}),
									_1: _p18
								});
						case 'Done':
							return A2(
								_narkisr$elm_ui$Types_Core$refreshList,
								true,
								{
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										_p17,
										{
											navChange: _elm_lang$core$Maybe$Just('/types/list')
										}),
									_1: _p18
								});
						default:
							return _p19;
					}
				case 'MenuClick':
					if (_p7._0.ctor === '_Tuple2') {
						var _p16 = _p7._0._1;
						var _p15 = _p7._0._0;
						switch (_p15) {
							case 'edit':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										_p17,
										{
											navChange: _elm_lang$core$Maybe$Just(
												A2(_elm_lang$core$Basics_ops['++'], '/types/edit/', _p16))
										}),
									_1: _p18
								};
							case 'clear':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										_p17,
										{
											navChange: _elm_lang$core$Maybe$Just(
												A2(_elm_lang$core$Basics_ops['++'], '/types/delete/', _p16))
										}),
									_1: _p18
								};
							default:
								return _p19;
						}
					} else {
						break _v1_5;
					}
				default:
					break _v1_5;
			}
		} while(false);
		return {ctor: '_Tuple2', _0: _p17, _1: _p18};
	});
var _narkisr$elm_ui$Types_Core$route = F2(
	function (msg, _p21) {
		var _p22 = _p21;
		var _p35 = _p22;
		var _p34 = _p22.edit;
		var _p33 = _p22.$delete;
		var _p23 = msg;
		switch (_p23.ctor) {
			case 'Listing':
				var _p24 = A2(_narkisr$elm_ui$Types_List$update, _p23._0, _p22.list);
				var newTypes = _p24._0;
				var effect = _p24._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p35,
						{list: newTypes}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Core$Listing, effect)
				};
			case 'Adding':
				var _p25 = A2(_narkisr$elm_ui$Types_Add$update, _p23._0, _p22.add);
				var newTypes = _p25._0;
				var effect = _p25._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p35,
						{add: newTypes}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Core$Adding, effect)
				};
			case 'Editing':
				var _p26 = A2(_narkisr$elm_ui$Types_Edit$update, _p23._0, _p34);
				var newTypes = _p26._0;
				var effect = _p26._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p35,
						{edit: newTypes}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Core$Editing, effect)
				};
			case 'Viewing':
				var _p27 = A2(_narkisr$elm_ui$Types_View$update, _p23._0, _p22.view);
				var newTypes = _p27._0;
				var effect = _p27._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p35,
						{view: newTypes}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Core$Viewing, effect)
				};
			case 'Deleting':
				var _p29 = _p23._0;
				var success = A3(_narkisr$elm_ui$Common_Delete$succeeded, _p29, _narkisr$elm_ui$Types_Delete$Deleted, 'Type deleted');
				var _p28 = A2(_narkisr$elm_ui$Types_Delete$update, _p29, _p33);
				var newDelete = _p28._0;
				var msgs = _p28._1;
				return A2(
					_narkisr$elm_ui$Types_Core$refreshList,
					success,
					{
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p35,
							{$delete: newDelete}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Core$Deleting, msgs)
					});
			default:
				var _p32 = _p23._0._1;
				var _p30 = _p23._0._0;
				switch (_p30) {
					case 'clear':
						return _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p35,
								{
									$delete: A2(_narkisr$elm_ui$Types_Core$setName, _p33, _p32)
								}));
					case 'edit':
						var _p31 = A2(
							_narkisr$elm_ui$Types_Edit$update,
							_narkisr$elm_ui$Types_Edit$LoadType(_p32),
							_p34);
						var newEdit = _p31._0;
						var msgs = _p31._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								_p35,
								{edit: newEdit}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Types_Core$Editing, msgs)
						};
					default:
						return _narkisr$elm_ui$Common_Utils$none(_p35);
				}
		}
	});
var _narkisr$elm_ui$Types_Core$update = F2(
	function (msg, model) {
		return A2(
			_narkisr$elm_ui$Types_Core$navigate,
			msg,
			A2(_narkisr$elm_ui$Types_Core$route, msg, model));
	});
var _narkisr$elm_ui$Types_Core$view = F2(
	function (_p36, section) {
		var _p37 = _p36;
		var _p38 = section;
		switch (_p38.ctor) {
			case 'List':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Types_Core$Listing,
					_narkisr$elm_ui$Types_List$view(_p37.list));
			case 'Add':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Types_Core$Adding,
					_narkisr$elm_ui$Types_Add$view(_p37.add));
			case 'Edit':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Types_Core$Editing,
					_narkisr$elm_ui$Types_Edit$view(_p37.edit));
			case 'View':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Types_Core$Viewing,
					_narkisr$elm_ui$Types_View$view(_p37.view));
			default:
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Types_Core$Deleting,
					_narkisr$elm_ui$Types_Delete$view(_p37.$delete));
		}
	});

var _narkisr$elm_ui$Users_List$setUsers = F2(
	function (_p0, users) {
		var _p1 = _p0;
		var typePairs = A2(
			_elm_lang$core$List$map,
			function (_p2) {
				var _p3 = _p2;
				return {ctor: '_Tuple2', _0: _p3.username, _1: _p3};
			},
			users);
		var newTable = A2(
			_narkisr$elm_ui$Table$update,
			_narkisr$elm_ui$Table$UpdateRows(typePairs),
			_p1.table);
		var total = _elm_lang$core$List$length(users);
		var newPager = A2(
			_narkisr$elm_ui$Pager$update,
			_narkisr$elm_ui$Pager$UpdateTotal(
				_elm_lang$core$Basics$toFloat(total)),
			_p1.pager);
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				_p1,
				{users: users, pager: newPager, table: newTable}));
	});
var _narkisr$elm_ui$Users_List$userRow = F2(
	function (name, _p4) {
		var _p5 = _p4;
		return _elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(name)
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(
							_elm_lang$core$String$join,
							', ',
							A2(
								_elm_lang$core$List$map,
								function (r) {
									return A2(_elm_lang$core$String$dropLeft, 16, r);
								},
								_p5.roles)))
					])),
				A2(
				_elm_lang$html$Html$td,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html$text(
						A2(_elm_lang$core$String$join, ', ', _p5.envs))
					]))
			]);
	});
var _narkisr$elm_ui$Users_List$Model = F3(
	function (a, b, c) {
		return {users: a, table: b, pager: c};
	});
var _narkisr$elm_ui$Users_List$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Users_List$update = F2(
	function (msg, model) {
		var _p6 = msg;
		if (_p6.ctor === 'SetUsers') {
			return A4(
				_narkisr$elm_ui$Common_Errors$successHandler,
				_p6._0,
				model,
				_narkisr$elm_ui$Users_List$setUsers(model),
				_narkisr$elm_ui$Users_List$NoOp);
		} else {
			return _narkisr$elm_ui$Common_Utils$none(model);
		}
	});
var _narkisr$elm_ui$Users_List$LoadPage = function (a) {
	return {ctor: 'LoadPage', _0: a};
};
var _narkisr$elm_ui$Users_List$GotoPage = function (a) {
	return {ctor: 'GotoPage', _0: a};
};
var _narkisr$elm_ui$Users_List$view = function (_p7) {
	var _p8 = _p7;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('col-md-offset-1 col-md-10')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_circuithub$elm_bootstrap_html$Bootstrap_Html$panelDefault_(
								_elm_lang$core$Native_List.fromArray(
									[
										A2(
										_elm_lang$html$Html_App$map,
										_narkisr$elm_ui$Users_List$LoadPage,
										_narkisr$elm_ui$Table$view(_p8.table))
									]))
							]))
					])),
				_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html_App$map,
						_narkisr$elm_ui$Users_List$GotoPage,
						_narkisr$elm_ui$Pager$view(_p8.pager))
					]))
			]));
};
var _narkisr$elm_ui$Users_List$SetUsers = function (a) {
	return {ctor: 'SetUsers', _0: a};
};
var _narkisr$elm_ui$Users_List$init = function () {
	var table = A5(
		_narkisr$elm_ui$Table$init,
		'usersListing',
		true,
		_elm_lang$core$Native_List.fromArray(
			['Name', 'Roles', 'Environments']),
		_narkisr$elm_ui$Users_List$userRow,
		'Users');
	return {
		ctor: '_Tuple2',
		_0: A3(
			_narkisr$elm_ui$Users_List$Model,
			_elm_lang$core$Native_List.fromArray(
				[]),
			table,
			_narkisr$elm_ui$Pager$init),
		_1: _narkisr$elm_ui$Users_Model$getUsers(_narkisr$elm_ui$Users_List$SetUsers)
	};
}();

var _narkisr$elm_ui$Users_Add_Perm$view = F3(
	function (envs, operations, _p0) {
		var _p1 = _p0;
		var _p2 = _p1.form;
		var operation = A2(_narkisr$elm_ui$Form$getFieldAsStringList, 'operations', _p2);
		var environment = A2(_narkisr$elm_ui$Form$getFieldAsStringList, 'envs', _p2);
		return A2(
			_elm_lang$html$Html$form,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('form-horizontal'),
							A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							A3(
							_narkisr$elm_ui$Common_FormComponents$formControl,
							'Environment',
							_narkisr$elm_ui$Form_Input$multiSelectInput(envs),
							environment),
							A3(
							_narkisr$elm_ui$Common_FormComponents$formControl,
							'Operation',
							_narkisr$elm_ui$Form_Input$multiSelectInput(operations),
							operation)
						]))
				]));
	});
var _narkisr$elm_ui$Users_Add_Perm$validate = A3(
	_narkisr$elm_ui$Form_Validate$form2,
	_narkisr$elm_ui$Users_Model$permBase,
	A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'envs', _narkisr$elm_ui$Form_Validate$stringList),
	A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'operations', _narkisr$elm_ui$Form_Validate$stringList));
var _narkisr$elm_ui$Users_Add_Perm$Model = function (a) {
	return {form: a};
};
var _narkisr$elm_ui$Users_Add_Perm$init = _narkisr$elm_ui$Users_Add_Perm$Model(
	A2(
		_narkisr$elm_ui$Form$initial,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_narkisr$elm_ui$Users_Add_Perm$validate));

var _narkisr$elm_ui$Users_Add_Main$view = F2(
	function (roles, _p0) {
		var _p1 = _p0;
		var _p2 = _p1.form;
		var password = A2(_narkisr$elm_ui$Form$getFieldAsString, 'password', _p2);
		var name = A2(_narkisr$elm_ui$Form$getFieldAsString, 'username', _p2);
		var role = A2(_narkisr$elm_ui$Form$getFieldAsString, 'role', _p2);
		return A2(
			_elm_lang$html$Html$form,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$div,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('form-horizontal'),
							A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							A3(_narkisr$elm_ui$Common_FormComponents$formControl, 'Name', _narkisr$elm_ui$Form_Input$textInput, name),
							A3(_narkisr$elm_ui$Common_FormComponents$formControl, 'Password', _narkisr$elm_ui$Form_Input$passwordInput, password),
							A3(
							_narkisr$elm_ui$Common_FormComponents$formControl,
							'Roles',
							_narkisr$elm_ui$Form_Input$selectInput(roles),
							role)
						]))
				]));
	});
var _narkisr$elm_ui$Users_Add_Main$defaults = function (role) {
	return _elm_lang$core$Native_List.fromArray(
		[
			{
			ctor: '_Tuple2',
			_0: 'role',
			_1: _narkisr$elm_ui$Form_Field$Text(role)
		}
		]);
};
var _narkisr$elm_ui$Users_Add_Main$validate = A4(
	_narkisr$elm_ui$Form_Validate$form3,
	_narkisr$elm_ui$Users_Model$userBase,
	A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'username', _narkisr$elm_ui$Form_Validate$string),
	A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'password', _narkisr$elm_ui$Form_Validate$string),
	A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'role', _narkisr$elm_ui$Form_Validate$string));
var _narkisr$elm_ui$Users_Add_Main$Model = function (a) {
	return {form: a};
};
var _narkisr$elm_ui$Users_Add_Main$init = function (role) {
	return _narkisr$elm_ui$Users_Add_Main$Model(
		A2(
			_narkisr$elm_ui$Form$initial,
			_narkisr$elm_ui$Users_Add_Main$defaults(role),
			_narkisr$elm_ui$Users_Add_Main$validate));
};

var _narkisr$elm_ui$Users_View$getUser = F2(
	function (name, msg) {
		return A3(
			_elm_lang$core$Task$perform,
			_elm_community$basics_extra$Basics_Extra$never,
			msg,
			_elm_lang$core$Task$toResult(
				A2(
					_narkisr$elm_ui$Common_Http$getJson,
					_narkisr$elm_ui$Users_Model$user,
					A2(_elm_lang$core$Basics_ops['++'], '/users/', name))));
	});
var _narkisr$elm_ui$Users_View$summarize = function (model) {
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'line-height', _1: '1.8'},
						{ctor: '_Tuple2', _0: 'list-style-type', _1: 'none'}
					]))
			]),
		_elm_lang$core$Native_List.fromArray(
			[]));
};
var _narkisr$elm_ui$Users_View$view = function (_p0) {
	var _p1 = _p0;
	return _narkisr$elm_ui$Common_Components$asList(
		A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$h4,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text('User')
						])),
					_narkisr$elm_ui$Users_View$summarize(_p1.user)
				])));
};
var _narkisr$elm_ui$Users_View$setUser = F2(
	function (model, user) {
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{user: user}));
	});
var _narkisr$elm_ui$Users_View$Model = function (a) {
	return {user: a};
};
var _narkisr$elm_ui$Users_View$init = _narkisr$elm_ui$Common_Utils$none(
	_narkisr$elm_ui$Users_View$Model(_narkisr$elm_ui$Users_Model$emptyUser));
var _narkisr$elm_ui$Users_View$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Users_View$SetUser = function (a) {
	return {ctor: 'SetUser', _0: a};
};
var _narkisr$elm_ui$Users_View$update = F2(
	function (msg, model) {
		var _p2 = msg;
		switch (_p2.ctor) {
			case 'ViewUser':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: A2(_narkisr$elm_ui$Users_View$getUser, _p2._0, _narkisr$elm_ui$Users_View$SetUser)
				};
			case 'SetUser':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p2._0,
					model,
					_narkisr$elm_ui$Users_View$setUser(model),
					_narkisr$elm_ui$Users_View$NoOp);
			default:
				return _narkisr$elm_ui$Common_Utils$none(model);
		}
	});
var _narkisr$elm_ui$Users_View$ViewUser = function (a) {
	return {ctor: 'ViewUser', _0: a};
};

var _narkisr$elm_ui$Users_Add$environmentsKeys = A2(
	_elm_lang$core$Json_Decode$at,
	_elm_lang$core$Native_List.fromArray(
		['operations']),
	_elm_lang$core$Json_Decode$list(_elm_lang$core$Json_Decode$string));
var _narkisr$elm_ui$Users_Add$getOperations = function (msg) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		msg,
		_elm_lang$core$Task$toResult(
			A2(_narkisr$elm_ui$Common_Http$getJson, _narkisr$elm_ui$Users_Add$environmentsKeys, '/users/operations')));
};
var _narkisr$elm_ui$Users_Add$rows = F2(
	function (contents, buttons) {
		return A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(
					_elm_lang$core$Native_List.fromArray(
						[contents])),
					_circuithub$elm_bootstrap_html$Bootstrap_Html$row_(buttons)
				]));
	});
var _narkisr$elm_ui$Users_Add$setOperation = F2(
	function (model, keys) {
		var pairs = A2(
			_elm_lang$core$List$map,
			function (key) {
				return {ctor: '_Tuple2', _0: key, _1: key};
			},
			keys);
		var op = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(keys));
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{operations: pairs}));
	});
var _narkisr$elm_ui$Users_Add$setEnvironment = F2(
	function (model, keys) {
		var pairs = A2(
			_elm_lang$core$List$map,
			function (key) {
				return {ctor: '_Tuple2', _0: key, _1: key};
			},
			keys);
		var env = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(keys));
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{environments: pairs}));
	});
var _narkisr$elm_ui$Users_Add$merge = F2(
	function (_p0, acc) {
		var _p1 = _p0;
		var user = A2(
			_elm_lang$core$Maybe$withDefault,
			acc,
			_narkisr$elm_ui$Form$getOutput(_p1.form));
		var _p2 = _p1.value;
		if (_p2.ctor === 'Main') {
			return user;
		} else {
			return user;
		}
	});
var _narkisr$elm_ui$Users_Add$merged = function (_p3) {
	var _p4 = _p3;
	return A3(_elm_lang$core$List$foldl, _narkisr$elm_ui$Users_Add$merge, _narkisr$elm_ui$Users_Model$emptyUser, _p4.wizard.prev);
};
var _narkisr$elm_ui$Users_Add$step = F2(
	function (model, value) {
		return {form: model.form, value: value};
	});
var _narkisr$elm_ui$Users_Add$Model = F6(
	function (a, b, c, d, e, f) {
		return {wizard: a, saveErrors: b, hasNext: c, roles: d, environments: e, operations: f};
	});
var _narkisr$elm_ui$Users_Add$Perm = {ctor: 'Perm'};
var _narkisr$elm_ui$Users_Add$Main = {ctor: 'Main'};
var _narkisr$elm_ui$Users_Add$setRoles = F2(
	function (_p5, roles) {
		var _p6 = _p5;
		var pairs = A2(
			_elm_lang$core$List$map,
			function (_p7) {
				var _p8 = _p7;
				return {ctor: '_Tuple2', _0: _p8._1, _1: _p8._0};
			},
			_elm_lang$core$Dict$toList(roles));
		var role = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(
				_elm_lang$core$Dict$values(roles)));
		var mainStep = A2(
			_narkisr$elm_ui$Users_Add$step,
			_narkisr$elm_ui$Users_Add_Main$init(role),
			_narkisr$elm_ui$Users_Add$Main);
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				_p6,
				{
					roles: pairs,
					wizard: _elm_lang$core$Native_Utils.update(
						_p6.wizard,
						{
							step: _elm_lang$core$Maybe$Just(mainStep)
						})
				}));
	});
var _narkisr$elm_ui$Users_Add$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Users_Add$Saved = function (a) {
	return {ctor: 'Saved', _0: a};
};
var _narkisr$elm_ui$Users_Add$saveUser = function (json) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		_narkisr$elm_ui$Users_Add$Saved,
		_elm_lang$core$Task$toResult(
			A3(
				_narkisr$elm_ui$Common_Http$postJson,
				_evancz$elm_http$Http$string(json),
				_narkisr$elm_ui$Common_Http$saveResponse,
				'/users')));
};
var _narkisr$elm_ui$Users_Add$updateUser = function (json) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		_narkisr$elm_ui$Users_Add$Saved,
		_elm_lang$core$Task$toResult(
			A3(
				_narkisr$elm_ui$Common_Http$putJson,
				_evancz$elm_http$Http$string(json),
				_narkisr$elm_ui$Common_Http$saveResponse,
				'/users')));
};
var _narkisr$elm_ui$Users_Add$Save = function (a) {
	return {ctor: 'Save', _0: a};
};
var _narkisr$elm_ui$Users_Add$saveButton = _elm_lang$core$Native_List.fromArray(
	[
		A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('Save'),
				_elm_lang$html$Html_Attributes$class('btn btn-primary'),
				_elm_lang$html$Html_Events$onClick(
				_narkisr$elm_ui$Users_Add$Save(_narkisr$elm_ui$Users_Add$saveUser))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Save  ')
			]))
	]);
var _narkisr$elm_ui$Users_Add$doneButton = _elm_lang$core$Native_List.fromArray(
	[
		A2(
		_elm_lang$html$Html$button,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$id('Done'),
				_elm_lang$html$Html_Attributes$class('btn btn-primary'),
				_elm_lang$html$Html_Events$onClick(
				_narkisr$elm_ui$Users_Add$Save(_narkisr$elm_ui$Users_Add$saveUser))
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Done ')
			]))
	]);
var _narkisr$elm_ui$Users_Add$Next = {ctor: 'Next'};
var _narkisr$elm_ui$Users_Add$Back = {ctor: 'Back'};
var _narkisr$elm_ui$Users_Add$Done = {ctor: 'Done'};
var _narkisr$elm_ui$Users_Add$Reset = {ctor: 'Reset'};
var _narkisr$elm_ui$Users_Add$SetOperations = function (a) {
	return {ctor: 'SetOperations', _0: a};
};
var _narkisr$elm_ui$Users_Add$SetEnvironments = function (a) {
	return {ctor: 'SetEnvironments', _0: a};
};
var _narkisr$elm_ui$Users_Add$SetRoles = function (a) {
	return {ctor: 'SetRoles', _0: a};
};
var _narkisr$elm_ui$Users_Add$init = function () {
	var msgs = _elm_lang$core$Native_List.fromArray(
		[
			_narkisr$elm_ui$Users_Model$getRoles(_narkisr$elm_ui$Users_Add$SetRoles),
			_narkisr$elm_ui$Environments_List$getEnvironmentKeys(_narkisr$elm_ui$Users_Add$SetEnvironments),
			_narkisr$elm_ui$Users_Add$getOperations(_narkisr$elm_ui$Users_Add$SetOperations)
		]);
	var mainStep = A2(
		_narkisr$elm_ui$Users_Add$step,
		_narkisr$elm_ui$Users_Add_Main$init(''),
		_narkisr$elm_ui$Users_Add$Main);
	var steps = _elm_lang$core$Native_List.fromArray(
		[
			A2(_narkisr$elm_ui$Users_Add$step, _narkisr$elm_ui$Users_Add_Perm$init, _narkisr$elm_ui$Users_Add$Perm)
		]);
	var wizard = A2(_narkisr$elm_ui$Common_FormWizard$init, mainStep, steps);
	var errors = _narkisr$elm_ui$Common_Errors$init;
	return {
		ctor: '_Tuple2',
		_0: A6(
			_narkisr$elm_ui$Users_Add$Model,
			wizard,
			errors,
			false,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[])),
		_1: _elm_lang$core$Platform_Cmd$batch(msgs)
	};
}();
var _narkisr$elm_ui$Users_Add$FormMsg = function (a) {
	return {ctor: 'FormMsg', _0: a};
};
var _narkisr$elm_ui$Users_Add$currentView = function (_p9) {
	var _p10 = _p9;
	var _p11 = _p10.wizard.step;
	if (_p11.ctor === 'Just') {
		var _p13 = _p11._0;
		var _p12 = _p11._0.value;
		if (_p12.ctor === 'Main') {
			return A3(
				_narkisr$elm_ui$Common_Components$dialogPanel,
				'info',
				_narkisr$elm_ui$Common_Components$info('Add a new User'),
				_narkisr$elm_ui$Common_Components$panel(
					_narkisr$elm_ui$Common_Components$fixedPanel(
						A2(
							_elm_lang$html$Html_App$map,
							_narkisr$elm_ui$Users_Add$FormMsg,
							A2(_narkisr$elm_ui$Users_Add_Main$view, _p10.roles, _p13)))));
		} else {
			return A3(
				_narkisr$elm_ui$Common_Components$dialogPanel,
				'info',
				_narkisr$elm_ui$Common_Components$info('User permissions'),
				_narkisr$elm_ui$Common_Components$panel(
					_narkisr$elm_ui$Common_Components$fixedPanel(
						A2(
							_elm_lang$html$Html_App$map,
							_narkisr$elm_ui$Users_Add$FormMsg,
							A3(_narkisr$elm_ui$Users_Add_Perm$view, _p10.environments, _p10.operations, _p13)))));
		}
	} else {
		return A3(
			_narkisr$elm_ui$Common_Components$dialogPanel,
			'info',
			_narkisr$elm_ui$Common_Components$info('Save new user'),
			_narkisr$elm_ui$Common_Components$panel(
				_narkisr$elm_ui$Common_Components$fixedPanel(
					A2(
						_elm_lang$html$Html_App$map,
						function (_p14) {
							return _narkisr$elm_ui$Users_Add$NoOp;
						},
						_narkisr$elm_ui$Users_View$summarize(
							_narkisr$elm_ui$Users_Add$merged(_p10))))));
	}
};
var _narkisr$elm_ui$Users_Add$WizardMsg = function (a) {
	return {ctor: 'WizardMsg', _0: a};
};
var _narkisr$elm_ui$Users_Add$update = F2(
	function (msg, _p15) {
		update:
		while (true) {
			var _p16 = _p15;
			var _p20 = _p16.wizard;
			var _p19 = _p16;
			var _p17 = msg;
			switch (_p17.ctor) {
				case 'Next':
					var _v10 = _narkisr$elm_ui$Users_Add$WizardMsg(_narkisr$elm_ui$Common_FormWizard$Next),
						_v11 = _p19;
					msg = _v10;
					_p15 = _v11;
					continue update;
				case 'Back':
					var _v12 = _narkisr$elm_ui$Users_Add$WizardMsg(_narkisr$elm_ui$Common_FormWizard$Back),
						_v13 = _p19;
					msg = _v12;
					_p15 = _v13;
					continue update;
				case 'Reset':
					var _p18 = A2(
						_narkisr$elm_ui$Users_Add$update,
						_narkisr$elm_ui$Users_Add$WizardMsg(_narkisr$elm_ui$Common_FormWizard$Back),
						_p19);
					var back = _p18._0;
					return _narkisr$elm_ui$Common_Utils$none(
						_elm_lang$core$Native_Utils.update(
							back,
							{saveErrors: _narkisr$elm_ui$Common_Errors$init}));
				case 'WizardMsg':
					var newWizard = A2(_narkisr$elm_ui$Common_FormWizard$update, _p17._0, _p20);
					return _narkisr$elm_ui$Common_Utils$none(
						_elm_lang$core$Native_Utils.update(
							_p19,
							{wizard: newWizard}));
				case 'FormMsg':
					var newWizard = A2(
						_narkisr$elm_ui$Common_FormWizard$update,
						_narkisr$elm_ui$Common_FormWizard$FormMsg(_p17._0),
						_p20);
					return _narkisr$elm_ui$Common_Utils$none(
						_elm_lang$core$Native_Utils.update(
							_p19,
							{wizard: newWizard}));
				case 'SetRoles':
					return A4(
						_narkisr$elm_ui$Common_Errors$successHandler,
						_p17._0,
						_p19,
						_narkisr$elm_ui$Users_Add$setRoles(_p19),
						_narkisr$elm_ui$Users_Add$NoOp);
				case 'SetEnvironments':
					return A4(
						_narkisr$elm_ui$Common_Errors$successHandler,
						_p17._0,
						_p19,
						_narkisr$elm_ui$Users_Add$setEnvironment(_p19),
						_narkisr$elm_ui$Users_Add$NoOp);
				case 'SetOperations':
					return A4(
						_narkisr$elm_ui$Common_Errors$successHandler,
						_p17._0,
						_p19,
						_narkisr$elm_ui$Users_Add$setOperation(_p19),
						_narkisr$elm_ui$Users_Add$NoOp);
				case 'Save':
					return _narkisr$elm_ui$Common_Utils$none(_p19);
				case 'Saved':
					return A3(_narkisr$elm_ui$Common_Errors$errorsHandler, _p17._0, _p19, _narkisr$elm_ui$Users_Add$NoOp);
				default:
					return _narkisr$elm_ui$Common_Utils$none(_p19);
			}
		}
	});
var _narkisr$elm_ui$Users_Add$ErrorsView = function (a) {
	return {ctor: 'ErrorsView', _0: a};
};
var _narkisr$elm_ui$Users_Add$errorsView = function (_p21) {
	var _p22 = _p21;
	var body = A2(
		_elm_lang$html$Html_App$map,
		_narkisr$elm_ui$Users_Add$ErrorsView,
		_narkisr$elm_ui$Common_Errors$view(_p22.saveErrors));
	return A3(
		_narkisr$elm_ui$Common_Components$dialogPanel,
		'danger',
		_narkisr$elm_ui$Common_Components$error('Failed to save user'),
		_narkisr$elm_ui$Common_Components$panel(
			_narkisr$elm_ui$Common_Components$panelContents(body)));
};
var _narkisr$elm_ui$Users_Add$view = function (_p23) {
	var _p24 = _p23;
	var _p25 = _p24;
	var buttons$ = _narkisr$elm_ui$Common_Components$buttons(
		_elm_lang$core$Native_Utils.update(
			_p25,
			{
				hasNext: _narkisr$elm_ui$Common_FormWizard$notDone(_p25)
			}));
	return _narkisr$elm_ui$Common_Errors$hasErrors(_p24.saveErrors) ? A2(
		_narkisr$elm_ui$Users_Add$rows,
		A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_narkisr$elm_ui$Users_Add$errorsView(_p25)),
		A3(buttons$, _narkisr$elm_ui$Users_Add$Done, _narkisr$elm_ui$Users_Add$Reset, _narkisr$elm_ui$Users_Add$doneButton)) : A2(
		_narkisr$elm_ui$Users_Add$rows,
		A2(
			_elm_lang$html$Html$div,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('col-md-offset-2 col-md-8')
				]),
			_narkisr$elm_ui$Users_Add$currentView(_p25)),
		A3(buttons$, _narkisr$elm_ui$Users_Add$Next, _narkisr$elm_ui$Users_Add$Back, _narkisr$elm_ui$Users_Add$saveButton));
};

var _narkisr$elm_ui$Users_Routing$Delete = function (a) {
	return {ctor: 'Delete', _0: a};
};
var _narkisr$elm_ui$Users_Routing$matcherDelete = A3(_sporto$hop$Hop_Matchers$match2, _narkisr$elm_ui$Users_Routing$Delete, '/delete/', _sporto$hop$Hop_Matchers$str);
var _narkisr$elm_ui$Users_Routing$View = function (a) {
	return {ctor: 'View', _0: a};
};
var _narkisr$elm_ui$Users_Routing$matcherView = A3(_sporto$hop$Hop_Matchers$match2, _narkisr$elm_ui$Users_Routing$View, '/view/', _sporto$hop$Hop_Matchers$str);
var _narkisr$elm_ui$Users_Routing$List = {ctor: 'List'};
var _narkisr$elm_ui$Users_Routing$matcherList = A2(_sporto$hop$Hop_Matchers$match1, _narkisr$elm_ui$Users_Routing$List, '/list');
var _narkisr$elm_ui$Users_Routing$Add = {ctor: 'Add'};
var _narkisr$elm_ui$Users_Routing$matcherAdd = A2(_sporto$hop$Hop_Matchers$match1, _narkisr$elm_ui$Users_Routing$Add, '/add');
var _narkisr$elm_ui$Users_Routing$matchers = _elm_lang$core$Native_List.fromArray(
	[_narkisr$elm_ui$Users_Routing$matcherAdd, _narkisr$elm_ui$Users_Routing$matcherList, _narkisr$elm_ui$Users_Routing$matcherView, _narkisr$elm_ui$Users_Routing$matcherDelete]);

var _narkisr$elm_ui$Users_Core$navigate = F2(
	function (msg, _p0) {
		var _p1 = _p0;
		var _p6 = _p1._1;
		var _p5 = _p1._0;
		var _p2 = msg;
		if ((_p2.ctor === 'MenuClick') && (_p2._0.ctor === '_Tuple2')) {
			var _p4 = _p2._0._1;
			var _p3 = _p2._0._0;
			switch (_p3) {
				case 'edit':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p5,
							{
								navChange: _elm_lang$core$Maybe$Just(
									A2(_elm_lang$core$Basics_ops['++'], '/users/edit/', _p4))
							}),
						_1: _p6
					};
				case 'clear':
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p5,
							{
								navChange: _elm_lang$core$Maybe$Just(
									A2(_elm_lang$core$Basics_ops['++'], '/users/delete/', _p4))
							}),
						_1: _p6
					};
				default:
					return _narkisr$elm_ui$Common_Utils$none(_p5);
			}
		} else {
			return _narkisr$elm_ui$Common_Utils$none(_p5);
		}
	});
var _narkisr$elm_ui$Users_Core$Model = F3(
	function (a, b, c) {
		return {list: a, add: b, navChange: c};
	});
var _narkisr$elm_ui$Users_Core$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Users_Core$MenuClick = function (a) {
	return {ctor: 'MenuClick', _0: a};
};
var _narkisr$elm_ui$Users_Core$Adding = function (a) {
	return {ctor: 'Adding', _0: a};
};
var _narkisr$elm_ui$Users_Core$Listing = function (a) {
	return {ctor: 'Listing', _0: a};
};
var _narkisr$elm_ui$Users_Core$init = function () {
	var _p7 = _narkisr$elm_ui$Users_Add$init;
	var add = _p7._0;
	var addMsgs = _p7._1;
	var _p8 = _narkisr$elm_ui$Users_List$init;
	var list = _p8._0;
	var listMsgs = _p8._1;
	var msgs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Users_Core$Listing, listMsgs),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Users_Core$Adding, addMsgs)
		]);
	return {
		ctor: '_Tuple2',
		_0: A3(_narkisr$elm_ui$Users_Core$Model, list, add, _elm_lang$core$Maybe$Nothing),
		_1: _elm_lang$core$Platform_Cmd$batch(msgs)
	};
}();
var _narkisr$elm_ui$Users_Core$route = F2(
	function (msg, _p9) {
		var _p10 = _p9;
		var _p14 = _p10;
		var _p11 = msg;
		switch (_p11.ctor) {
			case 'Listing':
				var _p12 = A2(_narkisr$elm_ui$Users_List$update, _p11._0, _p10.list);
				var newList = _p12._0;
				var msgs = _p12._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p14,
						{list: newList}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Users_Core$Listing, msgs)
				};
			case 'Adding':
				var _p13 = A2(_narkisr$elm_ui$Users_Add$update, _p11._0, _p10.add);
				var newAdd = _p13._0;
				var msgs = _p13._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p14,
						{add: newAdd}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Users_Core$Adding, msgs)
				};
			default:
				return _narkisr$elm_ui$Common_Utils$none(_p14);
		}
	});
var _narkisr$elm_ui$Users_Core$update = F2(
	function (msg, model) {
		return A2(
			_narkisr$elm_ui$Users_Core$navigate,
			msg,
			A2(_narkisr$elm_ui$Users_Core$route, msg, model));
	});
var _narkisr$elm_ui$Users_Core$view = F2(
	function (_p15, section) {
		var _p16 = _p15;
		var _p17 = section;
		switch (_p17.ctor) {
			case 'List':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Users_Core$Listing,
					_narkisr$elm_ui$Users_List$view(_p16.list));
			case 'Add':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Users_Core$Adding,
					_narkisr$elm_ui$Users_Add$view(_p16.add));
			default:
				return _narkisr$elm_ui$Common_Components$notImplemented;
		}
	});

var _narkisr$elm_ui$Templates_Persistency$encodeMachine = function (_p0) {
	var _p1 = _p0;
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'hostname',
				_1: _elm_lang$core$Json_Encode$string(_p1.hostname)
			},
				{
				ctor: '_Tuple2',
				_0: 'domain',
				_1: _elm_lang$core$Json_Encode$string(_p1.domain)
			}
			]));
};
var _narkisr$elm_ui$Templates_Persistency$encodeProvided = F2(
	function (machine, admin) {
		return _elm_lang$core$Json_Encode$object(
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'owner',
					_1: _elm_lang$core$Json_Encode$string(admin.owner)
				},
					{
					ctor: '_Tuple2',
					_0: 'env',
					_1: _elm_lang$core$Json_Encode$string(admin.environment)
				},
					{
					ctor: '_Tuple2',
					_0: 'machine',
					_1: _narkisr$elm_ui$Templates_Persistency$encodeMachine(machine)
				}
				]));
	});
var _narkisr$elm_ui$Templates_Persistency$persistModel = F2(
	function (f, value) {
		return f(
			A2(_elm_lang$core$Json_Encode$encode, 0, value));
	});
var _narkisr$elm_ui$Templates_Persistency$persistProvided = F3(
	function (f, machine, admin) {
		return A2(
			_narkisr$elm_ui$Templates_Persistency$persistModel,
			f,
			A2(_narkisr$elm_ui$Templates_Persistency$encodeProvided, machine, admin));
	});
var _narkisr$elm_ui$Templates_Persistency$partialEncoder = function (machine) {
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'ip',
				_1: A2(_narkisr$elm_ui$Systems_Add_Encoders$optional, _elm_lang$core$Json_Encode$string, machine.ip)
			},
				{
				ctor: '_Tuple2',
				_0: 'os',
				_1: _elm_lang$core$Json_Encode$string(machine.os)
			},
				{
				ctor: '_Tuple2',
				_0: 'user',
				_1: _elm_lang$core$Json_Encode$string(machine.user)
			}
			]));
};
var _narkisr$elm_ui$Templates_Persistency$openstackDefaultsEncoder = function (openstack) {
	return _elm_lang$core$Json_Encode$object(
		_elm_lang$core$Native_List.fromArray(
			[
				{
				ctor: '_Tuple2',
				_0: 'networks',
				_1: _elm_lang$core$Json_Encode$list(
					A2(
						_elm_lang$core$List$map,
						_elm_lang$core$Json_Encode$string,
						A2(
							_elm_lang$core$Maybe$withDefault,
							_elm_lang$core$Native_List.fromArray(
								[]),
							openstack.networks)))
			}
			]));
};
var _narkisr$elm_ui$Templates_Persistency$defaultsEncoder = F2(
	function (_p2, hyp) {
		var _p3 = _p2;
		return _elm_lang$core$Native_Utils.eq(hyp, 'Openstack') ? _elm_lang$core$Json_Encode$object(
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'openstack',
					_1: _narkisr$elm_ui$Templates_Persistency$openstackDefaultsEncoder(
						A2(_elm_lang$core$Maybe$withDefault, _narkisr$elm_ui$Templates_Model_Common$emptyOpenstackDefaults, _p3.openstack))
				}
				])) : _elm_lang$core$Json_Encode$null;
	});
var _narkisr$elm_ui$Templates_Persistency$defaultsDictEncoder = F2(
	function (defaults, hyp) {
		return _elm_lang$core$Json_Encode$object(
			A2(
				_elm_lang$core$List$map,
				function (_p4) {
					var _p5 = _p4;
					return {
						ctor: '_Tuple2',
						_0: _p5._0,
						_1: A2(_narkisr$elm_ui$Templates_Persistency$defaultsEncoder, _p5._1, hyp)
					};
				},
				_elm_lang$core$Dict$toList(defaults)));
	});
var _narkisr$elm_ui$Templates_Persistency$encodeDefaults = F2(
	function (defaults, hyp) {
		return A2(
			_elm_lang$core$Json_Encode$encode,
			0,
			A2(_narkisr$elm_ui$Templates_Persistency$defaultsDictEncoder, defaults, hyp));
	});
var _narkisr$elm_ui$Templates_Persistency$encode = F2(
	function (_p6, hyp) {
		var _p7 = _p6;
		return _elm_lang$core$Json_Encode$object(
			_elm_lang$core$Native_List.fromArray(
				[
					{
					ctor: '_Tuple2',
					_0: 'type',
					_1: _elm_lang$core$Json_Encode$string(_p7.type$)
				},
					{
					ctor: '_Tuple2',
					_0: 'name',
					_1: _elm_lang$core$Json_Encode$string(_p7.name)
				},
					{
					ctor: '_Tuple2',
					_0: 'description',
					_1: _elm_lang$core$Json_Encode$string(_p7.description)
				},
					A2(_narkisr$elm_ui$Systems_Add_Encoders$encoderOf, _p7, hyp),
					{
					ctor: '_Tuple2',
					_0: 'machine',
					_1: _narkisr$elm_ui$Templates_Persistency$partialEncoder(_p7.machine)
				},
					{
					ctor: '_Tuple2',
					_0: 'defaults',
					_1: A2(
						_narkisr$elm_ui$Templates_Persistency$defaultsDictEncoder,
						A2(_elm_lang$core$Maybe$withDefault, _elm_lang$core$Dict$empty, _p7.defaults),
						hyp)
				}
				]));
	});
var _narkisr$elm_ui$Templates_Persistency$persistTemplate = F3(
	function (f, template, hyp) {
		return A2(
			_narkisr$elm_ui$Templates_Persistency$persistModel,
			f,
			A2(_narkisr$elm_ui$Templates_Persistency$encode, template, hyp));
	});

var _narkisr$elm_ui$Templates_Add$intoTemplate = F3(
	function (_p1, _p0, hyp) {
		var _p2 = _p1;
		var _p3 = _p0;
		var _p4 = _p3.machine;
		var withHyp = _elm_lang$core$Native_Utils.update(
			_p2.template,
			{openstack: _p3.openstack, physical: _p3.physical, aws: _p3.aws, digital: _p3.digital, gce: _p3.gce});
		var newTemplate = _elm_lang$core$Native_Utils.update(
			withHyp,
			{name: _p4.hostname, type$: _p3.type$, machine: _p4});
		return _elm_lang$core$Native_Utils.update(
			_p2,
			{template: newTemplate, hyp: hyp});
	});
var _narkisr$elm_ui$Templates_Add$Model = F5(
	function (a, b, c, d, e) {
		return {template: a, hyp: b, editDefaults: c, saveErrors: d, environments: e};
	});
var _narkisr$elm_ui$Templates_Add$SaveResponse = function (a) {
	return {message: a};
};
var _narkisr$elm_ui$Templates_Add$saveResponse = A2(
	_elm_lang$core$Json_Decode$object1,
	_narkisr$elm_ui$Templates_Add$SaveResponse,
	A2(_elm_lang$core$Json_Decode_ops[':='], 'message', _elm_lang$core$Json_Decode$string));
var _narkisr$elm_ui$Templates_Add$ErrorsView = function (a) {
	return {ctor: 'ErrorsView', _0: a};
};
var _narkisr$elm_ui$Templates_Add$SetEnvironments = function (a) {
	return {ctor: 'SetEnvironments', _0: a};
};
var _narkisr$elm_ui$Templates_Add$init = function () {
	var errors = _narkisr$elm_ui$Common_Errors$init;
	return {
		ctor: '_Tuple2',
		_0: A5(
			_narkisr$elm_ui$Templates_Add$Model,
			_narkisr$elm_ui$Templates_Model_Common$emptyTemplate,
			'',
			false,
			errors,
			_elm_lang$core$Native_List.fromArray(
				[])),
		_1: _narkisr$elm_ui$Environments_List$getEnvironments(_narkisr$elm_ui$Templates_Add$SetEnvironments)
	};
}();
var _narkisr$elm_ui$Templates_Add$DefaultsInput = function (a) {
	return {ctor: 'DefaultsInput', _0: a};
};
var _narkisr$elm_ui$Templates_Add$DescriptionInput = function (a) {
	return {ctor: 'DescriptionInput', _0: a};
};
var _narkisr$elm_ui$Templates_Add$NameInput = function (a) {
	return {ctor: 'NameInput', _0: a};
};
var _narkisr$elm_ui$Templates_Add$SetSystem = F2(
	function (a, b) {
		return {ctor: 'SetSystem', _0: a, _1: b};
	});
var _narkisr$elm_ui$Templates_Add$Saved = function (a) {
	return {ctor: 'Saved', _0: a};
};
var _narkisr$elm_ui$Templates_Add$saveTemplate = function (json) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		_narkisr$elm_ui$Templates_Add$Saved,
		_elm_lang$core$Task$toResult(
			A3(
				_narkisr$elm_ui$Common_Http$postJson,
				_evancz$elm_http$Http$string(json),
				_narkisr$elm_ui$Templates_Add$saveResponse,
				'/templates')));
};
var _narkisr$elm_ui$Templates_Add$SetDefaults = function (a) {
	return {ctor: 'SetDefaults', _0: a};
};
var _narkisr$elm_ui$Templates_Add$LoadEditor = {ctor: 'LoadEditor'};
var _narkisr$elm_ui$Templates_Add$editing = function (_p5) {
	var _p6 = _p5;
	var _p7 = _p6.template;
	return _narkisr$elm_ui$Common_Components$panel(
		_narkisr$elm_ui$Common_Components$panelContents(
			A2(
				_elm_lang$html$Html$form,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$div,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('form-horizontal'),
								A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_narkisr$elm_ui$Common_Components$group$,
								'Name',
								A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Templates_Add$NameInput, ' ', _p7.name)),
								A2(
								_narkisr$elm_ui$Common_Components$group$,
								'Description',
								A3(_narkisr$elm_ui$Common_Components$inputText, _narkisr$elm_ui$Templates_Add$DescriptionInput, ' ', _p7.description)),
								A2(
								_narkisr$elm_ui$Common_Components$group$,
								'Edit defaults',
								A2(_narkisr$elm_ui$Common_Components$checkbox, _narkisr$elm_ui$Templates_Add$LoadEditor, _p6.editDefaults)),
								A2(
								_elm_lang$html$Html$div,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$id('jsoneditor'),
										_elm_lang$html$Html_Attributes$style(
										_elm_lang$core$Native_List.fromArray(
											[
												{ctor: '_Tuple2', _0: 'width', _1: '50%'},
												{ctor: '_Tuple2', _0: 'height', _1: '400px'},
												{ctor: '_Tuple2', _0: 'margin-left', _1: '25%'}
											]))
									]),
								_elm_lang$core$Native_List.fromArray(
									[]))
							]))
					]))));
};
var _narkisr$elm_ui$Templates_Add$Cancel = {ctor: 'Cancel'};
var _narkisr$elm_ui$Templates_Add$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Templates_Add$update = F2(
	function (msg, _p8) {
		var _p9 = _p8;
		var _p12 = _p9.template;
		var _p11 = _p9;
		var _p10 = msg;
		switch (_p10.ctor) {
			case 'Save':
				return {
					ctor: '_Tuple2',
					_0: _p11,
					_1: A3(_narkisr$elm_ui$Templates_Persistency$persistTemplate, _narkisr$elm_ui$Templates_Add$saveTemplate, _p12, _p9.hyp)
				};
			case 'SetSystem':
				return _narkisr$elm_ui$Common_Utils$none(
					A3(_narkisr$elm_ui$Templates_Add$intoTemplate, _p11, _p10._1, _p10._0));
			case 'NameInput':
				var newTemplate = _elm_lang$core$Native_Utils.update(
					_p12,
					{name: _p10._0});
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p11,
						{template: newTemplate}));
			case 'DescriptionInput':
				var newTemplate = _elm_lang$core$Native_Utils.update(
					_p12,
					{description: _p10._0});
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p11,
						{template: newTemplate}));
			case 'SetDefaults':
				var newTemplate = _elm_lang$core$Native_Utils.update(
					_p12,
					{
						defaults: _elm_lang$core$Maybe$Just(
							_narkisr$elm_ui$Templates_Model_Common$decodeDefaults(_p10._0))
					});
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p11,
						{template: newTemplate}));
			case 'Saved':
				return A3(_narkisr$elm_ui$Common_Errors$errorsHandler, _p10._0, _p11, _narkisr$elm_ui$Templates_Add$NoOp);
			case 'SetEnvironments':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p10._0,
					_p11,
					_narkisr$elm_ui$Common_Utils$setEnvironments(_p11),
					_narkisr$elm_ui$Templates_Add$NoOp);
			default:
				return _narkisr$elm_ui$Common_Utils$none(_p11);
		}
	});
var _narkisr$elm_ui$Templates_Add$Done = {ctor: 'Done'};
var _narkisr$elm_ui$Templates_Add$Save = {ctor: 'Save'};
var _narkisr$elm_ui$Templates_Add$view = function (_p13) {
	var _p14 = _p13;
	var _p15 = _p14.saveErrors;
	var errorsView = A2(
		_elm_lang$html$Html_App$map,
		_narkisr$elm_ui$Templates_Add$ErrorsView,
		_narkisr$elm_ui$Common_Errors$view(_p15));
	return _narkisr$elm_ui$Common_Errors$hasErrors(_p15) ? A4(
		_narkisr$elm_ui$Common_Components$dangerCallout,
		_narkisr$elm_ui$Common_Components$error('Failed to save template'),
		_narkisr$elm_ui$Common_Components$panel(
			_narkisr$elm_ui$Common_Components$panelContents(errorsView)),
		_narkisr$elm_ui$Templates_Add$Cancel,
		_narkisr$elm_ui$Templates_Add$Done) : A4(
		_narkisr$elm_ui$Common_Components$infoCallout,
		_narkisr$elm_ui$Common_Components$info('Save template'),
		_narkisr$elm_ui$Templates_Add$editing(_p14),
		_narkisr$elm_ui$Templates_Add$Cancel,
		_narkisr$elm_ui$Templates_Add$Save);
};

var _narkisr$elm_ui$Templates_Launch$errorMessage = _elm_lang$core$Native_List.fromArray(
	[
		A2(
		_elm_lang$html$Html$h4,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Error!')
			])),
		A2(
		_elm_lang$html$Html$span,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html$text('Failed to save system')
			]))
	]);
var _narkisr$elm_ui$Templates_Launch$machineView = function (form) {
	var domain = A2(_narkisr$elm_ui$Form$getFieldAsString, 'machine.domain', form);
	var hostname = A2(_narkisr$elm_ui$Form$getFieldAsString, 'machine.hostname', form);
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[]),
		_elm_lang$core$Native_List.fromArray(
			[
				A3(_narkisr$elm_ui$Common_FormComponents$formControl, 'Hostname', _narkisr$elm_ui$Form_Input$textInput, hostname),
				A3(_narkisr$elm_ui$Common_FormComponents$formControl, 'Domain', _narkisr$elm_ui$Form_Input$textInput, domain)
			]));
};
var _narkisr$elm_ui$Templates_Launch$infoMessage = function (name) {
	return _elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$h4,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('Info')
				])),
			A2(
			_elm_lang$html$Html$span,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html$text('Launch a new system from '),
					A2(
					_elm_lang$html$Html$strong,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html$text(name)
						])),
					_elm_lang$html$Html$text(' template ')
				]))
		]);
};
var _narkisr$elm_ui$Templates_Launch$PartialMachine = F2(
	function (a, b) {
		return {hostname: a, domain: b};
	});
var _narkisr$elm_ui$Templates_Launch$Provided = function (a) {
	return {machine: a};
};
var _narkisr$elm_ui$Templates_Launch$validate = A2(
	_narkisr$elm_ui$Form_Validate$form1,
	_narkisr$elm_ui$Templates_Launch$Provided,
	A2(
		_narkisr$elm_ui$Form_Infix_ops[':='],
		'machine',
		A3(
			_narkisr$elm_ui$Form_Validate$form2,
			_narkisr$elm_ui$Templates_Launch$PartialMachine,
			A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'hostname', _narkisr$elm_ui$Form_Validate$string),
			A2(_narkisr$elm_ui$Form_Infix_ops[':='], 'domain', _narkisr$elm_ui$Form_Validate$string))));
var _narkisr$elm_ui$Templates_Launch$Model = F4(
	function (a, b, c, d) {
		return {name: a, form: b, admin: c, saveErrors: d};
	});
var _narkisr$elm_ui$Templates_Launch$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Templates_Launch$Cancel = {ctor: 'Cancel'};
var _narkisr$elm_ui$Templates_Launch$Done = {ctor: 'Done'};
var _narkisr$elm_ui$Templates_Launch$Launch = {ctor: 'Launch'};
var _narkisr$elm_ui$Templates_Launch$JobLaunched = function (a) {
	return {ctor: 'JobLaunched', _0: a};
};
var _narkisr$elm_ui$Templates_Launch$stage = F2(
	function (model, _p0) {
		var _p1 = _p0;
		var _p2 = _p1.id;
		if (_p2.ctor === 'Just') {
			return {
				ctor: '_Tuple2',
				_0: model,
				_1: A3(
					_narkisr$elm_ui$Jobs_Common$runJob,
					_elm_lang$core$Basics$toString(_p2._0),
					'stage',
					_narkisr$elm_ui$Templates_Launch$JobLaunched)
			};
		} else {
			return _narkisr$elm_ui$Common_Utils$none(model);
		}
	});
var _narkisr$elm_ui$Templates_Launch$FormMsg = function (a) {
	return {ctor: 'FormMsg', _0: a};
};
var _narkisr$elm_ui$Templates_Launch$Launched = function (a) {
	return {ctor: 'Launched', _0: a};
};
var _narkisr$elm_ui$Templates_Launch$intoSystem = F2(
	function (name, json) {
		return A3(
			_elm_lang$core$Task$perform,
			_elm_community$basics_extra$Basics_Extra$never,
			_narkisr$elm_ui$Templates_Launch$Launched,
			_elm_lang$core$Task$toResult(
				A3(
					_narkisr$elm_ui$Common_Http$postJson,
					_evancz$elm_http$Http$string(json),
					_narkisr$elm_ui$Common_Http$saveResponse,
					A2(_elm_lang$core$Basics_ops['++'], '/systems/template/', name))));
	});
var _narkisr$elm_ui$Templates_Launch$ErrorsView = function (a) {
	return {ctor: 'ErrorsView', _0: a};
};
var _narkisr$elm_ui$Templates_Launch$AdminMsg = function (a) {
	return {ctor: 'AdminMsg', _0: a};
};
var _narkisr$elm_ui$Templates_Launch$init = function () {
	var errors = _narkisr$elm_ui$Common_Errors$init;
	var _p3 = _narkisr$elm_ui$Admin_Core$init;
	var admin = _p3._0;
	var msgs = _p3._1;
	return {
		ctor: '_Tuple2',
		_0: A4(
			_narkisr$elm_ui$Templates_Launch$Model,
			'',
			A2(
				_narkisr$elm_ui$Form$initial,
				_elm_lang$core$Native_List.fromArray(
					[]),
				_narkisr$elm_ui$Templates_Launch$validate),
			admin,
			errors),
		_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Templates_Launch$AdminMsg, msgs)
	};
}();
var _narkisr$elm_ui$Templates_Launch$update = F2(
	function (msg, _p4) {
		var _p5 = _p4;
		var _p11 = _p5;
		var _p10 = _p5.admin;
		var _p6 = msg;
		switch (_p6.ctor) {
			case 'FormMsg':
				var newForm = A2(_narkisr$elm_ui$Form$update, _p6._0, _p5.form);
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p11,
						{
							form: A2(_narkisr$elm_ui$Form$update, _narkisr$elm_ui$Form$Validate, newForm)
						}));
			case 'Launch':
				var _p7 = A2(
					_narkisr$elm_ui$Templates_Launch$update,
					_narkisr$elm_ui$Templates_Launch$FormMsg(_narkisr$elm_ui$Form$Validate),
					_p11);
				var newModel = _p7._0;
				if (_elm_lang$core$List$isEmpty(
					_narkisr$elm_ui$Form$getErrors(newModel.form))) {
					var _p8 = _narkisr$elm_ui$Form$getOutput(newModel.form);
					if (_p8.ctor === 'Just') {
						return {
							ctor: '_Tuple2',
							_0: newModel,
							_1: A3(
								_narkisr$elm_ui$Templates_Persistency$persistProvided,
								_narkisr$elm_ui$Templates_Launch$intoSystem(_p5.name),
								_p8._0.machine,
								_p10)
						};
					} else {
						return _narkisr$elm_ui$Common_Utils$none(newModel);
					}
				} else {
					return _narkisr$elm_ui$Common_Utils$none(newModel);
				}
			case 'AdminMsg':
				var _p9 = A2(_narkisr$elm_ui$Admin_Core$update, _p6._0, _p10);
				var newAdmin = _p9._0;
				var msgs = _p9._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p11,
						{admin: newAdmin}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Templates_Launch$AdminMsg, msgs)
				};
			case 'Launched':
				return A4(
					_narkisr$elm_ui$Common_Errors$errorsSuccessHandler,
					_p6._0,
					_p11,
					_narkisr$elm_ui$Templates_Launch$stage(_p11),
					_narkisr$elm_ui$Templates_Launch$NoOp);
			default:
				return _narkisr$elm_ui$Common_Utils$none(_p11);
		}
	});
var _narkisr$elm_ui$Templates_Launch$launchView = function (_p12) {
	var _p13 = _p12;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('panel panel-default')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('panel-body')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$form,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$div,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$class('form-horizontal'),
										A2(_elm_lang$html$Html_Attributes$attribute, 'onkeypress', 'return event.keyCode != 13;')
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										A2(
										_elm_lang$html$Html_App$map,
										_narkisr$elm_ui$Templates_Launch$FormMsg,
										_narkisr$elm_ui$Templates_Launch$machineView(_p13.form)),
										A2(
										_elm_lang$html$Html_App$map,
										_narkisr$elm_ui$Templates_Launch$AdminMsg,
										_narkisr$elm_ui$Admin_Core$view(_p13.admin))
									]))
							]))
					]))
			]));
};
var _narkisr$elm_ui$Templates_Launch$view = function (_p14) {
	var _p15 = _p14;
	var _p16 = _p15.saveErrors;
	var errorsView = A2(
		_elm_lang$html$Html_App$map,
		_narkisr$elm_ui$Templates_Launch$ErrorsView,
		_narkisr$elm_ui$Common_Errors$view(_p16));
	return _narkisr$elm_ui$Common_Errors$hasErrors(_p16) ? A4(
		_narkisr$elm_ui$Common_Components$dangerCallout,
		_narkisr$elm_ui$Templates_Launch$errorMessage,
		_narkisr$elm_ui$Common_Components$panel(
			_narkisr$elm_ui$Common_Components$panelContents(errorsView)),
		_narkisr$elm_ui$Templates_Launch$Cancel,
		_narkisr$elm_ui$Templates_Launch$Done) : A4(
		_narkisr$elm_ui$Common_Components$infoCallout,
		_narkisr$elm_ui$Templates_Launch$infoMessage(_p15.name),
		_narkisr$elm_ui$Templates_Launch$launchView(_p15),
		_narkisr$elm_ui$Templates_Launch$Cancel,
		_narkisr$elm_ui$Templates_Launch$Launch);
};
var _narkisr$elm_ui$Templates_Launch$SetupJob = function (a) {
	return {ctor: 'SetupJob', _0: a};
};

var _narkisr$elm_ui$Templates_Delete$Model = F2(
	function (a, b) {
		return {name: a, errorMsg: b};
	});
var _narkisr$elm_ui$Templates_Delete$init = _narkisr$elm_ui$Common_Utils$none(
	A2(_narkisr$elm_ui$Templates_Delete$Model, '', ''));
var _narkisr$elm_ui$Templates_Delete$Error = function (a) {
	return {ctor: 'Error', _0: a};
};
var _narkisr$elm_ui$Templates_Delete$Deleted = function (a) {
	return {ctor: 'Deleted', _0: a};
};
var _narkisr$elm_ui$Templates_Delete$deleteTemplate = function (name) {
	return A3(
		_elm_lang$core$Task$perform,
		_elm_community$basics_extra$Basics_Extra$never,
		_narkisr$elm_ui$Templates_Delete$Deleted,
		_elm_lang$core$Task$toResult(
			A2(
				_narkisr$elm_ui$Common_Http$delete,
				_narkisr$elm_ui$Common_Delete$deleteResponse,
				A2(_elm_lang$core$Basics_ops['++'], '/templates/', name))));
};
var _narkisr$elm_ui$Templates_Delete$succeeded = F2(
	function (msg, _p0) {
		var _p1 = _p0;
		return _elm_lang$core$Native_Utils.eq(
			msg,
			_narkisr$elm_ui$Templates_Delete$Deleted(
				_elm_lang$core$Result$Ok(
					{message: 'Template deleted'}))) ? true : false;
	});
var _narkisr$elm_ui$Templates_Delete$Done = {ctor: 'Done'};
var _narkisr$elm_ui$Templates_Delete$Delete = {ctor: 'Delete'};
var _narkisr$elm_ui$Templates_Delete$Cancel = {ctor: 'Cancel'};
var _narkisr$elm_ui$Templates_Delete$view = function (model) {
	return A5(_narkisr$elm_ui$Common_Delete$view, model, 'Template', _narkisr$elm_ui$Templates_Delete$Cancel, _narkisr$elm_ui$Templates_Delete$Delete, _narkisr$elm_ui$Templates_Delete$Done);
};
var _narkisr$elm_ui$Templates_Delete$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Templates_Delete$update = F2(
	function (msg, _p2) {
		var _p3 = _p2;
		var _p7 = _p3;
		var _p4 = msg;
		switch (_p4.ctor) {
			case 'Deleted':
				return A4(
					_narkisr$elm_ui$Common_Errors$failHandler,
					_p4._0,
					_p7,
					function (_p5) {
						var _p6 = _p5;
						return _narkisr$elm_ui$Common_Utils$none(
							_elm_lang$core$Native_Utils.update(
								_p7,
								{
									errorMsg: A2(_elm_lang$core$Maybe$withDefault, 'Failed to delete template', _p6.message)
								}));
					},
					_narkisr$elm_ui$Templates_Delete$NoOp);
			case 'Delete':
				return {
					ctor: '_Tuple2',
					_0: _p7,
					_1: _narkisr$elm_ui$Templates_Delete$deleteTemplate(_p3.name)
				};
			default:
				return _narkisr$elm_ui$Common_Utils$none(_p7);
		}
	});

var _narkisr$elm_ui$Templates_Routing$Launch = function (a) {
	return {ctor: 'Launch', _0: a};
};
var _narkisr$elm_ui$Templates_Routing$matcherLaunch = A3(_sporto$hop$Hop_Matchers$match2, _narkisr$elm_ui$Templates_Routing$Launch, '/launch/', _sporto$hop$Hop_Matchers$str);
var _narkisr$elm_ui$Templates_Routing$Delete = function (a) {
	return {ctor: 'Delete', _0: a};
};
var _narkisr$elm_ui$Templates_Routing$matcherDelete = A3(_sporto$hop$Hop_Matchers$match2, _narkisr$elm_ui$Templates_Routing$Delete, '/delete/', _sporto$hop$Hop_Matchers$str);
var _narkisr$elm_ui$Templates_Routing$View = function (a) {
	return {ctor: 'View', _0: a};
};
var _narkisr$elm_ui$Templates_Routing$List = {ctor: 'List'};
var _narkisr$elm_ui$Templates_Routing$matcherList = A2(_sporto$hop$Hop_Matchers$match1, _narkisr$elm_ui$Templates_Routing$List, '/list');
var _narkisr$elm_ui$Templates_Routing$Add = {ctor: 'Add'};
var _narkisr$elm_ui$Templates_Routing$matcherAdd = A2(_sporto$hop$Hop_Matchers$match1, _narkisr$elm_ui$Templates_Routing$Add, '/add');
var _narkisr$elm_ui$Templates_Routing$matchers = _elm_lang$core$Native_List.fromArray(
	[_narkisr$elm_ui$Templates_Routing$matcherAdd, _narkisr$elm_ui$Templates_Routing$matcherList, _narkisr$elm_ui$Templates_Routing$matcherLaunch, _narkisr$elm_ui$Templates_Routing$matcherDelete]);

var _narkisr$elm_ui$Templates_Core$setName = F2(
	function (model, name) {
		return _elm_lang$core$Native_Utils.update(
			model,
			{name: name});
	});
var _narkisr$elm_ui$Templates_Core$Model = F5(
	function (a, b, c, d, e) {
		return {add: a, list: b, launch: c, $delete: d, navChange: e};
	});
var _narkisr$elm_ui$Templates_Core$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Templates_Core$SetupJob = function (a) {
	return {ctor: 'SetupJob', _0: a};
};
var _narkisr$elm_ui$Templates_Core$TemplatesDelete = function (a) {
	return {ctor: 'TemplatesDelete', _0: a};
};
var _narkisr$elm_ui$Templates_Core$TemplatesLaunch = function (a) {
	return {ctor: 'TemplatesLaunch', _0: a};
};
var _narkisr$elm_ui$Templates_Core$TemplatesList = function (a) {
	return {ctor: 'TemplatesList', _0: a};
};
var _narkisr$elm_ui$Templates_Core$refreshList = A2(_narkisr$elm_ui$Common_Delete$refresh, _narkisr$elm_ui$Templates_List$init, _narkisr$elm_ui$Templates_Core$TemplatesList);
var _narkisr$elm_ui$Templates_Core$navigate = F2(
	function (msg, _p0) {
		var _p1 = _p0;
		var _p10 = _p1;
		var _p9 = _p1._1;
		var _p8 = _p1._0;
		var _p2 = msg;
		_v1_4:
		do {
			switch (_p2.ctor) {
				case 'SetupJob':
					if (_p2._0.ctor === '_Tuple2') {
						var _p4 = _p2._0._1;
						var _p3 = _p2._0._0;
						switch (_p3) {
							case 'launch':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										_p8,
										{
											navChange: _elm_lang$core$Maybe$Just(
												A2(_elm_lang$core$Basics_ops['++'], '/templates/launch/', _p4))
										}),
									_1: _p9
								};
							case 'clear':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										_p8,
										{
											navChange: _elm_lang$core$Maybe$Just(
												A2(_elm_lang$core$Basics_ops['++'], '/templates/delete/', _p4))
										}),
									_1: _p9
								};
							default:
								return _p10;
						}
					} else {
						break _v1_4;
					}
				case 'TemplatesAdd':
					var _p5 = _p2._0;
					_v3_3:
					do {
						switch (_p5.ctor) {
							case 'Saved':
								if (_p5._0.ctor === 'Ok') {
									return {
										ctor: '_Tuple2',
										_0: _elm_lang$core$Native_Utils.update(
											_p8,
											{
												navChange: _elm_lang$core$Maybe$Just('/templates/list')
											}),
										_1: _p9
									};
								} else {
									break _v3_3;
								}
							case 'Cancel':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										_p8,
										{
											navChange: _elm_lang$core$Maybe$Just('/templates/list')
										}),
									_1: _p9
								};
							case 'Done':
								return {
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										_p8,
										{
											navChange: _elm_lang$core$Maybe$Just('/templates/list')
										}),
									_1: _p9
								};
							default:
								break _v3_3;
						}
					} while(false);
					return _p10;
				case 'TemplatesLaunch':
					var _p6 = _p2._0;
					switch (_p6.ctor) {
						case 'Cancel':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									_p8,
									{
										navChange: _elm_lang$core$Maybe$Just('/templates/list')
									}),
								_1: _p9
							};
						case 'JobLaunched':
							return {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									_p8,
									{
										navChange: _elm_lang$core$Maybe$Just('/jobs/list')
									}),
								_1: _p9
							};
						default:
							return _p10;
					}
				case 'TemplatesDelete':
					var _p7 = _p2._0;
					switch (_p7.ctor) {
						case 'Deleted':
							return _elm_lang$core$Native_Utils.eq(_p1._0.$delete.errorMsg, '') ? {
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									_p8,
									{
										navChange: _elm_lang$core$Maybe$Just('/templates/list')
									}),
								_1: _p9
							} : _p10;
						case 'Cancel':
							return A2(
								_narkisr$elm_ui$Templates_Core$refreshList,
								true,
								{
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										_p8,
										{
											navChange: _elm_lang$core$Maybe$Just('/templates/list')
										}),
									_1: _p9
								});
						case 'Done':
							return A2(
								_narkisr$elm_ui$Templates_Core$refreshList,
								true,
								{
									ctor: '_Tuple2',
									_0: _elm_lang$core$Native_Utils.update(
										_p8,
										{
											navChange: _elm_lang$core$Maybe$Just('/templates/list')
										}),
									_1: _p9
								});
						default:
							return _p10;
					}
				default:
					break _v1_4;
			}
		} while(false);
		return _p10;
	});
var _narkisr$elm_ui$Templates_Core$TemplatesAdd = function (a) {
	return {ctor: 'TemplatesAdd', _0: a};
};
var _narkisr$elm_ui$Templates_Core$init = function () {
	var _p11 = _narkisr$elm_ui$Templates_Delete$init;
	var $delete = _p11._0;
	var deleteEffects = _p11._1;
	var _p12 = _narkisr$elm_ui$Templates_Launch$init;
	var launch = _p12._0;
	var launchEffects = _p12._1;
	var _p13 = _narkisr$elm_ui$Templates_List$init;
	var list = _p13._0;
	var listEffects = _p13._1;
	var _p14 = _narkisr$elm_ui$Templates_Add$init;
	var add = _p14._0;
	var addEffects = _p14._1;
	var msgs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Templates_Core$TemplatesAdd, addEffects),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Templates_Core$TemplatesList, listEffects),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Templates_Core$TemplatesLaunch, launchEffects),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Templates_Core$TemplatesDelete, deleteEffects)
		]);
	return {
		ctor: '_Tuple2',
		_0: A5(_narkisr$elm_ui$Templates_Core$Model, add, list, launch, $delete, _elm_lang$core$Maybe$Nothing),
		_1: _elm_lang$core$Platform_Cmd$batch(msgs)
	};
}();
var _narkisr$elm_ui$Templates_Core$route = F2(
	function (msg, _p15) {
		var _p16 = _p15;
		var _p31 = _p16;
		var _p30 = _p16.launch;
		var _p29 = _p16.$delete;
		var _p28 = _p16.add;
		var _p17 = msg;
		_v7_5:
		do {
			switch (_p17.ctor) {
				case 'SetupJob':
					if (_p17._0.ctor === '_Tuple2') {
						var _p19 = _p17._0._1;
						var _p18 = _p17._0._0;
						switch (_p18) {
							case 'launch':
								return _narkisr$elm_ui$Common_Utils$none(
									_elm_lang$core$Native_Utils.update(
										_p31,
										{
											launch: A2(_narkisr$elm_ui$Templates_Core$setName, _p30, _p19)
										}));
							case 'clear':
								return _narkisr$elm_ui$Common_Utils$none(
									_elm_lang$core$Native_Utils.update(
										_p31,
										{
											$delete: A2(_narkisr$elm_ui$Templates_Core$setName, _p29, _p19)
										}));
							default:
								return _narkisr$elm_ui$Common_Utils$none(_p31);
						}
					} else {
						break _v7_5;
					}
				case 'TemplatesAdd':
					var _p23 = _p17._0;
					var _p20 = _p23;
					if (_p20.ctor === 'Saved') {
						var _p21 = A2(_narkisr$elm_ui$Templates_Add$update, _p23, _p28);
						var newAdd = _p21._0;
						var msgs = _p21._1;
						return A2(
							_narkisr$elm_ui$Templates_Core$refreshList,
							true,
							{
								ctor: '_Tuple2',
								_0: _elm_lang$core$Native_Utils.update(
									_p31,
									{add: newAdd}),
								_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Templates_Core$TemplatesAdd, msgs)
							});
					} else {
						var _p22 = A2(_narkisr$elm_ui$Templates_Add$update, _p23, _p28);
						var newAdd = _p22._0;
						var msgs = _p22._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								_p31,
								{add: newAdd}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Templates_Core$TemplatesAdd, msgs)
						};
					}
				case 'TemplatesList':
					var _p24 = A2(_narkisr$elm_ui$Templates_List$update, _p17._0, _p16.list);
					var newList = _p24._0;
					var msgs = _p24._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p31,
							{list: newList}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Templates_Core$TemplatesList, msgs)
					};
				case 'TemplatesLaunch':
					var _p25 = A2(_narkisr$elm_ui$Templates_Launch$update, _p17._0, _p30);
					var newLaunch = _p25._0;
					var msgs = _p25._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p31,
							{launch: newLaunch}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Templates_Core$TemplatesLaunch, msgs)
					};
				case 'TemplatesDelete':
					var _p27 = _p17._0;
					var success = A3(_narkisr$elm_ui$Common_Delete$succeeded, _p27, _narkisr$elm_ui$Templates_Delete$Deleted, 'Template deleted');
					var _p26 = A2(_narkisr$elm_ui$Templates_Delete$update, _p27, _p29);
					var newDelete = _p26._0;
					var msgs = _p26._1;
					return A2(
						_narkisr$elm_ui$Templates_Core$refreshList,
						success,
						{
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								_p31,
								{$delete: newDelete}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Templates_Core$TemplatesDelete, msgs)
						});
				default:
					break _v7_5;
			}
		} while(false);
		return _narkisr$elm_ui$Common_Utils$none(_p31);
	});
var _narkisr$elm_ui$Templates_Core$update = F2(
	function (msg, _p32) {
		var _p33 = _p32;
		return A2(
			_narkisr$elm_ui$Templates_Core$navigate,
			msg,
			A2(_narkisr$elm_ui$Templates_Core$route, msg, _p33));
	});
var _narkisr$elm_ui$Templates_Core$add = F2(
	function (hyp, system) {
		return _narkisr$elm_ui$Templates_Core$TemplatesAdd(
			A2(_narkisr$elm_ui$Templates_Add$SetSystem, hyp, system));
	});
var _narkisr$elm_ui$Templates_Core$view = F2(
	function (_p34, route) {
		var _p35 = _p34;
		var _p36 = route;
		switch (_p36.ctor) {
			case 'Add':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Templates_Core$TemplatesAdd,
					_narkisr$elm_ui$Templates_Add$view(_p35.add));
			case 'List':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Templates_Core$TemplatesList,
					_narkisr$elm_ui$Templates_List$view(_p35.list));
			case 'Launch':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Templates_Core$TemplatesLaunch,
					_narkisr$elm_ui$Templates_Launch$view(_p35.launch));
			case 'Delete':
				return A2(
					_elm_lang$html$Html_App$map,
					_narkisr$elm_ui$Templates_Core$TemplatesDelete,
					_narkisr$elm_ui$Templates_Delete$view(_p35.$delete));
			default:
				return _narkisr$elm_ui$Common_Components$notImplemented;
		}
	});

var _narkisr$elm_ui$Nav_Header$dropdown = function (attrs) {
	return A2(
		_elm_lang$core$List$append,
		_elm_lang$core$Native_List.fromArray(
			[
				A2(_elm_lang$html$Html_Attributes$attribute, 'aria-expanded', 'false'),
				_elm_lang$html$Html_Attributes$class('dropdown-toggle'),
				A2(_elm_lang$html$Html_Attributes$attribute, 'data-toggle', 'dropdown'),
				_elm_lang$html$Html_Attributes$href('#')
			]),
		attrs);
};
var _narkisr$elm_ui$Nav_Header$navHeader = A2(
	_elm_lang$html$Html$div,
	_elm_lang$core$Native_List.fromArray(
		[
			_elm_lang$html$Html_Attributes$class('navbar-header')
		]),
	_elm_lang$core$Native_List.fromArray(
		[
			A2(
			_elm_lang$html$Html$img,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$src('assets/img/cropped.png'),
					_elm_lang$html$Html_Attributes$alt('Celestial'),
					_elm_lang$html$Html_Attributes$width(110),
					_elm_lang$html$Html_Attributes$height(50)
				]),
			_elm_lang$core$Native_List.fromArray(
				[]))
		]));
var _narkisr$elm_ui$Nav_Header$setSession = F2(
	function (model, session) {
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{session: session}));
	});
var _narkisr$elm_ui$Nav_Header$Model = function (a) {
	return {session: a};
};
var _narkisr$elm_ui$Nav_Header$init = _narkisr$elm_ui$Common_Utils$none(
	_narkisr$elm_ui$Nav_Header$Model(_narkisr$elm_ui$Users_Session$emptySession));
var _narkisr$elm_ui$Nav_Header$Goto = F2(
	function (a, b) {
		return {ctor: 'Goto', _0: a, _1: b};
	});
var _narkisr$elm_ui$Nav_Header$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Nav_Header$LoadSwagger = {ctor: 'LoadSwagger'};
var _narkisr$elm_ui$Nav_Header$gearsButton = function (session) {
	return _narkisr$elm_ui$Users_Session$isUser(session) ? A2(
		_elm_lang$html$Html$i,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('fa fa-gears'),
				_elm_lang$html$Html_Attributes$style(
				_elm_lang$core$Native_List.fromArray(
					[
						{ctor: '_Tuple2', _0: 'color', _1: 'gray'},
						{ctor: '_Tuple2', _0: 'pointer-events', _1: 'none'}
					]))
			]),
		_elm_lang$core$Native_List.fromArray(
			[])) : A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('dropdown pull-right')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$i,
				_narkisr$elm_ui$Nav_Header$dropdown(
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('fa fa-gears'),
							_elm_lang$html$Html_Attributes$style(
							_elm_lang$core$Native_List.fromArray(
								[
									{ctor: '_Tuple2', _0: 'color', _1: 'black'}
								]))
						])),
				_elm_lang$core$Native_List.fromArray(
					[])),
				A2(
				_elm_lang$html$Html$ul,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('dropdown-menu')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$li,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$a,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$href('#'),
										_elm_lang$html$Html_Events$onClick(
										A2(_narkisr$elm_ui$Nav_Header$Goto, _narkisr$elm_ui$Nav_Common$Users, _narkisr$elm_ui$Nav_Common$List))
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Users')
									]))
							])),
						A2(
						_elm_lang$html$Html$li,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$a,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$href('#'),
										_elm_lang$html$Html_Events$onClick(_narkisr$elm_ui$Nav_Header$LoadSwagger)
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Swagger')
									]))
							]))
					]))
			]));
};
var _narkisr$elm_ui$Nav_Header$Redirect = function (a) {
	return {ctor: 'Redirect', _0: a};
};
var _narkisr$elm_ui$Nav_Header$update = F2(
	function (msg, model) {
		var _p0 = msg;
		switch (_p0.ctor) {
			case 'SetSession':
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						model,
						{session: _p0._0}));
			case 'SignOut':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _narkisr$elm_ui$Users_Session$logout(_narkisr$elm_ui$Nav_Header$Redirect)
				};
			case 'Redirect':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _narkisr$elm_ui$Common_Redirect$redirect('login')
				};
			case 'LoadSwagger':
				return {
					ctor: '_Tuple2',
					_0: model,
					_1: _narkisr$elm_ui$Common_NewTab$newtab('swagger/index.html')
				};
			default:
				return _narkisr$elm_ui$Common_Utils$none(model);
		}
	});
var _narkisr$elm_ui$Nav_Header$SetSession = function (a) {
	return {ctor: 'SetSession', _0: a};
};
var _narkisr$elm_ui$Nav_Header$SignOut = {ctor: 'SignOut'};
var _narkisr$elm_ui$Nav_Header$topNav = function (_p1) {
	var _p2 = _p1;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('navbar-custom-menu')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$ul,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('nav navbar-nav')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$li,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('dropdown user user-menu')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$a,
								_narkisr$elm_ui$Nav_Header$dropdown(
									_elm_lang$core$Native_List.fromArray(
										[])),
								_elm_lang$core$Native_List.fromArray(
									[
										A2(
										_elm_lang$html$Html$span,
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$html$Html_Attributes$class('hidden-xs')
											]),
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$html$Html$text(_p2.username)
											]))
									])),
								A2(
								_elm_lang$html$Html$ul,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$class('dropdown-menu')
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										A2(
										_elm_lang$html$Html$li,
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$html$Html_Attributes$class('user-header')
											]),
										_elm_lang$core$Native_List.fromArray(
											[
												A2(
												_elm_lang$html$Html$p,
												_elm_lang$core$Native_List.fromArray(
													[]),
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$html$Html$text(
														A2(
															_elm_lang$core$Basics_ops['++'],
															'Environments you can access: ',
															A2(_elm_lang$core$String$join, ' ', _p2.envs)))
													]))
											])),
										A2(
										_elm_lang$html$Html$li,
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$html$Html_Attributes$class('user-body')
											]),
										_elm_lang$core$Native_List.fromArray(
											[])),
										A2(
										_elm_lang$html$Html$li,
										_elm_lang$core$Native_List.fromArray(
											[
												_elm_lang$html$Html_Attributes$class('user-footer')
											]),
										_elm_lang$core$Native_List.fromArray(
											[
												A2(
												_elm_lang$html$Html$div,
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$html$Html_Attributes$class('pull-left')
													]),
												_elm_lang$core$Native_List.fromArray(
													[
														A2(
														_elm_lang$html$Html$a,
														_elm_lang$core$Native_List.fromArray(
															[
																_elm_lang$html$Html_Attributes$class('btn btn-default btn-flat'),
																_elm_lang$html$Html_Attributes$href('#')
															]),
														_elm_lang$core$Native_List.fromArray(
															[
																_elm_lang$html$Html$text('Profile')
															]))
													])),
												A2(
												_elm_lang$html$Html$div,
												_elm_lang$core$Native_List.fromArray(
													[
														_elm_lang$html$Html_Attributes$class('pull-right')
													]),
												_elm_lang$core$Native_List.fromArray(
													[
														A2(
														_elm_lang$html$Html$a,
														_elm_lang$core$Native_List.fromArray(
															[
																_elm_lang$html$Html_Attributes$class('btn btn-default btn-flat'),
																_elm_lang$html$Html_Attributes$href('#'),
																_elm_lang$html$Html_Events$onClick(_narkisr$elm_ui$Nav_Header$SignOut)
															]),
														_elm_lang$core$Native_List.fromArray(
															[
																_elm_lang$html$Html$text('Sign out')
															]))
													]))
											]))
									]))
							])),
						A2(
						_elm_lang$html$Html$li,
						_elm_lang$core$Native_List.fromArray(
							[]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$a,
								_elm_lang$core$Native_List.fromArray(
									[
										A2(_elm_lang$html$Html_Attributes$attribute, 'data-toggle', 'control-sidebar'),
										_elm_lang$html$Html_Attributes$href('#')
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_narkisr$elm_ui$Nav_Header$gearsButton(_p2)
									]))
							]))
					]))
			]));
};
var _narkisr$elm_ui$Nav_Header$view = function (_p3) {
	var _p4 = _p3;
	return A2(
		_elm_lang$html$Html$header,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('main-header')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$a,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$href('/index.html'),
						_elm_lang$html$Html_Attributes$class('logo')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('logo-mini')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html$text('CEL')
							])),
						A2(
						_elm_lang$html$Html$span,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('logo-lg')
							]),
						_elm_lang$core$Native_List.fromArray(
							[_narkisr$elm_ui$Nav_Header$navHeader]))
					])),
				A2(
				_elm_lang$html$Html$nav,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('navbar navbar-static-top'),
						A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'navigation')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$a,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$href('#'),
								_elm_lang$html$Html_Attributes$class('sidebar-toggle'),
								A2(_elm_lang$html$Html_Attributes$attribute, 'data-toggle', 'offcanvas'),
								A2(_elm_lang$html$Html_Attributes$attribute, 'role', 'button')
							]),
						_elm_lang$core$Native_List.fromArray(
							[
								A2(
								_elm_lang$html$Html$span,
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html_Attributes$class('sr-only')
									]),
								_elm_lang$core$Native_List.fromArray(
									[
										_elm_lang$html$Html$text('Toggle navigation')
									]))
							])),
						_narkisr$elm_ui$Nav_Header$topNav(_p4.session)
					]))
			]));
};

var _narkisr$elm_ui$Nav_Side$sectionItem = F2(
	function (resource, nested) {
		return A2(
			_elm_lang$html$Html$li,
			_elm_lang$core$Native_List.fromArray(
				[]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$a,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class(
							A2(_elm_lang$core$Basics_ops['++'], resource, nested)),
							_elm_lang$html$Html_Attributes$href(
							A2(
								_elm_lang$core$Basics_ops['++'],
								'#/',
								A2(
									_elm_lang$core$Basics_ops['++'],
									resource,
									A2(_elm_lang$core$Basics_ops['++'], '/', nested))))
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$html$Html$i,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html_Attributes$class('fa fa-circle-o')
								]),
							_elm_lang$core$Native_List.fromArray(
								[])),
							_elm_lang$html$Html$text(nested)
						]))
				]));
	});
var _narkisr$elm_ui$Nav_Side$drop = F3(
	function (resource, msgs, icon) {
		return A2(
			_elm_lang$html$Html$li,
			_elm_lang$core$Native_List.fromArray(
				[
					_elm_lang$html$Html_Attributes$class('treeview')
				]),
			_elm_lang$core$Native_List.fromArray(
				[
					A2(
					_elm_lang$html$Html$a,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class(
							A2(_elm_lang$core$Basics_ops['++'], resource, 'Menu')),
							_elm_lang$html$Html_Attributes$href('#')
						]),
					_elm_lang$core$Native_List.fromArray(
						[
							A2(
							_elm_lang$html$Html$i,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html_Attributes$class(icon)
								]),
							_elm_lang$core$Native_List.fromArray(
								[])),
							A2(
							_elm_lang$html$Html$span,
							_elm_lang$core$Native_List.fromArray(
								[]),
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html$text(resource)
								])),
							A2(
							_elm_lang$html$Html$i,
							_elm_lang$core$Native_List.fromArray(
								[
									_elm_lang$html$Html_Attributes$class('fa fa-angle-left pull-right')
								]),
							_elm_lang$core$Native_List.fromArray(
								[]))
						])),
					A2(
					_elm_lang$html$Html$ul,
					_elm_lang$core$Native_List.fromArray(
						[
							_elm_lang$html$Html_Attributes$class('treeview-menu')
						]),
					A2(
						_elm_lang$core$List$map,
						function (nested) {
							return A2(_narkisr$elm_ui$Nav_Side$sectionItem, resource, nested);
						},
						msgs))
				]));
	});
var _narkisr$elm_ui$Nav_Side$adminMenus = _elm_lang$core$Native_List.fromArray(
	[
		A3(
		_narkisr$elm_ui$Nav_Side$drop,
		'systems',
		_elm_lang$core$Native_List.fromArray(
			['list', 'add']),
		'fa fa-server'),
		A3(
		_narkisr$elm_ui$Nav_Side$drop,
		'templates',
		_elm_lang$core$Native_List.fromArray(
			['list']),
		'fa fa-clone'),
		A3(
		_narkisr$elm_ui$Nav_Side$drop,
		'types',
		_elm_lang$core$Native_List.fromArray(
			['list', 'add']),
		'fa fa-archive'),
		A3(
		_narkisr$elm_ui$Nav_Side$drop,
		'jobs',
		_elm_lang$core$Native_List.fromArray(
			['list', 'stats']),
		'fa fa-tasks'),
		A3(
		_narkisr$elm_ui$Nav_Side$drop,
		'users',
		_elm_lang$core$Native_List.fromArray(
			['list', 'add']),
		'fa fa-users')
	]);
var _narkisr$elm_ui$Nav_Side$userMenus = _elm_lang$core$Native_List.fromArray(
	[
		A3(
		_narkisr$elm_ui$Nav_Side$drop,
		'systems',
		_elm_lang$core$Native_List.fromArray(
			['list', 'add']),
		'fa fa-server'),
		A3(
		_narkisr$elm_ui$Nav_Side$drop,
		'templates',
		_elm_lang$core$Native_List.fromArray(
			['list']),
		'fa fa-clone'),
		A3(
		_narkisr$elm_ui$Nav_Side$drop,
		'jobs',
		_elm_lang$core$Native_List.fromArray(
			['list', 'stats']),
		'fa fa-tasks')
	]);
var _narkisr$elm_ui$Nav_Side$view = function (_p0) {
	var _p1 = _p0;
	return A2(
		_elm_lang$html$Html$aside,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('main-sidebar')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$section,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('sidebar')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html$ul,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('sidebar-menu')
							]),
						_narkisr$elm_ui$Users_Session$isUser(_p1.session) ? _narkisr$elm_ui$Nav_Side$userMenus : _narkisr$elm_ui$Nav_Side$adminMenus)
					]))
			]));
};
var _narkisr$elm_ui$Nav_Side$update = F2(
	function (msg, model) {
		var _p2 = msg;
		if (_p2.ctor === 'SetSession') {
			return _narkisr$elm_ui$Common_Utils$none(
				_elm_lang$core$Native_Utils.update(
					model,
					{session: _p2._0}));
		} else {
			return _narkisr$elm_ui$Common_Utils$none(model);
		}
	});
var _narkisr$elm_ui$Nav_Side$Model = function (a) {
	return {session: a};
};
var _narkisr$elm_ui$Nav_Side$init = _narkisr$elm_ui$Nav_Side$Model(_narkisr$elm_ui$Users_Session$emptySession);
var _narkisr$elm_ui$Nav_Side$SetSession = function (a) {
	return {ctor: 'SetSession', _0: a};
};
var _narkisr$elm_ui$Nav_Side$NavigateTo = function (a) {
	return {ctor: 'NavigateTo', _0: a};
};

var _narkisr$elm_ui$Nav_Core$setSession = F2(
	function (_p0, session) {
		var _p1 = _p0;
		var _p2 = A2(
			_narkisr$elm_ui$Nav_Header$update,
			_narkisr$elm_ui$Nav_Header$SetSession(session),
			_p1.header);
		var newHeader = _p2._0;
		var _p3 = A2(
			_narkisr$elm_ui$Nav_Side$update,
			_narkisr$elm_ui$Nav_Side$SetSession(session),
			_p1.side);
		var newSide = _p3._0;
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				_p1,
				{side: newSide, header: newHeader}));
	});
var _narkisr$elm_ui$Nav_Core$Model = F4(
	function (a, b, c, d) {
		return {side: a, header: b, active: c, section: d};
	});
var _narkisr$elm_ui$Nav_Core$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Nav_Core$LoadSession = function (a) {
	return {ctor: 'LoadSession', _0: a};
};
var _narkisr$elm_ui$Nav_Core$init = function () {
	var _p4 = _narkisr$elm_ui$Nav_Header$init;
	var header = _p4._0;
	return {
		ctor: '_Tuple2',
		_0: A4(_narkisr$elm_ui$Nav_Core$Model, _narkisr$elm_ui$Nav_Side$init, header, _narkisr$elm_ui$Nav_Common$Systems, _narkisr$elm_ui$Nav_Common$List),
		_1: _elm_lang$core$Platform_Cmd$batch(
			_elm_lang$core$Native_List.fromArray(
				[
					_narkisr$elm_ui$Users_Session$getSession(_narkisr$elm_ui$Nav_Core$LoadSession)
				]))
	};
}();
var _narkisr$elm_ui$Nav_Core$HeaderMsg = function (a) {
	return {ctor: 'HeaderMsg', _0: a};
};
var _narkisr$elm_ui$Nav_Core$update = F2(
	function (msg, _p5) {
		var _p6 = _p5;
		var _p10 = _p6;
		var _p7 = msg;
		switch (_p7.ctor) {
			case 'SideMsg':
				var _p8 = A2(_narkisr$elm_ui$Nav_Side$update, _p7._0, _p6.side);
				var newSide = _p8._0;
				return _narkisr$elm_ui$Common_Utils$none(
					_elm_lang$core$Native_Utils.update(
						_p10,
						{side: newSide}));
			case 'HeaderMsg':
				var _p9 = A2(_narkisr$elm_ui$Nav_Header$update, _p7._0, _p6.header);
				var newHeader = _p9._0;
				var msgs = _p9._1;
				return {
					ctor: '_Tuple2',
					_0: _elm_lang$core$Native_Utils.update(
						_p10,
						{header: newHeader}),
					_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Nav_Core$HeaderMsg, msgs)
				};
			case 'LoadSession':
				return A4(
					_narkisr$elm_ui$Common_Errors$successHandler,
					_p7._0,
					_p10,
					_narkisr$elm_ui$Nav_Core$setSession(_p10),
					_narkisr$elm_ui$Nav_Core$NoOp);
			default:
				return _narkisr$elm_ui$Common_Utils$none(_p10);
		}
	});
var _narkisr$elm_ui$Nav_Core$headerView = function (_p11) {
	var _p12 = _p11;
	return A2(
		_elm_lang$html$Html_App$map,
		_narkisr$elm_ui$Nav_Core$HeaderMsg,
		_narkisr$elm_ui$Nav_Header$view(_p12.header));
};
var _narkisr$elm_ui$Nav_Core$SideMsg = function (a) {
	return {ctor: 'SideMsg', _0: a};
};
var _narkisr$elm_ui$Nav_Core$sideView = function (_p13) {
	var _p14 = _p13;
	return A2(
		_elm_lang$html$Html_App$map,
		_narkisr$elm_ui$Nav_Core$SideMsg,
		_narkisr$elm_ui$Nav_Side$view(_p14.side));
};

var _narkisr$elm_ui$Common_Editor$editorInPort = _elm_lang$core$Native_Platform.incomingPort(
	'editorInPort',
	A3(
		_elm_lang$core$Json_Decode$tuple2,
		F2(
			function (x1, x2) {
				return {ctor: '_Tuple2', _0: x1, _1: x2};
			}),
		_elm_lang$core$Json_Decode$string,
		_elm_lang$core$Json_Decode$string));
var _narkisr$elm_ui$Common_Editor$editorOutPort = _elm_lang$core$Native_Platform.outgoingPort(
	'editorOutPort',
	function (v) {
		return [v._0, v._1];
	});
var _narkisr$elm_ui$Common_Editor$Load = function (a) {
	return {ctor: 'Load', _0: a};
};
var _narkisr$elm_ui$Common_Editor$NoOp = {ctor: 'NoOp'};

var _sporto$hop$Hop_Location$queryKVtoTuple = function (kv) {
	var splitted = A2(_elm_lang$core$String$split, '=', kv);
	var first = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(splitted));
	var firstDecoded = _evancz$elm_http$Http$uriDecode(first);
	var second = A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(
			A2(_elm_lang$core$List$drop, 1, splitted)));
	var secondDecoded = _evancz$elm_http$Http$uriDecode(second);
	return {ctor: '_Tuple2', _0: firstDecoded, _1: secondDecoded};
};
var _sporto$hop$Hop_Location$extractQuery = function (route) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(
			A2(
				_elm_lang$core$List$drop,
				1,
				A2(_elm_lang$core$String$split, '?', route))));
};
var _sporto$hop$Hop_Location$parseQuery = function (route) {
	return _elm_lang$core$Dict$fromList(
		A2(
			_elm_lang$core$List$map,
			_sporto$hop$Hop_Location$queryKVtoTuple,
			A2(
				_elm_lang$core$List$filter,
				function (_p0) {
					return _elm_lang$core$Basics$not(
						_elm_lang$core$String$isEmpty(_p0));
				},
				A2(
					_elm_lang$core$String$split,
					'&',
					_sporto$hop$Hop_Location$extractQuery(route)))));
};
var _sporto$hop$Hop_Location$extractPath = function (route) {
	return A2(
		_elm_lang$core$Maybe$withDefault,
		'',
		_elm_lang$core$List$head(
			A2(
				_elm_lang$core$String$split,
				'?',
				A2(
					_elm_lang$core$Maybe$withDefault,
					'',
					_elm_lang$core$List$head(
						_elm_lang$core$List$reverse(
							A2(_elm_lang$core$String$split, '#', route)))))));
};
var _sporto$hop$Hop_Location$parsePath = function (route) {
	return A2(
		_elm_lang$core$List$filter,
		function (segment) {
			return _elm_lang$core$Basics$not(
				_elm_lang$core$String$isEmpty(segment));
		},
		A2(
			_elm_lang$core$String$split,
			'/',
			_sporto$hop$Hop_Location$extractPath(route)));
};
var _sporto$hop$Hop_Location$parse = function (route) {
	return {
		path: _sporto$hop$Hop_Location$parsePath(route),
		query: _sporto$hop$Hop_Location$parseQuery(route)
	};
};
var _sporto$hop$Hop_Location$fromUrlString = F2(
	function (config, href) {
		var withoutProtocol = A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(
				_elm_lang$core$List$reverse(
					A2(_elm_lang$core$String$split, '//', href))));
		var withoutDomain = A2(
			_elm_lang$core$String$append,
			'/',
			A2(
				_elm_lang$core$String$join,
				'/',
				A2(
					_elm_lang$core$Maybe$withDefault,
					_elm_lang$core$Native_List.fromArray(
						[]),
					_elm_lang$core$List$tail(
						A2(_elm_lang$core$String$split, '/', withoutProtocol)))));
		return config.hash ? A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(
				A2(
					_elm_lang$core$List$drop,
					1,
					A2(_elm_lang$core$String$split, '#', withoutDomain)))) : A2(
			_elm_lang$core$Maybe$withDefault,
			'',
			_elm_lang$core$List$head(
				A2(_elm_lang$core$String$split, '#', withoutDomain)));
	});
var _sporto$hop$Hop_Location$locationStringWithoutBase = F2(
	function (config, locationString) {
		var regex = _elm_lang$core$Regex$regex(config.basePath);
		return A4(
			_elm_lang$core$Regex$replace,
			_elm_lang$core$Regex$AtMost(1),
			regex,
			_elm_lang$core$Basics$always(''),
			locationString);
	});
var _sporto$hop$Hop_Location$fromUrl = F2(
	function (config, href) {
		var relevantLocationString = A2(_sporto$hop$Hop_Location$fromUrlString, config, href);
		return config.hash ? _sporto$hop$Hop_Location$parse(relevantLocationString) : _sporto$hop$Hop_Location$parse(
			A2(_sporto$hop$Hop_Location$locationStringWithoutBase, config, relevantLocationString));
	});
var _sporto$hop$Hop_Location$queryFromLocation = function (location) {
	return _elm_lang$core$Dict$isEmpty(location.query) ? '' : A2(
		_elm_lang$core$String$append,
		'?',
		A2(
			_elm_lang$core$String$join,
			'&',
			A2(
				_elm_lang$core$List$map,
				function (_p1) {
					var _p2 = _p1;
					return A2(
						_elm_lang$core$Basics_ops['++'],
						_p2._0,
						A2(_elm_lang$core$Basics_ops['++'], '=', _p2._1));
				},
				A2(
					_elm_lang$core$List$map,
					function (_p3) {
						var _p4 = _p3;
						return {
							ctor: '_Tuple2',
							_0: _evancz$elm_http$Http$uriEncode(_p4._0),
							_1: _evancz$elm_http$Http$uriEncode(_p4._1)
						};
					},
					_elm_lang$core$Dict$toList(location.query)))));
};
var _sporto$hop$Hop_Location$locationFromUser = function (route) {
	var normalized = A2(_elm_lang$core$String$startsWith, '#', route) ? route : A2(_elm_lang$core$Basics_ops['++'], '#', route);
	return _sporto$hop$Hop_Location$parse(normalized);
};
var _sporto$hop$Hop_Location$dedupSlash = A3(
	_elm_lang$core$Regex$replace,
	_elm_lang$core$Regex$All,
	_elm_lang$core$Regex$regex('/+'),
	function (_p5) {
		return '/';
	});
var _sporto$hop$Hop_Location$locationToFullPath = F2(
	function (config, location) {
		var query = _sporto$hop$Hop_Location$queryFromLocation(location);
		var joined = A2(_elm_lang$core$String$join, '/', location.path);
		var url = config.hash ? A2(
			_elm_lang$core$Basics_ops['++'],
			'#/',
			A2(_elm_lang$core$Basics_ops['++'], joined, query)) : (_elm_lang$core$String$isEmpty(config.basePath) ? A2(
			_elm_lang$core$Basics_ops['++'],
			'/',
			A2(_elm_lang$core$Basics_ops['++'], joined, query)) : (_elm_lang$core$String$isEmpty(joined) ? A2(
			_elm_lang$core$Basics_ops['++'],
			'/',
			A2(_elm_lang$core$Basics_ops['++'], config.basePath, query)) : A2(
			_elm_lang$core$Basics_ops['++'],
			'/',
			A2(
				_elm_lang$core$Basics_ops['++'],
				config.basePath,
				A2(
					_elm_lang$core$Basics_ops['++'],
					'/',
					A2(_elm_lang$core$Basics_ops['++'], joined, query))))));
		return _sporto$hop$Hop_Location$dedupSlash(url);
	});

var _sporto$hop$Hop_Matching$matchPathWithPathList = F3(
	function (routeParsers, notFoundAction, path) {
		matchPathWithPathList:
		while (true) {
			var _p0 = routeParsers;
			if (_p0.ctor === '[]') {
				return notFoundAction;
			} else {
				if (_p0._1.ctor === '[]') {
					var _p1 = A2(_Bogdanp$elm_combine$Combine$parse, _p0._0.parser, path);
					if (_p1._0.ctor === 'Ok') {
						return _p1._0._0;
					} else {
						return notFoundAction;
					}
				} else {
					var _p2 = A2(_Bogdanp$elm_combine$Combine$parse, _p0._0.parser, path);
					if (_p2._0.ctor === 'Ok') {
						return _p2._0._0;
					} else {
						var _v3 = _p0._1,
							_v4 = notFoundAction,
							_v5 = path;
						routeParsers = _v3;
						notFoundAction = _v4;
						path = _v5;
						continue matchPathWithPathList;
					}
				}
			}
		}
	});
var _sporto$hop$Hop_Matching$matchPath = F2(
	function (config, path) {
		return A3(_sporto$hop$Hop_Matching$matchPathWithPathList, config.matchers, config.notFound, path);
	});
var _sporto$hop$Hop_Matching$matchLocation = F2(
	function (config, location) {
		var pathString = A2(
			_elm_lang$core$String$join,
			'/',
			A2(_elm_lang$core$List_ops['::'], '', location.path));
		return A2(_sporto$hop$Hop_Matching$matchPath, config, pathString);
	});

var _sporto$hop$Hop$clearQuery = function (location) {
	return _elm_lang$core$Native_Utils.update(
		location,
		{query: _elm_lang$core$Dict$empty});
};
var _sporto$hop$Hop$removeQuery = F2(
	function (key, location) {
		var updatedQuery = A2(_elm_lang$core$Dict$remove, key, location.query);
		return _elm_lang$core$Native_Utils.update(
			location,
			{query: updatedQuery});
	});
var _sporto$hop$Hop$setQuery = F2(
	function (query, location) {
		return _elm_lang$core$Native_Utils.update(
			location,
			{query: query});
	});
var _sporto$hop$Hop$addQuery = F2(
	function (query, location) {
		var updatedQuery = A2(_elm_lang$core$Dict$union, query, location.query);
		return _elm_lang$core$Native_Utils.update(
			location,
			{query: updatedQuery});
	});
var _sporto$hop$Hop$makeUrlFromLocation = F2(
	function (config, location) {
		var fullPath = A2(_sporto$hop$Hop_Location$locationToFullPath, config, location);
		var path = _elm_lang$core$Native_Utils.eq(fullPath, '') ? '/' : fullPath;
		return path;
	});
var _sporto$hop$Hop$makeUrl = F2(
	function (config, route) {
		return A2(
			_sporto$hop$Hop$makeUrlFromLocation,
			config,
			_sporto$hop$Hop_Location$locationFromUser(route));
	});
var _sporto$hop$Hop$matcherToPath = F2(
	function (matcher, inputs) {
		var makeSegment = F2(
			function (segment, input) {
				return A2(_elm_lang$core$Basics_ops['++'], segment, input);
			});
		var inputs$ = A2(
			_elm_lang$core$List$append,
			inputs,
			_elm_lang$core$Native_List.fromArray(
				['']));
		var path = A2(
			_elm_lang$core$String$join,
			'',
			A3(_elm_lang$core$List$map2, makeSegment, matcher.segments, inputs$));
		return path;
	});
var _sporto$hop$Hop$matchUrl = F2(
	function (config, url) {
		var location = A2(_sporto$hop$Hop_Location$fromUrl, config, url);
		return {
			ctor: '_Tuple2',
			_0: A2(_sporto$hop$Hop_Matching$matchLocation, config, location),
			_1: location
		};
	});

var _narkisr$elm_ui$Routing$notJobs = function (route) {
	var _p0 = route;
	if (_p0.ctor === 'JobsRoute') {
		return false;
	} else {
		return true;
	}
};
var _narkisr$elm_ui$Routing$NotFoundRoute = {ctor: 'NotFoundRoute'};
var _narkisr$elm_ui$Routing$UsersRoute = function (a) {
	return {ctor: 'UsersRoute', _0: a};
};
var _narkisr$elm_ui$Routing$matcherUsers = A3(_sporto$hop$Hop_Matchers$nested1, _narkisr$elm_ui$Routing$UsersRoute, '/users', _narkisr$elm_ui$Users_Routing$matchers);
var _narkisr$elm_ui$Routing$TemplatesRoute = function (a) {
	return {ctor: 'TemplatesRoute', _0: a};
};
var _narkisr$elm_ui$Routing$matcherTemplates = A3(_sporto$hop$Hop_Matchers$nested1, _narkisr$elm_ui$Routing$TemplatesRoute, '/templates', _narkisr$elm_ui$Templates_Routing$matchers);
var _narkisr$elm_ui$Routing$JobsRoute = function (a) {
	return {ctor: 'JobsRoute', _0: a};
};
var _narkisr$elm_ui$Routing$matcherJobs = A3(_sporto$hop$Hop_Matchers$nested1, _narkisr$elm_ui$Routing$JobsRoute, '/jobs', _narkisr$elm_ui$Jobs_Routing$matchers);
var _narkisr$elm_ui$Routing$TypesRoute = function (a) {
	return {ctor: 'TypesRoute', _0: a};
};
var _narkisr$elm_ui$Routing$matcherTypes = A3(_sporto$hop$Hop_Matchers$nested1, _narkisr$elm_ui$Routing$TypesRoute, '/types', _narkisr$elm_ui$Types_Routing$matchers);
var _narkisr$elm_ui$Routing$SystemsRoute = function (a) {
	return {ctor: 'SystemsRoute', _0: a};
};
var _narkisr$elm_ui$Routing$defaultRoute = _narkisr$elm_ui$Routing$SystemsRoute(_narkisr$elm_ui$Systems_Routing$List);
var _narkisr$elm_ui$Routing$matcherSystems = A3(_sporto$hop$Hop_Matchers$nested1, _narkisr$elm_ui$Routing$SystemsRoute, '/systems', _narkisr$elm_ui$Systems_Routing$matchers);
var _narkisr$elm_ui$Routing$matchers = _elm_lang$core$Native_List.fromArray(
	[_narkisr$elm_ui$Routing$matcherSystems, _narkisr$elm_ui$Routing$matcherTypes, _narkisr$elm_ui$Routing$matcherTemplates, _narkisr$elm_ui$Routing$matcherJobs, _narkisr$elm_ui$Routing$matcherUsers]);
var _narkisr$elm_ui$Routing$config = {basePath: '\\?\\#\\/', hash: true, matchers: _narkisr$elm_ui$Routing$matchers, notFound: _narkisr$elm_ui$Routing$NotFoundRoute};
var _narkisr$elm_ui$Routing$urlParser = _elm_lang$navigation$Navigation$makeParser(
	function (_p1) {
		return A2(
			_sporto$hop$Hop$matchUrl,
			_narkisr$elm_ui$Routing$config,
			function (_) {
				return _.href;
			}(_p1));
	});

var _narkisr$elm_ui$Application$urlUpdate = F2(
	function (_p0, model) {
		var _p1 = _p0;
		return _narkisr$elm_ui$Common_Utils$none(
			_elm_lang$core$Native_Utils.update(
				model,
				{route: _p1._0, location: _p1._1}));
	});
var _narkisr$elm_ui$Application$navigate = F2(
	function (_p2, msg) {
		var _p3 = _p2;
		var _p6 = _p3._1;
		var _p5 = _p3._0;
		var _p4 = _p3._0.navChange;
		if (_p4.ctor === 'Just') {
			var withNavChange = _elm_lang$core$Native_List.fromArray(
				[
					A2(_elm_lang$core$Platform_Cmd$map, msg, _p6),
					_elm_lang$navigation$Navigation$newUrl(
					A2(_sporto$hop$Hop$makeUrl, _narkisr$elm_ui$Routing$config, _p4._0))
				]);
			return {
				ctor: '_Tuple2',
				_0: _elm_lang$core$Native_Utils.update(
					_p5,
					{navChange: _elm_lang$core$Maybe$Nothing}),
				_1: _elm_lang$core$Platform_Cmd$batch(withNavChange)
			};
		} else {
			return {
				ctor: '_Tuple2',
				_0: _p5,
				_1: A2(_elm_lang$core$Platform_Cmd$map, msg, _p6)
			};
		}
	});
var _narkisr$elm_ui$Application$Model = F9(
	function (a, b, c, d, e, f, g, h, i) {
		return {systems: a, stacks: b, jobs: c, types: d, templates: e, users: f, nav: g, route: h, location: i};
	});
var _narkisr$elm_ui$Application$NoOp = {ctor: 'NoOp'};
var _narkisr$elm_ui$Application$UsersMsg = function (a) {
	return {ctor: 'UsersMsg', _0: a};
};
var _narkisr$elm_ui$Application$TemplatesMsg = function (a) {
	return {ctor: 'TemplatesMsg', _0: a};
};
var _narkisr$elm_ui$Application$TypesMsg = function (a) {
	return {ctor: 'TypesMsg', _0: a};
};
var _narkisr$elm_ui$Application$JobsMsg = function (a) {
	return {ctor: 'JobsMsg', _0: a};
};
var _narkisr$elm_ui$Application$StacksMsg = function (a) {
	return {ctor: 'StacksMsg', _0: a};
};
var _narkisr$elm_ui$Application$NavMsg = function (a) {
	return {ctor: 'NavMsg', _0: a};
};
var _narkisr$elm_ui$Application$SystemsMsg = function (a) {
	return {ctor: 'SystemsMsg', _0: a};
};
var _narkisr$elm_ui$Application$init = function (_p7) {
	var _p8 = _p7;
	var _p9 = _narkisr$elm_ui$Stacks_Core$init;
	var stacks = _p9._0;
	var stacksMsg = _p9._1;
	var _p10 = _narkisr$elm_ui$Systems_Core$init;
	var systems = _p10._0;
	var systemsMsg = _p10._1;
	var _p11 = _narkisr$elm_ui$Nav_Core$init;
	var nav = _p11._0;
	var navMsg = _p11._1;
	var _p12 = _narkisr$elm_ui$Templates_Core$init;
	var templates = _p12._0;
	var templatesMsg = _p12._1;
	var _p13 = _narkisr$elm_ui$Users_Core$init;
	var users = _p13._0;
	var usersMsg = _p13._1;
	var _p14 = _narkisr$elm_ui$Types_Core$init;
	var types = _p14._0;
	var typesMsg = _p14._1;
	var _p15 = _narkisr$elm_ui$Jobs_Core$init;
	var jobs = _p15._0;
	var jobsMsg = _p15._1;
	var msgs = _elm_lang$core$Native_List.fromArray(
		[
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Application$TemplatesMsg, templatesMsg),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Application$TypesMsg, typesMsg),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Application$UsersMsg, usersMsg),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Application$SystemsMsg, systemsMsg),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Application$StacksMsg, stacksMsg),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Application$NavMsg, navMsg),
			A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Application$JobsMsg, jobsMsg)
		]);
	return {
		ctor: '_Tuple2',
		_0: A9(_narkisr$elm_ui$Application$Model, systems, stacks, jobs, types, templates, users, nav, _p8._0, _p8._1),
		_1: _elm_lang$core$Platform_Cmd$batch(msgs)
	};
};
var _narkisr$elm_ui$Application$activeView = function (_p16) {
	var _p17 = _p16;
	var _p19 = _p17.systems;
	var _p18 = A2(_elm_lang$core$Debug$log, '', _p17.route);
	switch (_p18.ctor) {
		case 'SystemsRoute':
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Application$SystemsMsg,
				A2(_narkisr$elm_ui$Systems_Core$view, _p19, _p18._0));
		case 'TypesRoute':
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Application$TypesMsg,
				A2(_narkisr$elm_ui$Types_Core$view, _p17.types, _p18._0));
		case 'TemplatesRoute':
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Application$TemplatesMsg,
				A2(_narkisr$elm_ui$Templates_Core$view, _p17.templates, _p18._0));
		case 'JobsRoute':
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Application$JobsMsg,
				A2(_narkisr$elm_ui$Jobs_Core$view, _p17.jobs, _p18._0));
		case 'UsersRoute':
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Application$UsersMsg,
				A2(_narkisr$elm_ui$Users_Core$view, _p17.users, _p18._0));
		default:
			return A2(
				_elm_lang$html$Html_App$map,
				_narkisr$elm_ui$Application$SystemsMsg,
				A2(_narkisr$elm_ui$Systems_Core$view, _p19, _narkisr$elm_ui$Systems_Routing$List));
	}
};
var _narkisr$elm_ui$Application$view = function (_p20) {
	var _p21 = _p20;
	var _p22 = _p21.nav;
	return A2(
		_elm_lang$html$Html$div,
		_elm_lang$core$Native_List.fromArray(
			[
				_elm_lang$html$Html_Attributes$class('wrapper')
			]),
		_elm_lang$core$Native_List.fromArray(
			[
				A2(
				_elm_lang$html$Html$div,
				_elm_lang$core$Native_List.fromArray(
					[
						_elm_lang$html$Html_Attributes$class('content-wrapper')
					]),
				_elm_lang$core$Native_List.fromArray(
					[
						A2(
						_elm_lang$html$Html_App$map,
						_narkisr$elm_ui$Application$NavMsg,
						_narkisr$elm_ui$Nav_Core$headerView(_p22)),
						A2(
						_elm_lang$html$Html$section,
						_elm_lang$core$Native_List.fromArray(
							[
								_elm_lang$html$Html_Attributes$class('content')
							]),
						_narkisr$elm_ui$Common_Components$asList(
							_narkisr$elm_ui$Application$activeView(_p21))),
						A2(
						_elm_lang$html$Html_App$map,
						_narkisr$elm_ui$Application$NavMsg,
						_narkisr$elm_ui$Nav_Core$sideView(_p22))
					]))
			]));
};
var _narkisr$elm_ui$Application$NavigateTo = function (a) {
	return {ctor: 'NavigateTo', _0: a};
};
var _narkisr$elm_ui$Application$EditMsg = function (a) {
	return {ctor: 'EditMsg', _0: a};
};
var _narkisr$elm_ui$Application$MenuMsg = function (a) {
	return {ctor: 'MenuMsg', _0: a};
};
var _narkisr$elm_ui$Application$HopMsg = function (a) {
	return {ctor: 'HopMsg', _0: a};
};
var _narkisr$elm_ui$Application$route = F2(
	function (msg, _p23) {
		var _p24 = _p23;
		var _p35 = _p24;
		var _p25 = msg;
		_v8_8:
		do {
			switch (_p25.ctor) {
				case 'JobsMsg':
					var _p27 = _p25._0;
					if (_narkisr$elm_ui$Jobs_Core$isPolling(_p27) && _narkisr$elm_ui$Routing$notJobs(_p24.route)) {
						return _narkisr$elm_ui$Common_Utils$none(_p35);
					} else {
						var _p26 = A2(_narkisr$elm_ui$Jobs_Core$update, _p27, _p24.jobs);
						var newJob = _p26._0;
						var msgs = _p26._1;
						return {
							ctor: '_Tuple2',
							_0: _elm_lang$core$Native_Utils.update(
								_p35,
								{jobs: newJob}),
							_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Application$JobsMsg, msgs)
						};
					}
				case 'TypesMsg':
					var _p28 = A2(
						_narkisr$elm_ui$Application$navigate,
						A2(_narkisr$elm_ui$Types_Core$update, _p25._0, _p24.types),
						_narkisr$elm_ui$Application$TypesMsg);
					var newTypes = _p28._0;
					var msgs = _p28._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p35,
							{types: newTypes}),
						_1: msgs
					};
				case 'UsersMsg':
					var _p29 = A2(
						_narkisr$elm_ui$Application$navigate,
						A2(_narkisr$elm_ui$Users_Core$update, _p25._0, _p24.users),
						_narkisr$elm_ui$Application$UsersMsg);
					var newUsers = _p29._0;
					var msgs = _p29._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p35,
							{users: newUsers}),
						_1: msgs
					};
				case 'StacksMsg':
					var _p30 = A2(_narkisr$elm_ui$Stacks_Core$update, _p25._0, _p24.stacks);
					var newStacks = _p30._0;
					var msgs = _p30._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p35,
							{stacks: newStacks}),
						_1: A2(_elm_lang$core$Platform_Cmd$map, _narkisr$elm_ui$Application$StacksMsg, msgs)
					};
				case 'TemplatesMsg':
					var _p31 = A2(
						_narkisr$elm_ui$Application$navigate,
						A2(_narkisr$elm_ui$Templates_Core$update, _p25._0, _p24.templates),
						_narkisr$elm_ui$Application$TemplatesMsg);
					var newTemplates = _p31._0;
					var msgs = _p31._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p35,
							{templates: newTemplates}),
						_1: msgs
					};
				case 'SystemsMsg':
					var _p32 = A2(
						_narkisr$elm_ui$Application$navigate,
						A2(_narkisr$elm_ui$Systems_Core$update, _p25._0, _p24.systems),
						_narkisr$elm_ui$Application$SystemsMsg);
					var newSystems = _p32._0;
					var msgs = _p32._1;
					return {
						ctor: '_Tuple2',
						_0: _elm_lang$core$Native_Utils.update(
							_p35,
							{systems: newSystems}),
						_1: msgs
					};
				case 'ApplyRoute':
					if (_p25._0.ctor === '_Tuple2') {
						var _p34 = _p25._0._0;
						var _p33 = _p34;
						if (_p33.ctor === 'NotFoundRoute') {
							return {
								ctor: '_Tuple2',
								_0: _p35,
								_1: A2(
									_elm_lang$core$Platform_Cmd$map,
									_narkisr$elm_ui$Application$HopMsg,
									_elm_lang$navigation$Navigation$modifyUrl('systems/list'))
							};
						} else {
							return _narkisr$elm_ui$Common_Utils$none(
								_elm_lang$core$Native_Utils.update(
									_p35,
									{route: _p34, location: _p25._0._1}));
						}
					} else {
						break _v8_8;
					}
				case 'HopMsg':
					if (_p25._0.ctor === '_Tuple0') {
						return _narkisr$elm_ui$Common_Utils$none(_p35);
					} else {
						break _v8_8;
					}
				default:
					break _v8_8;
			}
		} while(false);
		return _narkisr$elm_ui$Common_Utils$none(_p35);
	});
var _narkisr$elm_ui$Application$update = F2(
	function (msg, model) {
		return A2(_narkisr$elm_ui$Application$route, msg, model);
	});
var _narkisr$elm_ui$Application$ApplyRoute = function (a) {
	return {ctor: 'ApplyRoute', _0: a};
};

var _narkisr$elm_ui$Common_Menu$intoMsg = function (msg) {
	var _p0 = msg;
	if ((_p0.ctor === 'MenuMsg') && (_p0._0.ctor === '_Tuple3')) {
		var _p3 = _p0._0._2;
		var _p2 = _p0._0._1;
		var _p1 = _p0._0._0;
		switch (_p1) {
			case 'Systems':
				return _narkisr$elm_ui$Application$SystemsMsg(
					_narkisr$elm_ui$Systems_Core$SystemsLaunch(
						_narkisr$elm_ui$Systems_Launch$SetupJob(_p2)));
			case 'Templates':
				return _narkisr$elm_ui$Application$TemplatesMsg(
					_narkisr$elm_ui$Templates_Core$SetupJob(
						{ctor: '_Tuple2', _0: _p2, _1: _p3}));
			case 'Types':
				return _narkisr$elm_ui$Application$TypesMsg(
					_narkisr$elm_ui$Types_Core$MenuClick(
						{ctor: '_Tuple2', _0: _p2, _1: _p3}));
			case 'Users':
				return _narkisr$elm_ui$Application$UsersMsg(
					_narkisr$elm_ui$Users_Core$MenuClick(
						{ctor: '_Tuple2', _0: _p2, _1: _p3}));
			default:
				return _narkisr$elm_ui$Application$NoOp;
		}
	} else {
		return msg;
	}
};
var _narkisr$elm_ui$Common_Menu$menuPort = _elm_lang$core$Native_Platform.incomingPort(
	'menuPort',
	A4(
		_elm_lang$core$Json_Decode$tuple3,
		F3(
			function (x1, x2, x3) {
				return {ctor: '_Tuple3', _0: x1, _1: x2, _2: x3};
			}),
		_elm_lang$core$Json_Decode$string,
		_elm_lang$core$Json_Decode$string,
		_elm_lang$core$Json_Decode$string));

var _narkisr$elm_ui$Main$subscriptions = function (model) {
	return _elm_lang$core$Platform_Sub$batch(
		_elm_lang$core$Native_List.fromArray(
			[
				_narkisr$elm_ui$Common_Editor$editorInPort(
				function (_p0) {
					return _narkisr$elm_ui$Application$EditMsg(
						_narkisr$elm_ui$Common_Editor$Load(_p0));
				}),
				A2(
				_elm_lang$core$Platform_Sub$map,
				function (v) {
					return _narkisr$elm_ui$Common_Menu$intoMsg(v);
				},
				_narkisr$elm_ui$Common_Menu$menuPort(_narkisr$elm_ui$Application$MenuMsg))
			]));
};
var _narkisr$elm_ui$Main$main = {
	main: A2(
		_elm_lang$navigation$Navigation$program,
		_narkisr$elm_ui$Routing$urlParser,
		{init: _narkisr$elm_ui$Application$init, view: _narkisr$elm_ui$Application$view, update: _narkisr$elm_ui$Application$update, urlUpdate: _narkisr$elm_ui$Application$urlUpdate, subscriptions: _narkisr$elm_ui$Main$subscriptions})
};
var _narkisr$elm_ui$Main$parser = _elm_lang$core$Native_Platform.outgoingPort(
	'parser',
	function (v) {
		return v;
	});

var _narkisr$elm_ui$Now$None = {ctor: 'None'};

var Elm = {};
Elm['Admin'] = Elm['Admin'] || {};
Elm['Admin']['Core'] = Elm['Admin']['Core'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Admin']['Core'], 'Admin.Core', typeof _narkisr$elm_ui$Admin_Core$main === 'undefined' ? null : _narkisr$elm_ui$Admin_Core$main);
Elm['Application'] = Elm['Application'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Application'], 'Application', typeof _narkisr$elm_ui$Application$main === 'undefined' ? null : _narkisr$elm_ui$Application$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['Components'] = Elm['Common']['Components'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['Components'], 'Common.Components', typeof _narkisr$elm_ui$Common_Components$main === 'undefined' ? null : _narkisr$elm_ui$Common_Components$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['Delete'] = Elm['Common']['Delete'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['Delete'], 'Common.Delete', typeof _narkisr$elm_ui$Common_Delete$main === 'undefined' ? null : _narkisr$elm_ui$Common_Delete$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['Editor'] = Elm['Common']['Editor'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['Editor'], 'Common.Editor', typeof _narkisr$elm_ui$Common_Editor$main === 'undefined' ? null : _narkisr$elm_ui$Common_Editor$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['Errors'] = Elm['Common']['Errors'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['Errors'], 'Common.Errors', typeof _narkisr$elm_ui$Common_Errors$main === 'undefined' ? null : _narkisr$elm_ui$Common_Errors$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['FormComponents'] = Elm['Common']['FormComponents'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['FormComponents'], 'Common.FormComponents', typeof _narkisr$elm_ui$Common_FormComponents$main === 'undefined' ? null : _narkisr$elm_ui$Common_FormComponents$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['FormWizard'] = Elm['Common']['FormWizard'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['FormWizard'], 'Common.FormWizard', typeof _narkisr$elm_ui$Common_FormWizard$main === 'undefined' ? null : _narkisr$elm_ui$Common_FormWizard$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['Http'] = Elm['Common']['Http'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['Http'], 'Common.Http', typeof _narkisr$elm_ui$Common_Http$main === 'undefined' ? null : _narkisr$elm_ui$Common_Http$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['Menu'] = Elm['Common']['Menu'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['Menu'], 'Common.Menu', typeof _narkisr$elm_ui$Common_Menu$main === 'undefined' ? null : _narkisr$elm_ui$Common_Menu$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['Model'] = Elm['Common']['Model'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['Model'], 'Common.Model', typeof _narkisr$elm_ui$Common_Model$main === 'undefined' ? null : _narkisr$elm_ui$Common_Model$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['NewTab'] = Elm['Common']['NewTab'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['NewTab'], 'Common.NewTab', typeof _narkisr$elm_ui$Common_NewTab$main === 'undefined' ? null : _narkisr$elm_ui$Common_NewTab$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['Redirect'] = Elm['Common']['Redirect'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['Redirect'], 'Common.Redirect', typeof _narkisr$elm_ui$Common_Redirect$main === 'undefined' ? null : _narkisr$elm_ui$Common_Redirect$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['Summary'] = Elm['Common']['Summary'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['Summary'], 'Common.Summary', typeof _narkisr$elm_ui$Common_Summary$main === 'undefined' ? null : _narkisr$elm_ui$Common_Summary$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['Utils'] = Elm['Common']['Utils'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['Utils'], 'Common.Utils', typeof _narkisr$elm_ui$Common_Utils$main === 'undefined' ? null : _narkisr$elm_ui$Common_Utils$main);
Elm['Common'] = Elm['Common'] || {};
Elm['Common']['Wizard'] = Elm['Common']['Wizard'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Common']['Wizard'], 'Common.Wizard', typeof _narkisr$elm_ui$Common_Wizard$main === 'undefined' ? null : _narkisr$elm_ui$Common_Wizard$main);
Elm['Environments'] = Elm['Environments'] || {};
Elm['Environments']['List'] = Elm['Environments']['List'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Environments']['List'], 'Environments.List', typeof _narkisr$elm_ui$Environments_List$main === 'undefined' ? null : _narkisr$elm_ui$Environments_List$main);
Elm['Jobs'] = Elm['Jobs'] || {};
Elm['Jobs']['Common'] = Elm['Jobs']['Common'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Jobs']['Common'], 'Jobs.Common', typeof _narkisr$elm_ui$Jobs_Common$main === 'undefined' ? null : _narkisr$elm_ui$Jobs_Common$main);
Elm['Jobs'] = Elm['Jobs'] || {};
Elm['Jobs']['Core'] = Elm['Jobs']['Core'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Jobs']['Core'], 'Jobs.Core', typeof _narkisr$elm_ui$Jobs_Core$main === 'undefined' ? null : _narkisr$elm_ui$Jobs_Core$main);
Elm['Jobs'] = Elm['Jobs'] || {};
Elm['Jobs']['List'] = Elm['Jobs']['List'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Jobs']['List'], 'Jobs.List', typeof _narkisr$elm_ui$Jobs_List$main === 'undefined' ? null : _narkisr$elm_ui$Jobs_List$main);
Elm['Jobs'] = Elm['Jobs'] || {};
Elm['Jobs']['Routing'] = Elm['Jobs']['Routing'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Jobs']['Routing'], 'Jobs.Routing', typeof _narkisr$elm_ui$Jobs_Routing$main === 'undefined' ? null : _narkisr$elm_ui$Jobs_Routing$main);
Elm['Jobs'] = Elm['Jobs'] || {};
Elm['Jobs']['Stats'] = Elm['Jobs']['Stats'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Jobs']['Stats'], 'Jobs.Stats', typeof _narkisr$elm_ui$Jobs_Stats$main === 'undefined' ? null : _narkisr$elm_ui$Jobs_Stats$main);
Elm['Main'] = Elm['Main'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Main'], 'Main', typeof _narkisr$elm_ui$Main$main === 'undefined' ? null : _narkisr$elm_ui$Main$main);
Elm['Nav'] = Elm['Nav'] || {};
Elm['Nav']['Common'] = Elm['Nav']['Common'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Nav']['Common'], 'Nav.Common', typeof _narkisr$elm_ui$Nav_Common$main === 'undefined' ? null : _narkisr$elm_ui$Nav_Common$main);
Elm['Nav'] = Elm['Nav'] || {};
Elm['Nav']['Core'] = Elm['Nav']['Core'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Nav']['Core'], 'Nav.Core', typeof _narkisr$elm_ui$Nav_Core$main === 'undefined' ? null : _narkisr$elm_ui$Nav_Core$main);
Elm['Nav'] = Elm['Nav'] || {};
Elm['Nav']['Header'] = Elm['Nav']['Header'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Nav']['Header'], 'Nav.Header', typeof _narkisr$elm_ui$Nav_Header$main === 'undefined' ? null : _narkisr$elm_ui$Nav_Header$main);
Elm['Nav'] = Elm['Nav'] || {};
Elm['Nav']['Side'] = Elm['Nav']['Side'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Nav']['Side'], 'Nav.Side', typeof _narkisr$elm_ui$Nav_Side$main === 'undefined' ? null : _narkisr$elm_ui$Nav_Side$main);
Elm['Now'] = Elm['Now'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Now'], 'Now', typeof _narkisr$elm_ui$Now$main === 'undefined' ? null : _narkisr$elm_ui$Now$main);
Elm['Pager'] = Elm['Pager'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Pager'], 'Pager', typeof _narkisr$elm_ui$Pager$main === 'undefined' ? null : _narkisr$elm_ui$Pager$main);
Elm['Routing'] = Elm['Routing'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Routing'], 'Routing', typeof _narkisr$elm_ui$Routing$main === 'undefined' ? null : _narkisr$elm_ui$Routing$main);
Elm['Search'] = Elm['Search'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Search'], 'Search', typeof _narkisr$elm_ui$Search$main === 'undefined' ? null : _narkisr$elm_ui$Search$main);
Elm['Stacks'] = Elm['Stacks'] || {};
Elm['Stacks']['Add'] = Elm['Stacks']['Add'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Stacks']['Add'], 'Stacks.Add', typeof _narkisr$elm_ui$Stacks_Add$main === 'undefined' ? null : _narkisr$elm_ui$Stacks_Add$main);
Elm['Stacks'] = Elm['Stacks'] || {};
Elm['Stacks']['Core'] = Elm['Stacks']['Core'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Stacks']['Core'], 'Stacks.Core', typeof _narkisr$elm_ui$Stacks_Core$main === 'undefined' ? null : _narkisr$elm_ui$Stacks_Core$main);
Elm['Stacks'] = Elm['Stacks'] || {};
Elm['Stacks']['Model'] = Elm['Stacks']['Model'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Stacks']['Model'], 'Stacks.Model', typeof _narkisr$elm_ui$Stacks_Model$main === 'undefined' ? null : _narkisr$elm_ui$Stacks_Model$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Add'] = Elm['Systems']['Add'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Add'], 'Systems.Add', typeof _narkisr$elm_ui$Systems_Add$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Add$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Add'] = Elm['Systems']['Add'] || {};
Elm['Systems']['Add']['AWS'] = Elm['Systems']['Add']['AWS'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Add']['AWS'], 'Systems.Add.AWS', typeof _narkisr$elm_ui$Systems_Add_AWS$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Add_AWS$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Add'] = Elm['Systems']['Add'] || {};
Elm['Systems']['Add']['Common'] = Elm['Systems']['Add']['Common'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Add']['Common'], 'Systems.Add.Common', typeof _narkisr$elm_ui$Systems_Add_Common$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Add_Common$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Add'] = Elm['Systems']['Add'] || {};
Elm['Systems']['Add']['Digital'] = Elm['Systems']['Add']['Digital'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Add']['Digital'], 'Systems.Add.Digital', typeof _narkisr$elm_ui$Systems_Add_Digital$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Add_Digital$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Add'] = Elm['Systems']['Add'] || {};
Elm['Systems']['Add']['Encoders'] = Elm['Systems']['Add']['Encoders'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Add']['Encoders'], 'Systems.Add.Encoders', typeof _narkisr$elm_ui$Systems_Add_Encoders$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Add_Encoders$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Add'] = Elm['Systems']['Add'] || {};
Elm['Systems']['Add']['GCE'] = Elm['Systems']['Add']['GCE'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Add']['GCE'], 'Systems.Add.GCE', typeof _narkisr$elm_ui$Systems_Add_GCE$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Add_GCE$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Add'] = Elm['Systems']['Add'] || {};
Elm['Systems']['Add']['General'] = Elm['Systems']['Add']['General'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Add']['General'], 'Systems.Add.General', typeof _narkisr$elm_ui$Systems_Add_General$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Add_General$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Add'] = Elm['Systems']['Add'] || {};
Elm['Systems']['Add']['KVM'] = Elm['Systems']['Add']['KVM'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Add']['KVM'], 'Systems.Add.KVM', typeof _narkisr$elm_ui$Systems_Add_KVM$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Add_KVM$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Add'] = Elm['Systems']['Add'] || {};
Elm['Systems']['Add']['Openstack'] = Elm['Systems']['Add']['Openstack'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Add']['Openstack'], 'Systems.Add.Openstack', typeof _narkisr$elm_ui$Systems_Add_Openstack$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Add_Openstack$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Add'] = Elm['Systems']['Add'] || {};
Elm['Systems']['Add']['Persistency'] = Elm['Systems']['Add']['Persistency'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Add']['Persistency'], 'Systems.Add.Persistency', typeof _narkisr$elm_ui$Systems_Add_Persistency$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Add_Persistency$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Add'] = Elm['Systems']['Add'] || {};
Elm['Systems']['Add']['Physical'] = Elm['Systems']['Add']['Physical'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Add']['Physical'], 'Systems.Add.Physical', typeof _narkisr$elm_ui$Systems_Add_Physical$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Add_Physical$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Add'] = Elm['Systems']['Add'] || {};
Elm['Systems']['Add']['Validations'] = Elm['Systems']['Add']['Validations'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Add']['Validations'], 'Systems.Add.Validations', typeof _narkisr$elm_ui$Systems_Add_Validations$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Add_Validations$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Core'] = Elm['Systems']['Core'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Core'], 'Systems.Core', typeof _narkisr$elm_ui$Systems_Core$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Core$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Decoders'] = Elm['Systems']['Decoders'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Decoders'], 'Systems.Decoders', typeof _narkisr$elm_ui$Systems_Decoders$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Decoders$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Launch'] = Elm['Systems']['Launch'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Launch'], 'Systems.Launch', typeof _narkisr$elm_ui$Systems_Launch$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Launch$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['List'] = Elm['Systems']['List'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['List'], 'Systems.List', typeof _narkisr$elm_ui$Systems_List$main === 'undefined' ? null : _narkisr$elm_ui$Systems_List$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Model'] = Elm['Systems']['Model'] || {};
Elm['Systems']['Model']['AWS'] = Elm['Systems']['Model']['AWS'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Model']['AWS'], 'Systems.Model.AWS', typeof _narkisr$elm_ui$Systems_Model_AWS$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Model_AWS$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Model'] = Elm['Systems']['Model'] || {};
Elm['Systems']['Model']['Common'] = Elm['Systems']['Model']['Common'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Model']['Common'], 'Systems.Model.Common', typeof _narkisr$elm_ui$Systems_Model_Common$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Model_Common$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Model'] = Elm['Systems']['Model'] || {};
Elm['Systems']['Model']['Digital'] = Elm['Systems']['Model']['Digital'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Model']['Digital'], 'Systems.Model.Digital', typeof _narkisr$elm_ui$Systems_Model_Digital$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Model_Digital$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Model'] = Elm['Systems']['Model'] || {};
Elm['Systems']['Model']['GCE'] = Elm['Systems']['Model']['GCE'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Model']['GCE'], 'Systems.Model.GCE', typeof _narkisr$elm_ui$Systems_Model_GCE$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Model_GCE$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Model'] = Elm['Systems']['Model'] || {};
Elm['Systems']['Model']['KVM'] = Elm['Systems']['Model']['KVM'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Model']['KVM'], 'Systems.Model.KVM', typeof _narkisr$elm_ui$Systems_Model_KVM$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Model_KVM$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Model'] = Elm['Systems']['Model'] || {};
Elm['Systems']['Model']['Openstack'] = Elm['Systems']['Model']['Openstack'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Model']['Openstack'], 'Systems.Model.Openstack', typeof _narkisr$elm_ui$Systems_Model_Openstack$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Model_Openstack$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Model'] = Elm['Systems']['Model'] || {};
Elm['Systems']['Model']['Physical'] = Elm['Systems']['Model']['Physical'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Model']['Physical'], 'Systems.Model.Physical', typeof _narkisr$elm_ui$Systems_Model_Physical$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Model_Physical$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['Routing'] = Elm['Systems']['Routing'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['Routing'], 'Systems.Routing', typeof _narkisr$elm_ui$Systems_Routing$main === 'undefined' ? null : _narkisr$elm_ui$Systems_Routing$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['View'] = Elm['Systems']['View'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['View'], 'Systems.View', typeof _narkisr$elm_ui$Systems_View$main === 'undefined' ? null : _narkisr$elm_ui$Systems_View$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['View'] = Elm['Systems']['View'] || {};
Elm['Systems']['View']['AWS'] = Elm['Systems']['View']['AWS'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['View']['AWS'], 'Systems.View.AWS', typeof _narkisr$elm_ui$Systems_View_AWS$main === 'undefined' ? null : _narkisr$elm_ui$Systems_View_AWS$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['View'] = Elm['Systems']['View'] || {};
Elm['Systems']['View']['Digital'] = Elm['Systems']['View']['Digital'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['View']['Digital'], 'Systems.View.Digital', typeof _narkisr$elm_ui$Systems_View_Digital$main === 'undefined' ? null : _narkisr$elm_ui$Systems_View_Digital$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['View'] = Elm['Systems']['View'] || {};
Elm['Systems']['View']['GCE'] = Elm['Systems']['View']['GCE'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['View']['GCE'], 'Systems.View.GCE', typeof _narkisr$elm_ui$Systems_View_GCE$main === 'undefined' ? null : _narkisr$elm_ui$Systems_View_GCE$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['View'] = Elm['Systems']['View'] || {};
Elm['Systems']['View']['KVM'] = Elm['Systems']['View']['KVM'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['View']['KVM'], 'Systems.View.KVM', typeof _narkisr$elm_ui$Systems_View_KVM$main === 'undefined' ? null : _narkisr$elm_ui$Systems_View_KVM$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['View'] = Elm['Systems']['View'] || {};
Elm['Systems']['View']['Openstack'] = Elm['Systems']['View']['Openstack'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['View']['Openstack'], 'Systems.View.Openstack', typeof _narkisr$elm_ui$Systems_View_Openstack$main === 'undefined' ? null : _narkisr$elm_ui$Systems_View_Openstack$main);
Elm['Systems'] = Elm['Systems'] || {};
Elm['Systems']['View'] = Elm['Systems']['View'] || {};
Elm['Systems']['View']['Physical'] = Elm['Systems']['View']['Physical'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Systems']['View']['Physical'], 'Systems.View.Physical', typeof _narkisr$elm_ui$Systems_View_Physical$main === 'undefined' ? null : _narkisr$elm_ui$Systems_View_Physical$main);
Elm['Table'] = Elm['Table'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Table'], 'Table', typeof _narkisr$elm_ui$Table$main === 'undefined' ? null : _narkisr$elm_ui$Table$main);
Elm['Templates'] = Elm['Templates'] || {};
Elm['Templates']['Add'] = Elm['Templates']['Add'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Templates']['Add'], 'Templates.Add', typeof _narkisr$elm_ui$Templates_Add$main === 'undefined' ? null : _narkisr$elm_ui$Templates_Add$main);
Elm['Templates'] = Elm['Templates'] || {};
Elm['Templates']['Core'] = Elm['Templates']['Core'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Templates']['Core'], 'Templates.Core', typeof _narkisr$elm_ui$Templates_Core$main === 'undefined' ? null : _narkisr$elm_ui$Templates_Core$main);
Elm['Templates'] = Elm['Templates'] || {};
Elm['Templates']['Delete'] = Elm['Templates']['Delete'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Templates']['Delete'], 'Templates.Delete', typeof _narkisr$elm_ui$Templates_Delete$main === 'undefined' ? null : _narkisr$elm_ui$Templates_Delete$main);
Elm['Templates'] = Elm['Templates'] || {};
Elm['Templates']['Launch'] = Elm['Templates']['Launch'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Templates']['Launch'], 'Templates.Launch', typeof _narkisr$elm_ui$Templates_Launch$main === 'undefined' ? null : _narkisr$elm_ui$Templates_Launch$main);
Elm['Templates'] = Elm['Templates'] || {};
Elm['Templates']['List'] = Elm['Templates']['List'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Templates']['List'], 'Templates.List', typeof _narkisr$elm_ui$Templates_List$main === 'undefined' ? null : _narkisr$elm_ui$Templates_List$main);
Elm['Templates'] = Elm['Templates'] || {};
Elm['Templates']['Model'] = Elm['Templates']['Model'] || {};
Elm['Templates']['Model']['Common'] = Elm['Templates']['Model']['Common'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Templates']['Model']['Common'], 'Templates.Model.Common', typeof _narkisr$elm_ui$Templates_Model_Common$main === 'undefined' ? null : _narkisr$elm_ui$Templates_Model_Common$main);
Elm['Templates'] = Elm['Templates'] || {};
Elm['Templates']['Persistency'] = Elm['Templates']['Persistency'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Templates']['Persistency'], 'Templates.Persistency', typeof _narkisr$elm_ui$Templates_Persistency$main === 'undefined' ? null : _narkisr$elm_ui$Templates_Persistency$main);
Elm['Templates'] = Elm['Templates'] || {};
Elm['Templates']['Routing'] = Elm['Templates']['Routing'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Templates']['Routing'], 'Templates.Routing', typeof _narkisr$elm_ui$Templates_Routing$main === 'undefined' ? null : _narkisr$elm_ui$Templates_Routing$main);
Elm['Types'] = Elm['Types'] || {};
Elm['Types']['Add'] = Elm['Types']['Add'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Types']['Add'], 'Types.Add', typeof _narkisr$elm_ui$Types_Add$main === 'undefined' ? null : _narkisr$elm_ui$Types_Add$main);
Elm['Types'] = Elm['Types'] || {};
Elm['Types']['Add'] = Elm['Types']['Add'] || {};
Elm['Types']['Add']['Common'] = Elm['Types']['Add']['Common'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Types']['Add']['Common'], 'Types.Add.Common', typeof _narkisr$elm_ui$Types_Add_Common$main === 'undefined' ? null : _narkisr$elm_ui$Types_Add_Common$main);
Elm['Types'] = Elm['Types'] || {};
Elm['Types']['Add'] = Elm['Types']['Add'] || {};
Elm['Types']['Add']['Main'] = Elm['Types']['Add']['Main'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Types']['Add']['Main'], 'Types.Add.Main', typeof _narkisr$elm_ui$Types_Add_Main$main === 'undefined' ? null : _narkisr$elm_ui$Types_Add_Main$main);
Elm['Types'] = Elm['Types'] || {};
Elm['Types']['Add'] = Elm['Types']['Add'] || {};
Elm['Types']['Add']['Puppet'] = Elm['Types']['Add']['Puppet'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Types']['Add']['Puppet'], 'Types.Add.Puppet', typeof _narkisr$elm_ui$Types_Add_Puppet$main === 'undefined' ? null : _narkisr$elm_ui$Types_Add_Puppet$main);
Elm['Types'] = Elm['Types'] || {};
Elm['Types']['Core'] = Elm['Types']['Core'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Types']['Core'], 'Types.Core', typeof _narkisr$elm_ui$Types_Core$main === 'undefined' ? null : _narkisr$elm_ui$Types_Core$main);
Elm['Types'] = Elm['Types'] || {};
Elm['Types']['Delete'] = Elm['Types']['Delete'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Types']['Delete'], 'Types.Delete', typeof _narkisr$elm_ui$Types_Delete$main === 'undefined' ? null : _narkisr$elm_ui$Types_Delete$main);
Elm['Types'] = Elm['Types'] || {};
Elm['Types']['Edit'] = Elm['Types']['Edit'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Types']['Edit'], 'Types.Edit', typeof _narkisr$elm_ui$Types_Edit$main === 'undefined' ? null : _narkisr$elm_ui$Types_Edit$main);
Elm['Types'] = Elm['Types'] || {};
Elm['Types']['List'] = Elm['Types']['List'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Types']['List'], 'Types.List', typeof _narkisr$elm_ui$Types_List$main === 'undefined' ? null : _narkisr$elm_ui$Types_List$main);
Elm['Types'] = Elm['Types'] || {};
Elm['Types']['Model'] = Elm['Types']['Model'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Types']['Model'], 'Types.Model', typeof _narkisr$elm_ui$Types_Model$main === 'undefined' ? null : _narkisr$elm_ui$Types_Model$main);
Elm['Types'] = Elm['Types'] || {};
Elm['Types']['Persistency'] = Elm['Types']['Persistency'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Types']['Persistency'], 'Types.Persistency', typeof _narkisr$elm_ui$Types_Persistency$main === 'undefined' ? null : _narkisr$elm_ui$Types_Persistency$main);
Elm['Types'] = Elm['Types'] || {};
Elm['Types']['Routing'] = Elm['Types']['Routing'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Types']['Routing'], 'Types.Routing', typeof _narkisr$elm_ui$Types_Routing$main === 'undefined' ? null : _narkisr$elm_ui$Types_Routing$main);
Elm['Types'] = Elm['Types'] || {};
Elm['Types']['View'] = Elm['Types']['View'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Types']['View'], 'Types.View', typeof _narkisr$elm_ui$Types_View$main === 'undefined' ? null : _narkisr$elm_ui$Types_View$main);
Elm['Users'] = Elm['Users'] || {};
Elm['Users']['Add'] = Elm['Users']['Add'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Users']['Add'], 'Users.Add', typeof _narkisr$elm_ui$Users_Add$main === 'undefined' ? null : _narkisr$elm_ui$Users_Add$main);
Elm['Users'] = Elm['Users'] || {};
Elm['Users']['Add'] = Elm['Users']['Add'] || {};
Elm['Users']['Add']['Main'] = Elm['Users']['Add']['Main'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Users']['Add']['Main'], 'Users.Add.Main', typeof _narkisr$elm_ui$Users_Add_Main$main === 'undefined' ? null : _narkisr$elm_ui$Users_Add_Main$main);
Elm['Users'] = Elm['Users'] || {};
Elm['Users']['Add'] = Elm['Users']['Add'] || {};
Elm['Users']['Add']['Perm'] = Elm['Users']['Add']['Perm'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Users']['Add']['Perm'], 'Users.Add.Perm', typeof _narkisr$elm_ui$Users_Add_Perm$main === 'undefined' ? null : _narkisr$elm_ui$Users_Add_Perm$main);
Elm['Users'] = Elm['Users'] || {};
Elm['Users']['Core'] = Elm['Users']['Core'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Users']['Core'], 'Users.Core', typeof _narkisr$elm_ui$Users_Core$main === 'undefined' ? null : _narkisr$elm_ui$Users_Core$main);
Elm['Users'] = Elm['Users'] || {};
Elm['Users']['List'] = Elm['Users']['List'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Users']['List'], 'Users.List', typeof _narkisr$elm_ui$Users_List$main === 'undefined' ? null : _narkisr$elm_ui$Users_List$main);
Elm['Users'] = Elm['Users'] || {};
Elm['Users']['Model'] = Elm['Users']['Model'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Users']['Model'], 'Users.Model', typeof _narkisr$elm_ui$Users_Model$main === 'undefined' ? null : _narkisr$elm_ui$Users_Model$main);
Elm['Users'] = Elm['Users'] || {};
Elm['Users']['Routing'] = Elm['Users']['Routing'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Users']['Routing'], 'Users.Routing', typeof _narkisr$elm_ui$Users_Routing$main === 'undefined' ? null : _narkisr$elm_ui$Users_Routing$main);
Elm['Users'] = Elm['Users'] || {};
Elm['Users']['Session'] = Elm['Users']['Session'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Users']['Session'], 'Users.Session', typeof _narkisr$elm_ui$Users_Session$main === 'undefined' ? null : _narkisr$elm_ui$Users_Session$main);
Elm['Users'] = Elm['Users'] || {};
Elm['Users']['View'] = Elm['Users']['View'] || {};
_elm_lang$core$Native_Platform.addPublicModule(Elm['Users']['View'], 'Users.View', typeof _narkisr$elm_ui$Users_View$main === 'undefined' ? null : _narkisr$elm_ui$Users_View$main);

if (typeof define === "function" && define['amd'])
{
  define([], function() { return Elm; });
  return;
}

if (typeof module === "object")
{
  module['exports'] = Elm;
  return;
}

var globalElm = this['Elm'];
if (typeof globalElm === "undefined")
{
  this['Elm'] = Elm;
  return;
}

for (var publicModule in Elm)
{
  if (publicModule in globalElm)
  {
    throw new Error('There are two Elm modules called `' + publicModule + '` on this page! Rename one of them.');
  }
  globalElm[publicModule] = Elm[publicModule];
}

}).call(this);

